
ATMEGA_DSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800200  00001f42  00001fd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c6  008003dc  008003dc  000021b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e38  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000128b  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001877  00000000  00000000  0000654f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  00007dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c0d  00000000  00000000  00008518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a8b  00000000  00000000  00009125  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000abb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c2       	rjmp	.+1290   	; 0x50c <__ctors_end>
       2:	00 00       	nop
       4:	a3 c2       	rjmp	.+1350   	; 0x54c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c2       	rjmp	.+1346   	; 0x54c <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_3>
      10:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__vector_4>
      14:	9b c2       	rjmp	.+1334   	; 0x54c <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_6>
      1c:	97 c2       	rjmp	.+1326   	; 0x54c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c2       	rjmp	.+1322   	; 0x54c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c2       	rjmp	.+1318   	; 0x54c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c2       	rjmp	.+1314   	; 0x54c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c2       	rjmp	.+1310   	; 0x54c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c2       	rjmp	.+1306   	; 0x54c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c2       	rjmp	.+1302   	; 0x54c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c2       	rjmp	.+1298   	; 0x54c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c2       	rjmp	.+1294   	; 0x54c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c2       	rjmp	.+1290   	; 0x54c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c2       	rjmp	.+1286   	; 0x54c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c2       	rjmp	.+1282   	; 0x54c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c2       	rjmp	.+1278   	; 0x54c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c2       	rjmp	.+1274   	; 0x54c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_21>
      58:	79 c2       	rjmp	.+1266   	; 0x54c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	77 c2       	rjmp	.+1262   	; 0x54c <__bad_interrupt>
      5e:	00 00       	nop
      60:	75 c2       	rjmp	.+1258   	; 0x54c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c2       	rjmp	.+1254   	; 0x54c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c2       	rjmp	.+1250   	; 0x54c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c2       	rjmp	.+1246   	; 0x54c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c2       	rjmp	.+1242   	; 0x54c <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 be 08 	jmp	0x117c	; 0x117c <__vector_29>
      78:	69 c2       	rjmp	.+1234   	; 0x54c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c2       	rjmp	.+1230   	; 0x54c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c2       	rjmp	.+1226   	; 0x54c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c2       	rjmp	.+1222   	; 0x54c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c2       	rjmp	.+1218   	; 0x54c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c2       	rjmp	.+1214   	; 0x54c <__bad_interrupt>
      8e:	00 00       	nop
      90:	5d c2       	rjmp	.+1210   	; 0x54c <__bad_interrupt>
      92:	00 00       	nop
      94:	5b c2       	rjmp	.+1206   	; 0x54c <__bad_interrupt>
      96:	00 00       	nop
      98:	59 c2       	rjmp	.+1202   	; 0x54c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	57 c2       	rjmp	.+1198   	; 0x54c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	55 c2       	rjmp	.+1194   	; 0x54c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c2       	rjmp	.+1190   	; 0x54c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c2       	rjmp	.+1186   	; 0x54c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4f c2       	rjmp	.+1182   	; 0x54c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4d c2       	rjmp	.+1178   	; 0x54c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4b c2       	rjmp	.+1174   	; 0x54c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	49 c2       	rjmp	.+1170   	; 0x54c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	47 c2       	rjmp	.+1166   	; 0x54c <__bad_interrupt>
      be:	00 00       	nop
      c0:	45 c2       	rjmp	.+1162   	; 0x54c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	43 c2       	rjmp	.+1158   	; 0x54c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	41 c2       	rjmp	.+1154   	; 0x54c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3f c2       	rjmp	.+1150   	; 0x54c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3d c2       	rjmp	.+1146   	; 0x54c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3b c2       	rjmp	.+1142   	; 0x54c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	39 c2       	rjmp	.+1138   	; 0x54c <__bad_interrupt>
      da:	00 00       	nop
      dc:	37 c2       	rjmp	.+1134   	; 0x54c <__bad_interrupt>
      de:	00 00       	nop
      e0:	35 c2       	rjmp	.+1130   	; 0x54c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__trampolines_end>:
     112:	00 40       	sbci	r16, 0x00	; 0
     114:	7a 10       	cpse	r7, r10
     116:	f3 5a       	subi	r31, 0xA3	; 163
     118:	00 a0       	ldd	r0, Z+32	; 0x20
     11a:	72 4e       	sbci	r23, 0xE2	; 226
     11c:	18 09       	sbc	r17, r8
     11e:	00 10       	cpse	r0, r0
     120:	a5 d4       	rcall	.+2378   	; 0xa6c <printMaterial+0x26>
     122:	e8 00       	.word	0x00e8	; ????
     124:	00 e8       	ldi	r16, 0x80	; 128
     126:	76 48       	sbci	r23, 0x86	; 134
     128:	17 00       	.word	0x0017	; ????
     12a:	00 e4       	ldi	r16, 0x40	; 64
     12c:	0b 54       	subi	r16, 0x4B	; 75
     12e:	02 00       	.word	0x0002	; ????
     130:	00 ca       	rjmp	.-3072   	; 0xfffff532 <__eeprom_end+0xff7ef532>
     132:	9a 3b       	cpi	r25, 0xBA	; 186
     134:	00 00       	nop
     136:	00 e1       	ldi	r16, 0x10	; 16
     138:	f5 05       	cpc	r31, r5
     13a:	00 00       	nop
     13c:	80 96       	adiw	r24, 0x20	; 32
     13e:	98 00       	.word	0x0098	; ????
     140:	00 00       	nop
     142:	40 42       	sbci	r20, 0x20	; 32
     144:	0f 00       	.word	0x000f	; ????
     146:	00 00       	nop
     148:	a0 86       	std	Z+8, r10	; 0x08
     14a:	01 00       	.word	0x0001	; ????
     14c:	00 00       	nop
     14e:	10 27       	eor	r17, r16
     150:	00 00       	nop
     152:	00 00       	nop
     154:	e8 03       	fmulsu	r22, r16
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	64 00       	.word	0x0064	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	0a 00       	.word	0x000a	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	01 00       	.word	0x0001	; ????
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	2c 76       	andi	r18, 0x6C	; 108
     16e:	d8 88       	ldd	r13, Y+16	; 0x10
     170:	dc 67       	ori	r29, 0x7C	; 124
     172:	4f 08       	sbc	r4, r15
     174:	23 df       	rcall	.-442    	; 0xffffffbc <__eeprom_end+0xff7effbc>
     176:	c1 df       	rcall	.-126    	; 0xfa <__SREG__+0xbb>
     178:	ae 59       	subi	r26, 0x9E	; 158
     17a:	e1 b1       	in	r30, 0x01	; 1
     17c:	b7 96       	adiw	r30, 0x27	; 39
     17e:	e5 e3       	ldi	r30, 0x35	; 53
     180:	e4 53       	subi	r30, 0x34	; 52
     182:	c6 3a       	cpi	r28, 0xA6	; 166
     184:	e6 51       	subi	r30, 0x16	; 22
     186:	99 76       	andi	r25, 0x69	; 105
     188:	96 e8       	ldi	r25, 0x86	; 134
     18a:	e6 c2       	rjmp	.+1484   	; 0x758 <loadMaterials+0x4e>
     18c:	84 26       	eor	r8, r20
     18e:	eb 89       	ldd	r30, Y+19	; 0x13
     190:	8c 9b       	sbis	0x11, 4	; 17
     192:	62 ed       	ldi	r22, 0xD2	; 210
     194:	40 7c       	andi	r20, 0xC0	; 192
     196:	6f fc       	.word	0xfc6f	; ????
     198:	ef bc       	out	0x2f, r14	; 47
     19a:	9c 9f       	mul	r25, r28
     19c:	40 f2       	brcs	.-112    	; 0x12e <__trampolines_end+0x1c>
     19e:	ba a5       	ldd	r27, Y+42	; 0x2a
     1a0:	6f a5       	ldd	r22, Y+47	; 0x2f
     1a2:	f4 90       	lpm	r15, Z
     1a4:	05 5a       	subi	r16, 0xA5	; 165
     1a6:	2a f7       	brpl	.-54     	; 0x172 <__trampolines_end+0x60>
     1a8:	5c 93       	st	X, r21
     1aa:	6b 6c       	ori	r22, 0xCB	; 203
     1ac:	f9 67       	ori	r31, 0x79	; 121
     1ae:	6d c1       	rjmp	.+730    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     1b0:	1b fc       	.word	0xfc1b	; ????
     1b2:	e0 e4       	ldi	r30, 0x40	; 64
     1b4:	0d 47       	sbci	r16, 0x7D	; 125
     1b6:	fe f5       	brtc	.+126    	; 0x236 <myFont+0x2a>
     1b8:	20 e6       	ldi	r18, 0x60	; 96
     1ba:	b5 00       	.word	0x00b5	; ????
     1bc:	d0 ed       	ldi	r29, 0xD0	; 208
     1be:	90 2e       	mov	r9, r16
     1c0:	03 00       	.word	0x0003	; ????
     1c2:	94 35       	cpi	r25, 0x54	; 84
     1c4:	77 05       	cpc	r23, r7
     1c6:	00 80       	ld	r0, Z
     1c8:	84 1e       	adc	r8, r20
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	00 20       	and	r0, r0
     1ce:	4e 0a       	sbc	r4, r30
     1d0:	00 00       	nop
     1d2:	00 c8       	rjmp	.-4096   	; 0xfffff1d4 <__eeprom_end+0xff7ef1d4>
     1d4:	0c 33       	cpi	r16, 0x3C	; 60
     1d6:	33 33       	cpi	r19, 0x33	; 51
     1d8:	33 0f       	add	r19, r19
     1da:	98 6e       	ori	r25, 0xE8	; 232
     1dc:	12 83       	std	Z+2, r17	; 0x02
     1de:	11 41       	sbci	r17, 0x11	; 17
     1e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1e2:	21 14       	cp	r2, r1
     1e4:	89 3b       	cpi	r24, 0xB9	; 185
     1e6:	e6 55       	subi	r30, 0x56	; 86
     1e8:	16 cf       	rjmp	.-468    	; 0x16 <__FUSE_REGION_LENGTH__+0x13>
     1ea:	fe e6       	ldi	r31, 0x6E	; 110
     1ec:	db 18       	sub	r13, r11
     1ee:	d1 84       	ldd	r13, Z+9	; 0x09
     1f0:	4b 38       	cpi	r20, 0x8B	; 139
     1f2:	1b f7       	brvc	.-58     	; 0x1ba <__trampolines_end+0xa8>
     1f4:	7c 1d       	adc	r23, r12
     1f6:	90 1d       	adc	r25, r0
     1f8:	a4 bb       	out	0x14, r26	; 20
     1fa:	e4 24       	eor	r14, r4
     1fc:	20 32       	cpi	r18, 0x20	; 32
     1fe:	84 72       	andi	r24, 0x24	; 36
     200:	5e 22       	and	r5, r30
     202:	81 00       	.word	0x0081	; ????
     204:	c9 f1       	breq	.+114    	; 0x278 <myFont+0x6c>
     206:	24 ec       	ldi	r18, 0xC4	; 196
     208:	a1 e5       	ldi	r26, 0x51	; 81
     20a:	3d 27       	eor	r19, r29

0000020c <myFont>:
	...
     214:	00 00 5f 00 00 00 00 00 00 00 07 00 07 00 00 00     .._.............
     224:	00 14 7f 14 7f 14 00 00 00 24 2a 7f 2a 12 00 00     .........$*.*...
     234:	00 23 13 08 64 62 00 00 00 36 49 55 22 50 00 00     .#..db...6IU"P..
     244:	00 00 05 03 00 00 00 00 00 1c 22 41 00 00 00 00     .........."A....
     254:	00 41 22 1c 00 00 00 00 00 08 2a 1c 2a 08 00 00     .A".......*.*...
     264:	00 08 08 3e 08 08 00 00 00 a0 60 00 00 00 00 00     ...>......`.....
     274:	00 08 08 08 08 08 00 00 00 60 60 00 00 00 00 00     .........``.....
     284:	00 20 10 08 04 02 00 00 00 3e 51 49 45 3e 00 00     . .......>QIE>..
     294:	00 00 42 7f 40 00 00 00 00 62 51 49 49 46 00 00     ..B.@....bQIIF..
     2a4:	00 22 41 49 49 36 00 00 00 18 14 12 7f 10 00 00     ."AII6..........
     2b4:	00 27 45 45 45 39 00 00 00 3c 4a 49 49 30 00 00     .'EEE9...<JII0..
     2c4:	00 01 71 09 05 03 00 00 00 36 49 49 49 36 00 00     ..q......6III6..
     2d4:	00 06 49 49 29 1e 00 00 00 00 36 36 00 00 00 00     ..II).....66....
     2e4:	00 00 ac 6c 00 00 00 00 00 08 14 22 41 00 00 00     ...l......."A...
     2f4:	00 14 14 14 14 14 00 00 00 41 22 14 08 00 00 00     .........A".....
     304:	00 02 01 51 09 06 00 00 00 32 49 79 41 3e 00 00     ...Q.....2IyA>..
     314:	00 7e 09 09 09 7e 00 00 00 7f 49 49 49 36 00 00     .~...~....III6..
     324:	00 3e 41 41 41 22 00 00 00 7f 41 41 22 1c 00 00     .>AAA"....AA"...
     334:	00 7f 49 49 49 41 00 00 00 7f 09 09 09 01 00 00     ..IIIA..........
     344:	00 3e 41 41 51 72 00 00 00 7f 08 08 08 7f 00 00     .>AAQr..........
     354:	00 41 7f 41 00 00 00 00 00 20 40 41 3f 01 00 00     .A.A..... @A?...
     364:	00 7f 08 14 22 41 00 00 00 7f 40 40 40 40 00 00     ...."A....@@@@..
     374:	00 7f 02 0c 02 7f 00 00 00 7f 04 08 10 7f 00 00     ................
     384:	00 3e 41 41 41 3e 00 00 00 7f 09 09 09 06 00 00     .>AAA>..........
     394:	00 3e 41 51 21 5e 00 00 00 7f 09 19 29 46 00 00     .>AQ!^......)F..
     3a4:	00 26 49 49 49 32 00 00 00 01 01 7f 01 01 00 00     .&III2..........
     3b4:	00 3f 40 40 40 3f 00 00 00 1f 20 40 20 1f 00 00     .?@@@?.... @ ...
     3c4:	00 3f 40 38 40 3f 00 00 00 63 14 08 14 63 00 00     .?@8@?...c...c..
     3d4:	00 03 04 78 04 03 00 00 00 61 51 49 45 43 00 00     ...x.....aQIEC..
     3e4:	00 7f 41 41 00 00 00 00 00 02 04 08 10 20 00 00     ..AA......... ..
     3f4:	00 41 41 7f 00 00 00 00 00 04 02 01 02 04 00 00     .AA.............
     404:	00 80 80 80 80 80 00 00 00 01 02 04 00 00 00 00     ................
     414:	00 20 54 54 54 78 00 00 00 7f 48 44 44 38 00 00     . TTTx....HDD8..
     424:	00 38 44 44 28 00 00 00 00 38 44 44 48 7f 00 00     .8DD(....8DDH...
     434:	00 38 54 54 54 18 00 00 00 08 7e 09 02 00 00 00     .8TTT.....~.....
     444:	00 18 a4 a4 a4 7c 00 00 00 7f 08 04 04 78 00 00     .....|.......x..
     454:	00 00 7d 00 00 00 00 00 00 80 84 7d 00 00 00 00     ..}........}....
     464:	00 7f 10 28 44 00 00 00 00 41 7f 40 00 00 00 00     ...(D....A.@....
     474:	00 7c 04 18 04 78 00 00 00 7c 08 04 7c 00 00 00     .|...x...|..|...
     484:	00 38 44 44 38 00 00 00 00 fc 24 24 18 00 00 00     .8DD8.....$$....
     494:	00 18 24 24 fc 00 00 00 00 00 7c 08 04 00 00 00     ..$$......|.....
     4a4:	00 48 54 54 24 00 00 00 00 04 7f 44 00 00 00 00     .HTT$......D....
     4b4:	00 3c 40 40 7c 00 00 00 00 1c 20 40 20 1c 00 00     .<@@|..... @ ...
     4c4:	00 3c 40 30 40 3c 00 00 00 44 28 10 28 44 00 00     .<@0@<...D(.(D..
     4d4:	00 1c a0 a0 7c 00 00 00 00 44 64 54 4c 44 00 00     ....|....DdTLD..
     4e4:	00 08 36 41 00 00 00 00 00 00 7f 00 00 00 00 00     ..6A............
     4f4:	00 41 36 08 00 00 00 00 00 02 01 01 02 01 00 00     .A6.............
     504:	00 02 05 05 02 00 00 00                             ........

0000050c <__ctors_end>:
     50c:	11 24       	eor	r1, r1
     50e:	1f be       	out	0x3f, r1	; 63
     510:	cf ef       	ldi	r28, 0xFF	; 255
     512:	d1 e2       	ldi	r29, 0x21	; 33
     514:	de bf       	out	0x3e, r29	; 62
     516:	cd bf       	out	0x3d, r28	; 61
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	0c bf       	out	0x3c, r16	; 60

0000051c <__do_copy_data>:
     51c:	13 e0       	ldi	r17, 0x03	; 3
     51e:	a0 e0       	ldi	r26, 0x00	; 0
     520:	b2 e0       	ldi	r27, 0x02	; 2
     522:	e2 e4       	ldi	r30, 0x42	; 66
     524:	ff e1       	ldi	r31, 0x1F	; 31
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0b bf       	out	0x3b, r16	; 59
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__do_copy_data+0x14>
     52c:	07 90       	elpm	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	ac 3d       	cpi	r26, 0xDC	; 220
     532:	b1 07       	cpc	r27, r17
     534:	d9 f7       	brne	.-10     	; 0x52c <__do_copy_data+0x10>

00000536 <__do_clear_bss>:
     536:	25 e0       	ldi	r18, 0x05	; 5
     538:	ac ed       	ldi	r26, 0xDC	; 220
     53a:	b3 e0       	ldi	r27, 0x03	; 3
     53c:	01 c0       	rjmp	.+2      	; 0x540 <.do_clear_bss_start>

0000053e <.do_clear_bss_loop>:
     53e:	1d 92       	st	X+, r1

00000540 <.do_clear_bss_start>:
     540:	a2 3a       	cpi	r26, 0xA2	; 162
     542:	b2 07       	cpc	r27, r18
     544:	e1 f7       	brne	.-8      	; 0x53e <.do_clear_bss_loop>
     546:	45 d5       	rcall	.+2698   	; 0xfd2 <main>
     548:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <_exit>

0000054c <__bad_interrupt>:
     54c:	59 cd       	rjmp	.-1358   	; 0x0 <__vectors>

0000054e <init_adc>:
     54e:	ea e7       	ldi	r30, 0x7A	; 122
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	90 81       	ld	r25, Z
     554:	94 60       	ori	r25, 0x04	; 4
     556:	90 83       	st	Z, r25
     558:	ac e7       	ldi	r26, 0x7C	; 124
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	9c 91       	ld	r25, X
     55e:	90 62       	ori	r25, 0x20	; 32
     560:	9c 93       	st	X, r25
     562:	ae e7       	ldi	r26, 0x7E	; 126
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	9c 91       	ld	r25, X
     568:	91 60       	ori	r25, 0x01	; 1
     56a:	9c 93       	st	X, r25
     56c:	ab e7       	ldi	r26, 0x7B	; 123
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	9c 91       	ld	r25, X
     572:	93 60       	ori	r25, 0x03	; 3
     574:	9c 93       	st	X, r25
     576:	90 81       	ld	r25, Z
     578:	90 62       	ori	r25, 0x20	; 32
     57a:	90 83       	st	Z, r25
     57c:	90 81       	ld	r25, Z
     57e:	90 68       	ori	r25, 0x80	; 128
     580:	90 83       	st	Z, r25
     582:	88 23       	and	r24, r24
     584:	19 f0       	breq	.+6      	; 0x58c <init_adc+0x3e>
     586:	80 81       	ld	r24, Z
     588:	88 60       	ori	r24, 0x08	; 8
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret

0000058e <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
     58e:	81 b1       	in	r24, 0x01	; 1
     590:	81 60       	ori	r24, 0x01	; 1
     592:	81 b9       	out	0x01, r24	; 1
     594:	82 b1       	in	r24, 0x02	; 2
     596:	81 60       	ori	r24, 0x01	; 1
     598:	82 b9       	out	0x02, r24	; 2
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	83 ed       	ldi	r24, 0xD3	; 211
     59e:	90 e3       	ldi	r25, 0x30	; 48
     5a0:	21 50       	subi	r18, 0x01	; 1
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	90 40       	sbci	r25, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <I2C_Init+0x12>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <I2C_Init+0x1c>
     5aa:	00 00       	nop
     5ac:	82 e1       	ldi	r24, 0x12	; 18
     5ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     5b2:	e9 eb       	ldi	r30, 0xB9	; 185
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	8c 7f       	andi	r24, 0xFC	; 252
     5ba:	80 83       	st	Z, r24
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5c2:	08 95       	ret

000005c4 <I2C_Start>:
     5c4:	94 ea       	ldi	r25, 0xA4	; 164
     5c6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ce:	99 23       	and	r25, r25
     5d0:	e4 f7       	brge	.-8      	; 0x5ca <I2C_Start+0x6>
     5d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     5d6:	98 7f       	andi	r25, 0xF8	; 248
     5d8:	98 30       	cpi	r25, 0x08	; 8
     5da:	91 f4       	brne	.+36     	; 0x600 <I2C_Start+0x3c>
     5dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     5e0:	84 e8       	ldi	r24, 0x84	; 132
     5e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ea:	88 23       	and	r24, r24
     5ec:	e4 f7       	brge	.-8      	; 0x5e6 <I2C_Start+0x22>
     5ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     5f2:	88 7f       	andi	r24, 0xF8	; 248
     5f4:	88 31       	cpi	r24, 0x18	; 24
     5f6:	31 f0       	breq	.+12     	; 0x604 <I2C_Start+0x40>
     5f8:	80 32       	cpi	r24, 0x20	; 32
     5fa:	31 f4       	brne	.+12     	; 0x608 <I2C_Start+0x44>
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	08 95       	ret
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	08 95       	ret
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	08 95       	ret
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	08 95       	ret

0000060c <I2C_Write>:
     60c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     610:	84 e8       	ldi	r24, 0x84	; 132
     612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     616:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     61a:	88 23       	and	r24, r24
     61c:	e4 f7       	brge	.-8      	; 0x616 <I2C_Write+0xa>
     61e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     622:	88 7f       	andi	r24, 0xF8	; 248
     624:	88 32       	cpi	r24, 0x28	; 40
     626:	21 f0       	breq	.+8      	; 0x630 <I2C_Write+0x24>
     628:	80 33       	cpi	r24, 0x30	; 48
     62a:	21 f4       	brne	.+8      	; 0x634 <I2C_Write+0x28>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	08 95       	ret
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	08 95       	ret
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	08 95       	ret

00000638 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     638:	84 e9       	ldi	r24, 0x94	; 148
     63a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     63e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     642:	84 fd       	sbrc	r24, 4
     644:	fc cf       	rjmp	.-8      	; 0x63e <I2C_Stop+0x6>
     646:	08 95       	ret

00000648 <nextState>:
 }
 
 
  //Set next state in state machine
  void nextState(char input){
	  tilstand = input;
     648:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <tilstand>
     64c:	08 95       	ret

0000064e <init_trigonometry>:
 // DFT
 // ================================================
 
 //Pre-load Trigonometric values into buffers:
 void init_trigonometry(){
	 for(int i = 0; i<NUM_SAMPLES; i++){
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	56 c0       	rjmp	.+172    	; 0x700 <init_trigonometry+0xb2>
		switch(trig_count){
     654:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <trig_count>
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	c9 f0       	breq	.+50     	; 0x68e <init_trigonometry+0x40>
     65c:	28 f0       	brcs	.+10     	; 0x668 <init_trigonometry+0x1a>
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	49 f1       	breq	.+82     	; 0x6b4 <init_trigonometry+0x66>
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	d1 f1       	breq	.+116    	; 0x6da <init_trigonometry+0x8c>
     666:	4a c0       	rjmp	.+148    	; 0x6fc <init_trigonometry+0xae>
			case 0:
			ReTrig[i]=1;
     668:	a9 01       	movw	r20, r18
     66a:	44 0f       	add	r20, r20
     66c:	55 1f       	adc	r21, r21
     66e:	fa 01       	movw	r30, r20
     670:	e8 5e       	subi	r30, 0xE8	; 232
     672:	fa 4f       	sbci	r31, 0xFA	; 250
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	71 83       	std	Z+1, r23	; 0x01
     67a:	60 83       	st	Z, r22
			ImTrig[i]=0;
     67c:	fa 01       	movw	r30, r20
     67e:	e8 56       	subi	r30, 0x68	; 104
     680:	fb 4f       	sbci	r31, 0xFB	; 251
     682:	11 82       	std	Z+1, r1	; 0x01
     684:	10 82       	st	Z, r1
			trig_count++;
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     68c:	37 c0       	rjmp	.+110    	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 1:
			ReTrig[i]=0;
     68e:	a9 01       	movw	r20, r18
     690:	44 0f       	add	r20, r20
     692:	55 1f       	adc	r21, r21
     694:	fa 01       	movw	r30, r20
     696:	e8 5e       	subi	r30, 0xE8	; 232
     698:	fa 4f       	sbci	r31, 0xFA	; 250
     69a:	11 82       	std	Z+1, r1	; 0x01
     69c:	10 82       	st	Z, r1
			ImTrig[i]=1;
     69e:	fa 01       	movw	r30, r20
     6a0:	e8 56       	subi	r30, 0x68	; 104
     6a2:	fb 4f       	sbci	r31, 0xFB	; 251
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	71 83       	std	Z+1, r23	; 0x01
     6aa:	60 83       	st	Z, r22
			trig_count++;
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     6b2:	24 c0       	rjmp	.+72     	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 2:
			ReTrig[i]=-1;
     6b4:	a9 01       	movw	r20, r18
     6b6:	44 0f       	add	r20, r20
     6b8:	55 1f       	adc	r21, r21
     6ba:	fa 01       	movw	r30, r20
     6bc:	e8 5e       	subi	r30, 0xE8	; 232
     6be:	fa 4f       	sbci	r31, 0xFA	; 250
     6c0:	6f ef       	ldi	r22, 0xFF	; 255
     6c2:	7f ef       	ldi	r23, 0xFF	; 255
     6c4:	71 83       	std	Z+1, r23	; 0x01
     6c6:	60 83       	st	Z, r22
			ImTrig[i]=0;
     6c8:	fa 01       	movw	r30, r20
     6ca:	e8 56       	subi	r30, 0x68	; 104
     6cc:	fb 4f       	sbci	r31, 0xFB	; 251
     6ce:	11 82       	std	Z+1, r1	; 0x01
     6d0:	10 82       	st	Z, r1
			trig_count++;
     6d2:	8f 5f       	subi	r24, 0xFF	; 255
     6d4:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     6d8:	11 c0       	rjmp	.+34     	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 3:
			ReTrig[i]=0;
     6da:	c9 01       	movw	r24, r18
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	fc 01       	movw	r30, r24
     6e2:	e8 5e       	subi	r30, 0xE8	; 232
     6e4:	fa 4f       	sbci	r31, 0xFA	; 250
     6e6:	11 82       	std	Z+1, r1	; 0x01
     6e8:	10 82       	st	Z, r1
			ImTrig[i]=-1;
     6ea:	fc 01       	movw	r30, r24
     6ec:	e8 56       	subi	r30, 0x68	; 104
     6ee:	fb 4f       	sbci	r31, 0xFB	; 251
     6f0:	4f ef       	ldi	r20, 0xFF	; 255
     6f2:	5f ef       	ldi	r21, 0xFF	; 255
     6f4:	51 83       	std	Z+1, r21	; 0x01
     6f6:	40 83       	st	Z, r20
			trig_count = 0;
     6f8:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <trig_count>
 // DFT
 // ================================================
 
 //Pre-load Trigonometric values into buffers:
 void init_trigonometry(){
	 for(int i = 0; i<NUM_SAMPLES; i++){
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	20 34       	cpi	r18, 0x40	; 64
     702:	31 05       	cpc	r19, r1
     704:	0c f4       	brge	.+2      	; 0x708 <init_trigonometry+0xba>
     706:	a6 cf       	rjmp	.-180    	; 0x654 <init_trigonometry+0x6>
			ImTrig[i]=-1;
			trig_count = 0;
			break;
		}
	 }
 }
     708:	08 95       	ret

0000070a <loadMaterials>:
}

//Pre-load default material phases
void loadMaterials(){
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	10 c0       	rjmp	.+32     	; 0x730 <loadMaterials+0x26>
		materials[iron][i] = IRON_PHASE;
     710:	fc 01       	movw	r30, r24
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e0 50       	subi	r30, 0x00	; 0
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	60 e2       	ldi	r22, 0x20	; 32
     724:	71 e4       	ldi	r23, 0x41	; 65
     726:	40 83       	st	Z, r20
     728:	51 83       	std	Z+1, r21	; 0x01
     72a:	62 83       	std	Z+2, r22	; 0x02
     72c:	73 83       	std	Z+3, r23	; 0x03
}

//Pre-load default material phases
void loadMaterials(){
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	84 31       	cpi	r24, 0x14	; 20
     732:	91 05       	cpc	r25, r1
     734:	6c f3       	brlt	.-38     	; 0x710 <loadMaterials+0x6>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	11 c0       	rjmp	.+34     	; 0x75e <loadMaterials+0x54>
		materials[iron][i] = IRON_PHASE;
	}
	//Copper
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[copper][i] = COPPER_PHASE; 
     73c:	fc 01       	movw	r30, r24
     73e:	74 96       	adiw	r30, 0x14	; 20
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	e0 50       	subi	r30, 0x00	; 0
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	60 e2       	ldi	r22, 0x20	; 32
     752:	72 ec       	ldi	r23, 0xC2	; 194
     754:	40 83       	st	Z, r20
     756:	51 83       	std	Z+1, r21	; 0x01
     758:	62 83       	std	Z+2, r22	; 0x02
     75a:	73 83       	std	Z+3, r23	; 0x03
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[iron][i] = IRON_PHASE;
	}
	//Copper
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	84 31       	cpi	r24, 0x14	; 20
     760:	91 05       	cpc	r25, r1
     762:	64 f3       	brlt	.-40     	; 0x73c <loadMaterials+0x32>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	11 c0       	rjmp	.+34     	; 0x78c <loadMaterials+0x82>
		materials[copper][i] = COPPER_PHASE; 
	}

	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[brass][i] = BRASS_PHASE;
     76a:	fc 01       	movw	r30, r24
     76c:	b8 96       	adiw	r30, 0x28	; 40
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e0 50       	subi	r30, 0x00	; 0
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	60 e2       	ldi	r22, 0x20	; 32
     780:	71 e4       	ldi	r23, 0x41	; 65
     782:	40 83       	st	Z, r20
     784:	51 83       	std	Z+1, r21	; 0x01
     786:	62 83       	std	Z+2, r22	; 0x02
     788:	73 83       	std	Z+3, r23	; 0x03
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[copper][i] = COPPER_PHASE; 
	}

	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	84 31       	cpi	r24, 0x14	; 20
     78e:	91 05       	cpc	r25, r1
     790:	64 f3       	brlt	.-40     	; 0x76a <loadMaterials+0x60>
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	11 c0       	rjmp	.+34     	; 0x7ba <loadMaterials+0xb0>
		materials[brass][i] = BRASS_PHASE;
	}
	//Aluminum
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[aluminum][i] = ALUMINUM_PHASE;
     798:	fc 01       	movw	r30, r24
     79a:	fc 96       	adiw	r30, 0x3c	; 60
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e0 50       	subi	r30, 0x00	; 0
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	64 e7       	ldi	r22, 0x74	; 116
     7ae:	72 ec       	ldi	r23, 0xC2	; 194
     7b0:	40 83       	st	Z, r20
     7b2:	51 83       	std	Z+1, r21	; 0x01
     7b4:	62 83       	std	Z+2, r22	; 0x02
     7b6:	73 83       	std	Z+3, r23	; 0x03
	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[brass][i] = BRASS_PHASE;
	}
	//Aluminum
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	84 31       	cpi	r24, 0x14	; 20
     7bc:	91 05       	cpc	r25, r1
     7be:	64 f3       	brlt	.-40     	; 0x798 <loadMaterials+0x8e>
		materials[aluminum][i] = ALUMINUM_PHASE;
	}
}
     7c0:	08 95       	ret

000007c2 <checkPhaseStability>:


//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
     7c2:	8f 92       	push	r8
     7c4:	9f 92       	push	r9
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	d0 e0       	ldi	r29, 0x00	; 0
     7da:	31 c0       	rjmp	.+98     	; 0x83e <checkPhaseStability+0x7c>
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
     7dc:	fe 01       	movw	r30, r28
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	e2 5a       	subi	r30, 0xA2	; 162
     7e8:	fb 4f       	sbci	r31, 0xFB	; 251
     7ea:	c0 80       	ld	r12, Z
     7ec:	d1 80       	ldd	r13, Z+1	; 0x01
     7ee:	e2 80       	ldd	r14, Z+2	; 0x02
     7f0:	f3 80       	ldd	r15, Z+3	; 0x03
     7f2:	80 90 8a 04 	lds	r8, 0x048A	; 0x80048a <angle>
     7f6:	90 90 8b 04 	lds	r9, 0x048B	; 0x80048b <angle+0x1>
     7fa:	a0 90 8c 04 	lds	r10, 0x048C	; 0x80048c <angle+0x2>
     7fe:	b0 90 8d 04 	lds	r11, 0x048D	; 0x80048d <angle+0x3>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 ea       	ldi	r20, 0xA0	; 160
     808:	50 e4       	ldi	r21, 0x40	; 64
     80a:	c5 01       	movw	r24, r10
     80c:	b4 01       	movw	r22, r8
     80e:	59 d6       	rcall	.+3250   	; 0x14c2 <__addsf3>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	c7 01       	movw	r24, r14
     816:	b6 01       	movw	r22, r12
     818:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__gesf2>
     81c:	18 16       	cp	r1, r24
     81e:	a4 f0       	brlt	.+40     	; 0x848 <checkPhaseStability+0x86>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 ea       	ldi	r20, 0xA0	; 160
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	c5 01       	movw	r24, r10
     82a:	b4 01       	movw	r22, r8
     82c:	49 d6       	rcall	.+3218   	; 0x14c0 <__subsf3>
     82e:	9b 01       	movw	r18, r22
     830:	ac 01       	movw	r20, r24
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	0b d7       	rcall	.+3606   	; 0x164e <__cmpsf2>
     838:	88 23       	and	r24, r24
     83a:	44 f0       	brlt	.+16     	; 0x84c <checkPhaseStability+0x8a>


//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	ca 30       	cpi	r28, 0x0A	; 10
     840:	d1 05       	cpc	r29, r1
     842:	64 f2       	brlt	.-104    	; 0x7dc <checkPhaseStability+0x1a>
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
	}
	return true;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	03 c0       	rjmp	.+6      	; 0x84e <checkPhaseStability+0x8c>

//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	01 c0       	rjmp	.+2      	; 0x84e <checkPhaseStability+0x8c>
     84c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	9f 90       	pop	r9
     860:	8f 90       	pop	r8
     862:	08 95       	ret

00000864 <detectMaterial>:
// Main functionality
// ================================================

//Detect material from signal phase
//Returns material ID if phase is matched. 0xFF otherwise
char detectMaterial(){
     864:	4f 92       	push	r4
     866:	5f 92       	push	r5
     868:	6f 92       	push	r6
     86a:	7f 92       	push	r7
     86c:	8f 92       	push	r8
     86e:	9f 92       	push	r9
     870:	af 92       	push	r10
     872:	bf 92       	push	r11
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
	
	//Check if signal amplitude is above threshold
	if(modulus>AMP_THRESHOLD){
     882:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     886:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     88a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     88e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e4       	ldi	r21, 0x40	; 64
     89a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__gesf2>
     89e:	18 16       	cp	r1, r24
     8a0:	0c f0       	brlt	.+2      	; 0x8a4 <detectMaterial+0x40>
     8a2:	59 c0       	rjmp	.+178    	; 0x956 <detectMaterial+0xf2>
		//Check stability of phase
		if(checkPhaseStability()){
     8a4:	8e df       	rcall	.-228    	; 0x7c2 <checkPhaseStability>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <detectMaterial+0x48>
     8aa:	57 c0       	rjmp	.+174    	; 0x95a <detectMaterial+0xf6>
			
			//Enable status LED
			SETBIT(PORTB,5);
     8ac:	85 b1       	in	r24, 0x05	; 5
     8ae:	80 62       	ori	r24, 0x20	; 32
     8b0:	85 b9       	out	0x05, r24	; 5
			
			//Detect material from phase
			char result[2] = {0,undefined};
     8b2:	e1 2c       	mov	r14, r1
     8b4:	68 94       	set
     8b6:	dd 24       	eor	r13, r13
     8b8:	d2 f8       	bld	r13, 2
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
     8ba:	00 e0       	ldi	r16, 0x00	; 0
     8bc:	10 e0       	ldi	r17, 0x00	; 0
     8be:	46 c0       	rjmp	.+140    	; 0x94c <detectMaterial+0xe8>
				hits = 0;
				for(int j = 0; j<NUM_MATERIAL_SAMPLES; j++){
					if(materials[i][j] < (angle+MATERIAL_DEVIATION) && materials[i][j] > (angle-MATERIAL_DEVIATION)){
     8c0:	84 e1       	ldi	r24, 0x14	; 20
     8c2:	80 9f       	mul	r24, r16
     8c4:	f0 01       	movw	r30, r0
     8c6:	81 9f       	mul	r24, r17
     8c8:	f0 0d       	add	r31, r0
     8ca:	11 24       	eor	r1, r1
     8cc:	ec 0f       	add	r30, r28
     8ce:	fd 1f       	adc	r31, r29
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	e0 50       	subi	r30, 0x00	; 0
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	80 80       	ld	r8, Z
     8de:	91 80       	ldd	r9, Z+1	; 0x01
     8e0:	a2 80       	ldd	r10, Z+2	; 0x02
     8e2:	b3 80       	ldd	r11, Z+3	; 0x03
     8e4:	40 90 8a 04 	lds	r4, 0x048A	; 0x80048a <angle>
     8e8:	50 90 8b 04 	lds	r5, 0x048B	; 0x80048b <angle+0x1>
     8ec:	60 90 8c 04 	lds	r6, 0x048C	; 0x80048c <angle+0x2>
     8f0:	70 90 8d 04 	lds	r7, 0x048D	; 0x80048d <angle+0x3>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e4       	ldi	r21, 0x40	; 64
     8fc:	c3 01       	movw	r24, r6
     8fe:	b2 01       	movw	r22, r4
     900:	e0 d5       	rcall	.+3008   	; 0x14c2 <__addsf3>
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	c5 01       	movw	r24, r10
     908:	b4 01       	movw	r22, r8
     90a:	a1 d6       	rcall	.+3394   	; 0x164e <__cmpsf2>
     90c:	88 23       	and	r24, r24
     90e:	7c f4       	brge	.+30     	; 0x92e <detectMaterial+0xca>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e4       	ldi	r21, 0x40	; 64
     918:	c3 01       	movw	r24, r6
     91a:	b2 01       	movw	r22, r4
     91c:	d1 d5       	rcall	.+2978   	; 0x14c0 <__subsf3>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	c5 01       	movw	r24, r10
     924:	b4 01       	movw	r22, r8
     926:	d4 d7       	rcall	.+4008   	; 0x18d0 <__gesf2>
     928:	18 16       	cp	r1, r24
     92a:	0c f4       	brge	.+2      	; 0x92e <detectMaterial+0xca>
						hits ++; 
     92c:	f3 94       	inc	r15
					}
					if(hits>result[0]){
     92e:	ef 14       	cp	r14, r15
     930:	10 f4       	brcc	.+4      	; 0x936 <detectMaterial+0xd2>
						 result[0]=hits;
     932:	ef 2c       	mov	r14, r15
						 result[1]=i;	//Save material with most hits
     934:	d0 2e       	mov	r13, r16
			//Detect material from phase
			char result[2] = {0,undefined};
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
				hits = 0;
				for(int j = 0; j<NUM_MATERIAL_SAMPLES; j++){
     936:	21 96       	adiw	r28, 0x01	; 1
     938:	03 c0       	rjmp	.+6      	; 0x940 <detectMaterial+0xdc>
     93a:	c0 e0       	ldi	r28, 0x00	; 0
     93c:	d0 e0       	ldi	r29, 0x00	; 0
     93e:	f1 2c       	mov	r15, r1
     940:	c4 31       	cpi	r28, 0x14	; 20
     942:	d1 05       	cpc	r29, r1
     944:	0c f4       	brge	.+2      	; 0x948 <detectMaterial+0xe4>
     946:	bc cf       	rjmp	.-136    	; 0x8c0 <detectMaterial+0x5c>
			SETBIT(PORTB,5);
			
			//Detect material from phase
			char result[2] = {0,undefined};
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
     948:	0f 5f       	subi	r16, 0xFF	; 255
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	04 30       	cpi	r16, 0x04	; 4
     94e:	11 05       	cpc	r17, r1
     950:	a4 f3       	brlt	.-24     	; 0x93a <detectMaterial+0xd6>
						 result[1]=i;	//Save material with most hits
					}
				}
			}
			//Return material with most matched phase "hits"
			return result[1];
     952:	8d 2d       	mov	r24, r13
     954:	03 c0       	rjmp	.+6      	; 0x95c <detectMaterial+0xf8>
		}
	}
	return undefined;
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	01 c0       	rjmp	.+2      	; 0x95c <detectMaterial+0xf8>
     95a:	84 e0       	ldi	r24, 0x04	; 4
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	9f 90       	pop	r9
     970:	8f 90       	pop	r8
     972:	7f 90       	pop	r7
     974:	6f 90       	pop	r6
     976:	5f 90       	pop	r5
     978:	4f 90       	pop	r4
     97a:	08 95       	ret

0000097c <defaultDisplay>:
 void(* resetFunc) (void) = 0;


//Print default text on display
void defaultDisplay(){
	clear_display();
     97c:	0c d5       	rcall	.+2584   	; 0x1396 <clear_display>
	sendStrXY("Mode:",1,0);
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	83 e9       	ldi	r24, 0x93	; 147
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	19 d5       	rcall	.+2610   	; 0x13be <sendStrXY>
	sendStrXY("AMP",2,0);
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	62 e0       	ldi	r22, 0x02	; 2
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	89 e9       	ldi	r24, 0x99	; 153
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	12 d5       	rcall	.+2596   	; 0x13be <sendStrXY>
	sendStrXY("Angle:",3,0);
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	63 e0       	ldi	r22, 0x03	; 3
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	8d e9       	ldi	r24, 0x9D	; 157
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	0b d5       	rcall	.+2582   	; 0x13be <sendStrXY>
	sendStrXY("Material:",5,0);
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	65 e0       	ldi	r22, 0x05	; 5
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	84 ea       	ldi	r24, 0xA4	; 164
     9b2:	93 e0       	ldi	r25, 0x03	; 3
     9b4:	04 c5       	rjmp	.+2568   	; 0x13be <sendStrXY>
     9b6:	08 95       	ret

000009b8 <setup>:
// ================================================

 void setup(){
	 
	 //Setup ADC PORT
	 SETBIT(DDRB,6);
     9b8:	84 b1       	in	r24, 0x04	; 4
     9ba:	80 64       	ori	r24, 0x40	; 64
     9bc:	84 b9       	out	0x04, r24	; 4
	 CLRBIT(PORTB,6);
     9be:	85 b1       	in	r24, 0x05	; 5
     9c0:	8f 7b       	andi	r24, 0xBF	; 191
     9c2:	85 b9       	out	0x05, r24	; 5
	 
	 //Setup LED PORT
	 SETBIT(DDRB,5);
     9c4:	84 b1       	in	r24, 0x04	; 4
     9c6:	80 62       	ori	r24, 0x20	; 32
     9c8:	84 b9       	out	0x04, r24	; 4
	 CLRBIT(PORTB,5);
     9ca:	85 b1       	in	r24, 0x05	; 5
     9cc:	8f 7d       	andi	r24, 0xDF	; 223
     9ce:	85 b9       	out	0x05, r24	; 5
	 
	 //Setup PINS for buttons
	 CLRBIT(DDRE,5); //PE5 int5 pin3 (RESET)
     9d0:	8d b1       	in	r24, 0x0d	; 13
     9d2:	8f 7d       	andi	r24, 0xDF	; 223
     9d4:	8d b9       	out	0x0d, r24	; 13
	 CLRBIT(DDRD,2); //PD2 int2 pin19 (SET)
     9d6:	8a b1       	in	r24, 0x0a	; 10
     9d8:	8b 7f       	andi	r24, 0xFB	; 251
     9da:	8a b9       	out	0x0a, r24	; 10
	 CLRBIT(DDRD,3); //PD3 int3 pin18 (CALIBRATE)
     9dc:	8a b1       	in	r24, 0x0a	; 10
     9de:	87 7f       	andi	r24, 0xF7	; 247
     9e0:	8a b9       	out	0x0a, r24	; 10
	 //Internal Pull-up on inputs
	 SETBIT(PORTE,5); 
     9e2:	8e b1       	in	r24, 0x0e	; 14
     9e4:	80 62       	ori	r24, 0x20	; 32
     9e6:	8e b9       	out	0x0e, r24	; 14
	 SETBIT(PORTD,2);
     9e8:	8b b1       	in	r24, 0x0b	; 11
     9ea:	84 60       	ori	r24, 0x04	; 4
     9ec:	8b b9       	out	0x0b, r24	; 11
	 SETBIT(PORTD,3);
     9ee:	8b b1       	in	r24, 0x0b	; 11
     9f0:	88 60       	ori	r24, 0x08	; 8
     9f2:	8b b9       	out	0x0b, r24	; 11
	 
	 //Configure falling edge detection on pins:
	 EICRA |= (1<<ISC31) | (1<<ISC21);
     9f4:	e9 e6       	ldi	r30, 0x69	; 105
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	80 6a       	ori	r24, 0xA0	; 160
     9fc:	80 83       	st	Z, r24
	 EICRB |= (1<<ISC51) ;	
     9fe:	ea e6       	ldi	r30, 0x6A	; 106
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	88 60       	ori	r24, 0x08	; 8
     a06:	80 83       	st	Z, r24
	 
	 //Enable interrupts with EIMSK:
	 EIMSK |= (1<<INT5) | (1<<INT2) | (1<<INT3);
     a08:	8d b3       	in	r24, 0x1d	; 29
     a0a:	8c 62       	ori	r24, 0x2C	; 44
     a0c:	8d bb       	out	0x1d, r24	; 29
	 
	 //Enable global interrupt
	 sei();
     a0e:	78 94       	sei
	 
	 //OLED-display
	 _i2c_address = 0X78;
     a10:	88 e7       	ldi	r24, 0x78	; 120
     a12:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <_i2c_address>
	 I2C_Init();
     a16:	bb dd       	rcall	.-1162   	; 0x58e <I2C_Init>
	 InitializeDisplay();
     a18:	6c d4       	rcall	.+2264   	; 0x12f2 <InitializeDisplay>
	 print_fonts();
     a1a:	ff d4       	rcall	.+2558   	; 0x141a <print_fonts>
	defaultDisplay();
     a1c:	af df       	rcall	.-162    	; 0x97c <defaultDisplay>
	
	 //init_timer0();
	 init_timer0();
     a1e:	3e d5       	rcall	.+2684   	; 0x149c <init_timer0>
     a20:	16 de       	rcall	.-980    	; 0x64e <init_trigonometry>
	 
	 //Fill Trigonometric array
	 init_trigonometry();
     a22:	73 ce       	rjmp	.-794    	; 0x70a <loadMaterials>
     a24:	08 95       	ret

00000a26 <calibrateDisplay>:
	 
	 loadMaterials();
     a26:	b7 d4       	rcall	.+2414   	; 0x1396 <clear_display>
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
	sendStrXY("Material:",5,0);
}

void calibrateDisplay(){
	clear_display();
	sendStrXY("Select material",1,0);
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	8e ea       	ldi	r24, 0xAE	; 174
     a32:	93 e0       	ldi	r25, 0x03	; 3
     a34:	c4 d4       	rcall	.+2440   	; 0x13be <sendStrXY>
	sendStrXY("Material:",5,0);
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	65 e0       	ldi	r22, 0x05	; 5
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	84 ea       	ldi	r24, 0xA4	; 164
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	bd c4       	rjmp	.+2426   	; 0x13be <sendStrXY>
     a44:	08 95       	ret

00000a46 <printMaterial>:
}

//Prints material to display
//INPUT: material ID
void printMaterial(char materialID){
	switch(materialID){
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	d9 f0       	breq	.+54     	; 0xa80 <printMaterial+0x3a>
     a4a:	28 f4       	brcc	.+10     	; 0xa56 <printMaterial+0x10>
     a4c:	88 23       	and	r24, r24
     a4e:	41 f0       	breq	.+16     	; 0xa60 <printMaterial+0x1a>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	71 f0       	breq	.+28     	; 0xa70 <printMaterial+0x2a>
     a54:	08 95       	ret
     a56:	83 30       	cpi	r24, 0x03	; 3
     a58:	d9 f0       	breq	.+54     	; 0xa90 <printMaterial+0x4a>
     a5a:	84 30       	cpi	r24, 0x04	; 4
     a5c:	09 f1       	breq	.+66     	; 0xaa0 <printMaterial+0x5a>
     a5e:	08 95       	ret
		case iron:
			sendStrXY("IRO",5,10);
     a60:	4a e0       	ldi	r20, 0x0A	; 10
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	65 e0       	ldi	r22, 0x05	; 5
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	8e eb       	ldi	r24, 0xBE	; 190
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	a8 c4       	rjmp	.+2384   	; 0x13be <sendStrXY>
			break;
     a6e:	08 95       	ret
		case copper:
			sendStrXY("COP",5,10);
     a70:	4a e0       	ldi	r20, 0x0A	; 10
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	65 e0       	ldi	r22, 0x05	; 5
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	82 ec       	ldi	r24, 0xC2	; 194
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	a0 c4       	rjmp	.+2368   	; 0x13be <sendStrXY>
			break;
     a7e:	08 95       	ret
		case brass:
			sendStrXY("BRA",5,10);
     a80:	4a e0       	ldi	r20, 0x0A	; 10
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	65 e0       	ldi	r22, 0x05	; 5
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	86 ec       	ldi	r24, 0xC6	; 198
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	98 c4       	rjmp	.+2352   	; 0x13be <sendStrXY>
			break;
     a8e:	08 95       	ret
		case aluminum:
			sendStrXY("ALU",5,10);
     a90:	4a e0       	ldi	r20, 0x0A	; 10
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	8a ec       	ldi	r24, 0xCA	; 202
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	90 c4       	rjmp	.+2336   	; 0x13be <sendStrXY>
			break;
     a9e:	08 95       	ret
		case undefined:
			sendStrXY("UND",5,10);
     aa0:	4a e0       	ldi	r20, 0x0A	; 10
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	65 e0       	ldi	r22, 0x05	; 5
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	8e ec       	ldi	r24, 0xCE	; 206
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	88 c4       	rjmp	.+2320   	; 0x13be <sendStrXY>
     aae:	08 95       	ret

00000ab0 <debug_print_float>:
			break;
	}
}


void debug_print_float(float input,char x, char y){
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	c4 56       	subi	r28, 0x64	; 100
     ac6:	d1 09       	sbc	r29, r1
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	d4 2e       	mov	r13, r20
     ad4:	c2 2e       	mov	r12, r18
	char temp[100] = {0};
     ad6:	9e 01       	movw	r18, r28
     ad8:	2f 5f       	subi	r18, 0xFF	; 255
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	79 01       	movw	r14, r18
     ade:	24 e6       	ldi	r18, 0x64	; 100
     ae0:	f7 01       	movw	r30, r14
     ae2:	11 92       	st	Z+, r1
     ae4:	2a 95       	dec	r18
     ae6:	e9 f7       	brne	.-6      	; 0xae2 <debug_print_float+0x32>
	dtostrf(input,5,2,temp);
     ae8:	87 01       	movw	r16, r14
     aea:	22 e0       	ldi	r18, 0x02	; 2
     aec:	45 e0       	ldi	r20, 0x05	; 5
     aee:	ba d7       	rcall	.+3956   	; 0x1a64 <dtostrf>
	//sprintf(temp,"%d",input);
	sendStrXY(temp, x,y);
     af0:	4c 2d       	mov	r20, r12
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	6d 2d       	mov	r22, r13
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	c7 01       	movw	r24, r14
     afa:	61 d4       	rcall	.+2242   	; 0x13be <sendStrXY>
}
     afc:	cc 59       	subi	r28, 0x9C	; 156
     afe:	df 4f       	sbci	r29, 0xFF	; 255
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	08 95       	ret

00000b1c <computeDFT>:
 }


//Compute DFT for latest sample
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
     b1c:	4f 92       	push	r4
     b1e:	5f 92       	push	r5
     b20:	6f 92       	push	r6
     b22:	7f 92       	push	r7
     b24:	8f 92       	push	r8
     b26:	9f 92       	push	r9
     b28:	af 92       	push	r10
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
	 if(DFT_ready == 1){
     b3a:	10 91 8e 04 	lds	r17, 0x048E	; 0x80048e <DFT_ready>
     b3e:	11 30       	cpi	r17, 0x01	; 1
     b40:	09 f4       	brne	.+2      	; 0xb44 <computeDFT+0x28>
     b42:	9e c0       	rjmp	.+316    	; 0xc80 <computeDFT+0x164>
		 Re = 0;
		 Im = 0;
		 DFT_ready = 0;
		 return 1; 
	 }
	 return 0;
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	c7 c1       	rjmp	.+910    	; 0xed6 <computeDFT+0x3ba>
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
	 if(DFT_ready == 1){
		 
		 for(int i = 0; i<NUM_SAMPLES; i++){
			 Re += ReTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
     b48:	fe 01       	movw	r30, r28
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	e8 5e       	subi	r30, 0xE8	; 232
     b50:	fa 4f       	sbci	r31, 0xFA	; 250
     b52:	40 81       	ld	r20, Z
     b54:	51 81       	ldd	r21, Z+1	; 0x01
     b56:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <active_write>
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	22 23       	and	r18, r18
     b60:	11 f0       	breq	.+4      	; 0xb66 <computeDFT+0x4a>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	00 24       	eor	r0, r0
     b6a:	f6 95       	lsr	r31
     b6c:	e7 95       	ror	r30
     b6e:	07 94       	ror	r0
     b70:	f6 95       	lsr	r31
     b72:	e7 95       	ror	r30
     b74:	07 94       	ror	r0
     b76:	fe 2f       	mov	r31, r30
     b78:	e0 2d       	mov	r30, r0
     b7a:	e3 52       	subi	r30, 0x23	; 35
     b7c:	fc 4f       	sbci	r31, 0xFC	; 252
     b7e:	ec 0f       	add	r30, r28
     b80:	fd 1f       	adc	r31, r29
     b82:	80 81       	ld	r24, Z
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	9c 01       	movw	r18, r24
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	22 0f       	add	r18, r18
     b8e:	33 1f       	adc	r19, r19
     b90:	82 0f       	add	r24, r18
     b92:	93 1f       	adc	r25, r19
     b94:	48 9f       	mul	r20, r24
     b96:	90 01       	movw	r18, r0
     b98:	49 9f       	mul	r20, r25
     b9a:	30 0d       	add	r19, r0
     b9c:	58 9f       	mul	r21, r24
     b9e:	30 0d       	add	r19, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	33 23       	and	r19, r19
     ba4:	14 f4       	brge	.+4      	; 0xbaa <computeDFT+0x8e>
     ba6:	21 50       	subi	r18, 0x01	; 1
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	63 2f       	mov	r22, r19
     bac:	73 2f       	mov	r23, r19
     bae:	77 0f       	add	r23, r23
     bb0:	77 0b       	sbc	r23, r23
     bb2:	07 2e       	mov	r0, r23
     bb4:	00 0c       	add	r0, r0
     bb6:	88 0b       	sbc	r24, r24
     bb8:	99 0b       	sbc	r25, r25
     bba:	b5 d5       	rcall	.+2922   	; 0x1726 <__floatsisf>
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
     bc0:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     bc4:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     bc8:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     bcc:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     bd0:	78 d4       	rcall	.+2288   	; 0x14c2 <__addsf3>
     bd2:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <Re>
     bd6:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <Re+0x1>
     bda:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <Re+0x2>
     bde:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <Re+0x3>
			 Im += ImTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
     be2:	fe 01       	movw	r30, r28
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	e8 56       	subi	r30, 0x68	; 104
     bea:	fb 4f       	sbci	r31, 0xFB	; 251
     bec:	40 81       	ld	r20, Z
     bee:	51 81       	ldd	r21, Z+1	; 0x01
     bf0:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <active_write>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	22 23       	and	r18, r18
     bfa:	11 f0       	breq	.+4      	; 0xc00 <computeDFT+0xe4>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	fc 01       	movw	r30, r24
     c02:	00 24       	eor	r0, r0
     c04:	f6 95       	lsr	r31
     c06:	e7 95       	ror	r30
     c08:	07 94       	ror	r0
     c0a:	f6 95       	lsr	r31
     c0c:	e7 95       	ror	r30
     c0e:	07 94       	ror	r0
     c10:	fe 2f       	mov	r31, r30
     c12:	e0 2d       	mov	r30, r0
     c14:	e3 52       	subi	r30, 0x23	; 35
     c16:	fc 4f       	sbci	r31, 0xFC	; 252
     c18:	ec 0f       	add	r30, r28
     c1a:	fd 1f       	adc	r31, r29
     c1c:	80 81       	ld	r24, Z
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9c 01       	movw	r18, r24
     c22:	22 0f       	add	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	48 9f       	mul	r20, r24
     c30:	90 01       	movw	r18, r0
     c32:	49 9f       	mul	r20, r25
     c34:	30 0d       	add	r19, r0
     c36:	58 9f       	mul	r21, r24
     c38:	30 0d       	add	r19, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	33 23       	and	r19, r19
     c3e:	14 f4       	brge	.+4      	; 0xc44 <computeDFT+0x128>
     c40:	21 50       	subi	r18, 0x01	; 1
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	63 2f       	mov	r22, r19
     c46:	73 2f       	mov	r23, r19
     c48:	77 0f       	add	r23, r23
     c4a:	77 0b       	sbc	r23, r23
     c4c:	07 2e       	mov	r0, r23
     c4e:	00 0c       	add	r0, r0
     c50:	88 0b       	sbc	r24, r24
     c52:	99 0b       	sbc	r25, r25
     c54:	68 d5       	rcall	.+2768   	; 0x1726 <__floatsisf>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <Im>
     c5e:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <Im+0x1>
     c62:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <Im+0x2>
     c66:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <Im+0x3>
     c6a:	2b d4       	rcall	.+2134   	; 0x14c2 <__addsf3>
     c6c:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <Im>
     c70:	70 93 91 04 	sts	0x0491, r23	; 0x800491 <Im+0x1>
     c74:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <Im+0x2>
     c78:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <Im+0x3>
//Compute DFT for latest sample
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
	 if(DFT_ready == 1){
		 
		 for(int i = 0; i<NUM_SAMPLES; i++){
     c7c:	21 96       	adiw	r28, 0x01	; 1
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <computeDFT+0x168>
     c80:	c0 e0       	ldi	r28, 0x00	; 0
     c82:	d0 e0       	ldi	r29, 0x00	; 0
     c84:	c0 34       	cpi	r28, 0x40	; 64
     c86:	d1 05       	cpc	r29, r1
     c88:	0c f4       	brge	.+2      	; 0xc8c <computeDFT+0x170>
     c8a:	5e cf       	rjmp	.-324    	; 0xb48 <computeDFT+0x2c>
			 Re += ReTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
			 Im += ImTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
		 }
		 Im = -Im;
     c8c:	c0 90 90 04 	lds	r12, 0x0490	; 0x800490 <Im>
     c90:	d0 90 91 04 	lds	r13, 0x0491	; 0x800491 <Im+0x1>
     c94:	e0 90 92 04 	lds	r14, 0x0492	; 0x800492 <Im+0x2>
     c98:	f0 90 93 04 	lds	r15, 0x0493	; 0x800493 <Im+0x3>
     c9c:	f7 fa       	bst	r15, 7
     c9e:	f0 94       	com	r15
     ca0:	f7 f8       	bld	r15, 7
     ca2:	f0 94       	com	r15
     ca4:	c0 92 90 04 	sts	0x0490, r12	; 0x800490 <Im>
     ca8:	d0 92 91 04 	sts	0x0491, r13	; 0x800491 <Im+0x1>
     cac:	e0 92 92 04 	sts	0x0492, r14	; 0x800492 <Im+0x2>
     cb0:	f0 92 93 04 	sts	0x0493, r15	; 0x800493 <Im+0x3>

		 modulus =(0.6*modulus)+(0.4*sqrtf((Im*Im) + (Re*Re))/16);
     cb4:	2a e9       	ldi	r18, 0x9A	; 154
     cb6:	39 e9       	ldi	r19, 0x99	; 153
     cb8:	49 e1       	ldi	r20, 0x19	; 25
     cba:	5f e3       	ldi	r21, 0x3F	; 63
     cbc:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     cc0:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     cc4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     cc8:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     ccc:	0c d6       	rcall	.+3096   	; 0x18e6 <__mulsf3>
     cce:	4b 01       	movw	r8, r22
     cd0:	5c 01       	movw	r10, r24
     cd2:	a7 01       	movw	r20, r14
     cd4:	96 01       	movw	r18, r12
     cd6:	c7 01       	movw	r24, r14
     cd8:	b6 01       	movw	r22, r12
     cda:	05 d6       	rcall	.+3082   	; 0x18e6 <__mulsf3>
     cdc:	6b 01       	movw	r12, r22
     cde:	7c 01       	movw	r14, r24
     ce0:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     ce4:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     ce8:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     cec:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	f8 d5       	rcall	.+3056   	; 0x18e6 <__mulsf3>
     cf6:	2b 01       	movw	r4, r22
     cf8:	3c 01       	movw	r6, r24
     cfa:	a3 01       	movw	r20, r6
     cfc:	92 01       	movw	r18, r4
     cfe:	c7 01       	movw	r24, r14
     d00:	b6 01       	movw	r22, r12
     d02:	df d3       	rcall	.+1982   	; 0x14c2 <__addsf3>
     d04:	57 d6       	rcall	.+3246   	; 0x19b4 <sqrt>
     d06:	2d ec       	ldi	r18, 0xCD	; 205
     d08:	3c ec       	ldi	r19, 0xCC	; 204
     d0a:	4c ec       	ldi	r20, 0xCC	; 204
     d0c:	5e e3       	ldi	r21, 0x3E	; 62
     d0e:	eb d5       	rcall	.+3030   	; 0x18e6 <__mulsf3>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	5d e3       	ldi	r21, 0x3D	; 61
     d18:	e6 d5       	rcall	.+3020   	; 0x18e6 <__mulsf3>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	c5 01       	movw	r24, r10
     d20:	b4 01       	movw	r22, r8
     d22:	cf d3       	rcall	.+1950   	; 0x14c2 <__addsf3>
     d24:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <modulus>
     d28:	70 93 87 04 	sts	0x0487, r23	; 0x800487 <modulus+0x1>
     d2c:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <modulus+0x2>
     d30:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <modulus+0x3>
		 debug_print_float(modulus,2,7);
     d34:	27 e0       	ldi	r18, 0x07	; 7
     d36:	42 e0       	ldi	r20, 0x02	; 2

		 modulus = (0.6*modulus)+(0.4*sqrtf((Im*Im) + (Re*Re))/16);
     d38:	bb de       	rcall	.-650    	; 0xab0 <debug_print_float>
     d3a:	2a e9       	ldi	r18, 0x9A	; 154
     d3c:	39 e9       	ldi	r19, 0x99	; 153
     d3e:	49 e1       	ldi	r20, 0x19	; 25
     d40:	5f e3       	ldi	r21, 0x3F	; 63
     d42:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     d46:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     d4a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     d4e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     d52:	c9 d5       	rcall	.+2962   	; 0x18e6 <__mulsf3>
     d54:	2b 01       	movw	r4, r22
     d56:	3c 01       	movw	r6, r24
     d58:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <Im>
     d5c:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <Im+0x1>
     d60:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <Im+0x2>
     d64:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <Im+0x3>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	bc d5       	rcall	.+2936   	; 0x18e6 <__mulsf3>
     d6e:	6b 01       	movw	r12, r22
     d70:	7c 01       	movw	r14, r24
     d72:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     d76:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     d7a:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     d7e:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     d82:	9b 01       	movw	r18, r22
     d84:	ac 01       	movw	r20, r24
     d86:	af d5       	rcall	.+2910   	; 0x18e6 <__mulsf3>
     d88:	4b 01       	movw	r8, r22
     d8a:	5c 01       	movw	r10, r24
     d8c:	a5 01       	movw	r20, r10
     d8e:	94 01       	movw	r18, r8
     d90:	c7 01       	movw	r24, r14
     d92:	b6 01       	movw	r22, r12
     d94:	96 d3       	rcall	.+1836   	; 0x14c2 <__addsf3>
     d96:	0e d6       	rcall	.+3100   	; 0x19b4 <sqrt>
     d98:	2d ec       	ldi	r18, 0xCD	; 205
     d9a:	3c ec       	ldi	r19, 0xCC	; 204
     d9c:	4c ec       	ldi	r20, 0xCC	; 204
     d9e:	5e e3       	ldi	r21, 0x3E	; 62
     da0:	a2 d5       	rcall	.+2884   	; 0x18e6 <__mulsf3>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e8       	ldi	r20, 0x80	; 128
     da8:	5d e3       	ldi	r21, 0x3D	; 61
     daa:	9d d5       	rcall	.+2874   	; 0x18e6 <__mulsf3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	c3 01       	movw	r24, r6
     db2:	b2 01       	movw	r22, r4
     db4:	86 d3       	rcall	.+1804   	; 0x14c2 <__addsf3>
     db6:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <modulus>
     dba:	70 93 87 04 	sts	0x0487, r23	; 0x800487 <modulus+0x1>
     dbe:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <modulus+0x2>
     dc2:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <modulus+0x3>
		 debug_print_float(modulus,2,7);
     dc6:	27 e0       	ldi	r18, 0x07	; 7
     dc8:	42 e0       	ldi	r20, 0x02	; 2
     dca:	72 de       	rcall	.-796    	; 0xab0 <debug_print_float>

		
		 if(Im == 0 && Re == 0){
     dcc:	c0 90 90 04 	lds	r12, 0x0490	; 0x800490 <Im>
     dd0:	d0 90 91 04 	lds	r13, 0x0491	; 0x800491 <Im+0x1>
     dd4:	e0 90 92 04 	lds	r14, 0x0492	; 0x800492 <Im+0x2>
     dd8:	f0 90 93 04 	lds	r15, 0x0493	; 0x800493 <Im+0x3>
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	a9 01       	movw	r20, r18
     de2:	c7 01       	movw	r24, r14
     de4:	b6 01       	movw	r22, r12
     de6:	33 d4       	rcall	.+2150   	; 0x164e <__cmpsf2>
     de8:	81 11       	cpse	r24, r1
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <computeDFT+0x2fe>
     dec:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     df0:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     df4:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     df8:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	25 d4       	rcall	.+2122   	; 0x164e <__cmpsf2>
     e04:	81 11       	cpse	r24, r1
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <computeDFT+0x2fe>
			 angle = 0;
     e08:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <angle>
     e0c:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <angle+0x1>
     e10:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <angle+0x2>
     e14:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <angle+0x3>
     e18:	2c c0       	rjmp	.+88     	; 0xe72 <computeDFT+0x356>
		 }
		 else{
		     angle = (0.6*angle)+((0.4*(180/M_PI)*atan2((double)Im, (double)Re)));
     e1a:	2a e9       	ldi	r18, 0x9A	; 154
     e1c:	39 e9       	ldi	r19, 0x99	; 153
     e1e:	49 e1       	ldi	r20, 0x19	; 25
     e20:	5f e3       	ldi	r21, 0x3F	; 63
     e22:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <angle>
     e26:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <angle+0x1>
     e2a:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <angle+0x2>
     e2e:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <angle+0x3>
     e32:	59 d5       	rcall	.+2738   	; 0x18e6 <__mulsf3>
     e34:	4b 01       	movw	r8, r22
     e36:	5c 01       	movw	r10, r24
     e38:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <Re>
     e3c:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <Re+0x1>
     e40:	40 91 96 04 	lds	r20, 0x0496	; 0x800496 <Re+0x2>
     e44:	50 91 97 04 	lds	r21, 0x0497	; 0x800497 <Re+0x3>
     e48:	c7 01       	movw	r24, r14
     e4a:	b6 01       	movw	r22, r12
     e4c:	ad d3       	rcall	.+1882   	; 0x15a8 <atan2>
     e4e:	23 eb       	ldi	r18, 0xB3	; 179
     e50:	38 e5       	ldi	r19, 0x58	; 88
     e52:	47 eb       	ldi	r20, 0xB7	; 183
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	47 d5       	rcall	.+2702   	; 0x18e6 <__mulsf3>
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	c5 01       	movw	r24, r10
     e5e:	b4 01       	movw	r22, r8
     e60:	30 d3       	rcall	.+1632   	; 0x14c2 <__addsf3>
     e62:	60 93 8a 04 	sts	0x048A, r22	; 0x80048a <angle>
     e66:	70 93 8b 04 	sts	0x048B, r23	; 0x80048b <angle+0x1>
     e6a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <angle+0x2>
     e6e:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <angle+0x3>
     e72:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <angleCnt>
		 }	
		 //Save to phase history  
		 angleThres[angleCnt] = angle;
     e76:	e2 2f       	mov	r30, r18
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <angle>
     e7e:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <angle+0x1>
     e82:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <angle+0x2>
     e86:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <angle+0x3>
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	e2 5a       	subi	r30, 0xA2	; 162
     e94:	fb 4f       	sbci	r31, 0xFB	; 251
     e96:	60 83       	st	Z, r22
     e98:	71 83       	std	Z+1, r23	; 0x01
     e9a:	82 83       	std	Z+2, r24	; 0x02
     e9c:	93 83       	std	Z+3, r25	; 0x03
		 angleCnt ++; 
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
     ea0:	20 93 5d 04 	sts	0x045D, r18	; 0x80045d <angleCnt>
		 if(angleCnt >= 10) angleCnt = 0; 
     ea4:	2a 30       	cpi	r18, 0x0A	; 10
     ea6:	10 f0       	brcs	.+4      	; 0xeac <computeDFT+0x390>
     ea8:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <angleCnt>
		 
		 debug_print_float(angle,3,7);
     eac:	27 e0       	ldi	r18, 0x07	; 7
     eae:	43 e0       	ldi	r20, 0x03	; 3
     eb0:	ff dd       	rcall	.-1026   	; 0xab0 <debug_print_float>
     eb2:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <Re>
		 Re = 0;
     eb6:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <Re+0x1>
     eba:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <Re+0x2>
     ebe:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <Re+0x3>
     ec2:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <Im>
		 Im = 0;
     ec6:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <Im+0x1>
     eca:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <Im+0x2>
     ece:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <Im+0x3>
     ed2:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <DFT_ready>
		 DFT_ready = 0;
     ed6:	81 2f       	mov	r24, r17
		 return 1; 
	 }
	 return 0;
 }
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	9f 90       	pop	r9
     eec:	8f 90       	pop	r8
     eee:	7f 90       	pop	r7
     ef0:	6f 90       	pop	r6
     ef2:	5f 90       	pop	r5
     ef4:	4f 90       	pop	r4
     ef6:	08 95       	ret

00000ef8 <calibratePhase>:
     ef8:	0f 93       	push	r16
}


//Calibrates phase detection by saving samples to memory. User specifies material in menu
//INPUT: material ID to sample
void calibratePhase(char materialID){	
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	08 2f       	mov	r16, r24
	char numAttempts = 0; 
	//Normal materials
	if(materialID < 4){
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	b8 f1       	brcs	.+110    	; 0xf74 <calibratePhase+0x7c>
     f06:	c0 e0       	ldi	r28, 0x00	; 0
     f08:	d0 e0       	ldi	r29, 0x00	; 0
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	5a c0       	rjmp	.+180    	; 0xfc2 <calibratePhase+0xca>
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
			if(computeDFT()){	
     f0e:	06 de       	rcall	.-1012   	; 0xb1c <computeDFT>
     f10:	88 23       	and	r24, r24
     f12:	99 f1       	breq	.+102    	; 0xf7a <calibratePhase+0x82>
				if(modulus>AMP_THRESHOLD){
     f14:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     f18:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     f1c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     f20:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e4       	ldi	r21, 0x40	; 64
     f2c:	d1 d4       	rcall	.+2466   	; 0x18d0 <__gesf2>
     f2e:	18 16       	cp	r1, r24
					//Check stability of phase
					if(checkPhaseStability()){
     f30:	ec f4       	brge	.+58     	; 0xf6c <calibratePhase+0x74>
     f32:	47 dc       	rcall	.-1906   	; 0x7c2 <checkPhaseStability>
     f34:	88 23       	and	r24, r24
     f36:	d1 f0       	breq	.+52     	; 0xf6c <calibratePhase+0x74>
						materials[materialID][i] = angle;
     f38:	fe 01       	movw	r30, r28
     f3a:	84 e1       	ldi	r24, 0x14	; 20
     f3c:	08 9f       	mul	r16, r24
     f3e:	e0 0d       	add	r30, r0
     f40:	f1 1d       	adc	r31, r1
     f42:	11 24       	eor	r1, r1
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	e0 50       	subi	r30, 0x00	; 0
     f4e:	fe 4f       	sbci	r31, 0xFE	; 254
     f50:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <angle>
     f54:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <angle+0x1>
     f58:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <angle+0x2>
     f5c:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <angle+0x3>
     f60:	80 83       	st	Z, r24
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	a2 83       	std	Z+2, r26	; 0x02
     f66:	b3 83       	std	Z+3, r27	; 0x03
						i++;
     f68:	21 96       	adiw	r28, 0x01	; 1
						continue;
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <calibratePhase+0x82>
					}
				}
				//Error handling
				numAttempts ++;
     f6c:	1f 5f       	subi	r17, 0xFF	; 255
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
     f6e:	15 31       	cpi	r17, 0x15	; 21
     f70:	20 f0       	brcs	.+8      	; 0xf7a <calibratePhase+0x82>
     f72:	2a c0       	rjmp	.+84     	; 0xfc8 <calibratePhase+0xd0>
     f74:	c0 e0       	ldi	r28, 0x00	; 0
     f76:	d0 e0       	ldi	r29, 0x00	; 0
     f78:	10 e0       	ldi	r17, 0x00	; 0
//INPUT: material ID to sample
void calibratePhase(char materialID){	
	char numAttempts = 0; 
	//Normal materials
	if(materialID < 4){
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
     f7a:	c4 31       	cpi	r28, 0x14	; 20
     f7c:	d1 05       	cpc	r29, r1
     f7e:	3c f2       	brlt	.-114    	; 0xf0e <calibratePhase+0x16>
		}
	}
	//Background noise (should be 0)
	else{
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
			if(computeDFT()){
     f80:	23 c0       	rjmp	.+70     	; 0xfc8 <calibratePhase+0xd0>
     f82:	cc dd       	rcall	.-1128   	; 0xb1c <computeDFT>
     f84:	88 23       	and	r24, r24
				//Check stability of phase
				if(checkPhaseStability()){
     f86:	e9 f0       	breq	.+58     	; 0xfc2 <calibratePhase+0xca>
     f88:	1c dc       	rcall	.-1992   	; 0x7c2 <checkPhaseStability>
     f8a:	88 23       	and	r24, r24
     f8c:	b9 f0       	breq	.+46     	; 0xfbc <calibratePhase+0xc4>
					materials[undefined][i] = angle;
     f8e:	fe 01       	movw	r30, r28
     f90:	e0 5b       	subi	r30, 0xB0	; 176
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	e0 50       	subi	r30, 0x00	; 0
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <angle>
     fa4:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <angle+0x1>
     fa8:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <angle+0x2>
     fac:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <angle+0x3>
     fb0:	80 83       	st	Z, r24
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	a2 83       	std	Z+2, r26	; 0x02
     fb6:	b3 83       	std	Z+3, r27	; 0x03
					i++;
     fb8:	21 96       	adiw	r28, 0x01	; 1
					continue;
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <calibratePhase+0xca>
				}
				//Error handling
				numAttempts ++;
     fbc:	1f 5f       	subi	r17, 0xFF	; 255
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
     fbe:	15 31       	cpi	r17, 0x15	; 21
     fc0:	18 f4       	brcc	.+6      	; 0xfc8 <calibratePhase+0xd0>
			}
		}
	}
	//Background noise (should be 0)
	else{
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
     fc2:	c4 31       	cpi	r28, 0x14	; 20
     fc4:	d1 05       	cpc	r29, r1
     fc6:	ec f2       	brlt	.-70     	; 0xf82 <calibratePhase+0x8a>
				numAttempts ++;
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
			}
		}
	}
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <main>:
	};



 int main(void){
	setup();
     fd2:	f2 dc       	rcall	.-1564   	; 0x9b8 <setup>
	
//Main loop	
	while(1){
		switch(tilstand){
     fd4:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <tilstand>
     fd8:	82 30       	cpi	r24, 0x02	; 2
     fda:	09 f4       	brne	.+2      	; 0xfde <main+0xc>
     fdc:	48 c0       	rjmp	.+144    	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
     fde:	30 f4       	brcc	.+12     	; 0xfec <main+0x1a>
     fe0:	88 23       	and	r24, r24
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <main+0x14>
     fe4:	87 c0       	rjmp	.+270    	; 0x10f4 <__EEPROM_REGION_LENGTH__+0xf4>
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	41 f0       	breq	.+16     	; 0xffa <main+0x28>
     fea:	f4 cf       	rjmp	.-24     	; 0xfd4 <main+0x2>
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	09 f4       	brne	.+2      	; 0xff2 <main+0x20>
     ff0:	45 c0       	rjmp	.+138    	; 0x107c <__EEPROM_REGION_LENGTH__+0x7c>
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	09 f4       	brne	.+2      	; 0xff8 <main+0x26>
     ff6:	46 c0       	rjmp	.+140    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     ff8:	ed cf       	rjmp	.-38     	; 0xfd4 <main+0x2>
			
			case run:
				sendStrXY("Running  ",1,7);
     ffa:	47 e0       	ldi	r20, 0x07	; 7
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	82 ed       	ldi	r24, 0xD2	; 210
    1004:	93 e0       	ldi	r25, 0x03	; 3
				
				computeDFT();
    1006:	db d1       	rcall	.+950    	; 0x13be <sendStrXY>
				printMaterial(detectMaterial());
    1008:	89 dd       	rcall	.-1262   	; 0xb1c <computeDFT>
    100a:	2c dc       	rcall	.-1960   	; 0x864 <detectMaterial>
    100c:	1c dd       	rcall	.-1480   	; 0xa46 <printMaterial>
    100e:	85 b1       	in	r24, 0x05	; 5
				
				//Clear status LED
				CLRBIT(PORTB,5);
    1010:	8f 7d       	andi	r24, 0xDF	; 223
    1012:	85 b9       	out	0x05, r24	; 5
    1014:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <BTN3_flag>
				
				//Calibration button
				if(BTN3_flag == 1){
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 f4       	brne	.+36     	; 0x1040 <__EEPROM_REGION_LENGTH__+0x40>
    101c:	8d b3       	in	r24, 0x1d	; 29
					CLRBIT(EIMSK,INT3);
    101e:	87 7f       	andi	r24, 0xF7	; 247
    1020:	8d bb       	out	0x1d, r24	; 29
    1022:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1024:	9c e9       	ldi	r25, 0x9C	; 156
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    102c:	00 00       	nop
					_delay_ms(DEBOUNCE);
					if(!CHKBIT(PIND,3)){
    102e:	4b 99       	sbic	0x09, 3	; 9
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
						nextState(select);
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	09 db       	rcall	.-2542   	; 0x648 <nextState>
    1036:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <BTN3_flag>
					}
 					BTN3_flag = 0;
    103a:	8d b3       	in	r24, 0x1d	; 29
					SETBIT(EIMSK,INT3);
    103c:	88 60       	ori	r24, 0x08	; 8
    103e:	8d bb       	out	0x1d, r24	; 29
    1040:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <BTN5_flag>
				}

				if(BTN5_flag == 1){
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	31 f6       	brne	.-116    	; 0xfd4 <main+0x2>
    1048:	8d b3       	in	r24, 0x1d	; 29
					CLRBIT(EIMSK,INT5);
    104a:	8f 7d       	andi	r24, 0xDF	; 223
    104c:	8d bb       	out	0x1d, r24	; 29
    104e:	8f e3       	ldi	r24, 0x3F	; 63
    1050:	9c e9       	ldi	r25, 0x9C	; 156
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    1058:	00 00       	nop
					_delay_ms(DEBOUNCE);
					if(!CHKBIT(PINE,5)){
    105a:	65 99       	sbic	0x0c, 5	; 12
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <__EEPROM_REGION_LENGTH__+0x62>
						nextState(reset);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	f3 da       	rcall	.-2586   	; 0x648 <nextState>
    1062:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <BTN5_flag>
					}
					BTN5_flag =0;
					SETBIT(EIMSK,INT5);
    1066:	8d b3       	in	r24, 0x1d	; 29
    1068:	80 62       	ori	r24, 0x20	; 32
				}
				break;	
			
			case calibrate:
				calibratePhase(materialSelctor);
    106a:	8d bb       	out	0x1d, r24	; 29
    106c:	b3 cf       	rjmp	.-154    	; 0xfd4 <main+0x2>
				defaultDisplay();
    106e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
				nextState(run);
    1072:	42 df       	rcall	.-380    	; 0xef8 <calibratePhase>
    1074:	83 dc       	rcall	.-1786   	; 0x97c <defaultDisplay>
    1076:	81 e0       	ldi	r24, 0x01	; 1
				break; 
    1078:	e7 da       	rcall	.-2610   	; 0x648 <nextState>
			
			case select:
				calibrateDisplay();
    107a:	ac cf       	rjmp	.-168    	; 0xfd4 <main+0x2>
    107c:	d4 dc       	rcall	.-1624   	; 0xa26 <calibrateDisplay>
				nextState(store);				
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	e3 da       	rcall	.-2618   	; 0x648 <nextState>
    1082:	a8 cf       	rjmp	.-176    	; 0xfd4 <main+0x2>
				break;
    1084:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <BTN4_flag>
			
			case store:
				//Select material
				if(BTN4_flag == 1){
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	e1 f4       	brne	.+56     	; 0x10c4 <__EEPROM_REGION_LENGTH__+0xc4>
    108c:	8d b3       	in	r24, 0x1d	; 29
					CLRBIT(EIMSK,INT2);
    108e:	8b 7f       	andi	r24, 0xFB	; 251
    1090:	8d bb       	out	0x1d, r24	; 29
    1092:	8f e3       	ldi	r24, 0x3F	; 63
    1094:	9c e9       	ldi	r25, 0x9C	; 156
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <__EEPROM_REGION_LENGTH__+0x9c>
    109c:	00 00       	nop
    109e:	4a 99       	sbic	0x09, 2	; 9
					_delay_ms(DEBOUNCE);
					if(!CHKBIT(PIND,2)){
    10a0:	0c c0       	rjmp	.+24     	; 0x10ba <__EEPROM_REGION_LENGTH__+0xba>
						materialSelctor ++;
    10a2:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <materialSelctor>
						if(materialSelctor>=NUM_MATERIALS) materialSelctor = 0;
    10ac:	85 30       	cpi	r24, 0x05	; 5
    10ae:	10 f0       	brcs	.+4      	; 0x10b4 <__EEPROM_REGION_LENGTH__+0xb4>
    10b0:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <materialSelctor>
						printMaterial(materialSelctor);
    10b4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
    10b8:	c6 dc       	rcall	.-1652   	; 0xa46 <printMaterial>
    10ba:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <BTN4_flag>
					}
					BTN4_flag = 0;
    10be:	8d b3       	in	r24, 0x1d	; 29
					SETBIT(EIMSK,INT2);
    10c0:	84 60       	ori	r24, 0x04	; 4
    10c2:	8d bb       	out	0x1d, r24	; 29
    10c4:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <BTN3_flag>
				}
				
				//Perform calibration when desired material has been selected
				if(BTN3_flag == 1){
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	09 f0       	breq	.+2      	; 0x10ce <__EEPROM_REGION_LENGTH__+0xce>
    10cc:	83 cf       	rjmp	.-250    	; 0xfd4 <main+0x2>
					CLRBIT(EIMSK,INT3);
    10ce:	8d b3       	in	r24, 0x1d	; 29
    10d0:	87 7f       	andi	r24, 0xF7	; 247
    10d2:	8d bb       	out	0x1d, r24	; 29
    10d4:	8f e3       	ldi	r24, 0x3F	; 63
    10d6:	9c e9       	ldi	r25, 0x9C	; 156
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <__EEPROM_REGION_LENGTH__+0xd8>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <__EEPROM_REGION_LENGTH__+0xde>
    10de:	00 00       	nop
					_delay_ms(DEBOUNCE);
					if(!CHKBIT(PINE,3)){
    10e0:	63 99       	sbic	0x0c, 3	; 12
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
						nextState(calibrate);
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	b0 da       	rcall	.-2720   	; 0x648 <nextState>
    10e8:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <BTN3_flag>
					}
					BTN3_flag = 0;
    10ec:	8d b3       	in	r24, 0x1d	; 29
					SETBIT(EIMSK,INT3);
    10ee:	88 60       	ori	r24, 0x08	; 8
    10f0:	8d bb       	out	0x1d, r24	; 29
    10f2:	70 cf       	rjmp	.-288    	; 0xfd4 <main+0x2>
    10f4:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <resetFunc>
				}
				break;
			
			case reset:
				resetFunc();
    10f8:	f0 91 9e 05 	lds	r31, 0x059E	; 0x80059e <resetFunc+0x1>
    10fc:	19 95       	eicall
    10fe:	6a cf       	rjmp	.-300    	; 0xfd4 <main+0x2>

00001100 <__vector_21>:
				//nextState(run);
			
				break; 
    1100:	1f 92       	push	r1
// ================================================
// Service Routines
// ================================================

//Service routine for Timer1 Compare B
ISR(TIMER0_COMPA_vect){
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	0b b6       	in	r0, 0x3b	; 59
    110c:	0f 92       	push	r0
    110e:	2f 93       	push	r18
    1110:	3f 93       	push	r19
    1112:	4f 93       	push	r20
    1114:	5f 93       	push	r21
    1116:	6f 93       	push	r22
    1118:	7f 93       	push	r23
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
//	TOGGLEBIT(PORTB,5);
 	if(timercount != 1){
    1126:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <timercount>
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	21 f0       	breq	.+8      	; 0x1136 <__vector_21+0x36>
 		timercount++;		
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <timercount>
    1134:	10 c0       	rjmp	.+32     	; 0x1156 <__vector_21+0x56>
 	}
 	else{
 		timercount = 0;
    1136:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <timercount>
 		TOGGLEBIT(PORTB,6);	
    113a:	95 b1       	in	r25, 0x05	; 5
    113c:	80 e4       	ldi	r24, 0x40	; 64
    113e:	89 27       	eor	r24, r25
    1140:	85 b9       	out	0x05, r24	; 5
		//Start ADC sampling
		if(CHKBIT(PORTB,6) == 0 && ADC_start_flag == 0){
    1142:	2e 99       	sbic	0x05, 6	; 5
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <__vector_21+0x56>
    1146:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <ADC_start_flag>
    114a:	81 11       	cpse	r24, r1
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <__vector_21+0x56>
			ADC_start_flag = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <ADC_start_flag>
			init_adc(1);
    1154:	fc d9       	rcall	.-3080   	; 0x54e <init_adc>
			}
		}
}
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0b be       	out	0x3b, r0	; 59
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <__vector_29>:



//Service routine for ADC sample ready
ISR(ADC_vect){
    117c:	1f 92       	push	r1
    117e:	0f 92       	push	r0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	0f 92       	push	r0
    1184:	11 24       	eor	r1, r1
    1186:	0b b6       	in	r0, 0x3b	; 59
    1188:	0f 92       	push	r0
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
	if(buffercounter < NUM_SAMPLES){
    1196:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <buffercounter>
    119a:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <buffercounter+0x1>
    119e:	80 34       	cpi	r24, 0x40	; 64
    11a0:	91 05       	cpc	r25, r1
    11a2:	9c f4       	brge	.+38     	; 0x11ca <__vector_29+0x4e>
		DFTBuffer[active_write][buffercounter] = ADCH;
    11a4:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    11a8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    11ac:	30 e4       	ldi	r19, 0x40	; 64
    11ae:	e3 9f       	mul	r30, r19
    11b0:	f0 01       	movw	r30, r0
    11b2:	11 24       	eor	r1, r1
    11b4:	e3 52       	subi	r30, 0x23	; 35
    11b6:	fc 4f       	sbci	r31, 0xFC	; 252
    11b8:	e8 0f       	add	r30, r24
    11ba:	f9 1f       	adc	r31, r25
    11bc:	20 83       	st	Z, r18
		buffercounter++;
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    11c4:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
    11c8:	39 c0       	rjmp	.+114    	; 0x123c <__vector_29+0xc0>
	}
	else if(DFT_ready){
    11ca:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <DFT_ready>
    11ce:	88 23       	and	r24, r24
    11d0:	b1 f0       	breq	.+44     	; 0x11fe <__vector_29+0x82>
		buffercounter = 0;
    11d2:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <buffercounter+0x1>
    11d6:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <buffercounter>
		DFTBuffer[active_write][buffercounter] = ADCH; 
    11da:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    11de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    11e2:	90 e4       	ldi	r25, 0x40	; 64
    11e4:	e9 9f       	mul	r30, r25
    11e6:	f0 01       	movw	r30, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	e3 52       	subi	r30, 0x23	; 35
    11ec:	fc 4f       	sbci	r31, 0xFC	; 252
    11ee:	80 83       	st	Z, r24
		buffercounter++;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    11f8:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
    11fc:	1f c0       	rjmp	.+62     	; 0x123c <__vector_29+0xc0>
	}
	else{
		active_write = !active_write;
    11fe:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <active_write>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	91 11       	cpse	r25, r1
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <active_write>
		DFT_ready = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <DFT_ready>
		buffercounter = 0;
    1212:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <buffercounter+0x1>
    1216:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <buffercounter>
		DFTBuffer[active_write][buffercounter] = ADCH;	//Save remaining first sample 
    121a:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    121e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1222:	30 e4       	ldi	r19, 0x40	; 64
    1224:	e3 9f       	mul	r30, r19
    1226:	f0 01       	movw	r30, r0
    1228:	11 24       	eor	r1, r1
    122a:	e3 52       	subi	r30, 0x23	; 35
    122c:	fc 4f       	sbci	r31, 0xFC	; 252
    122e:	80 83       	st	Z, r24
		buffercounter++;  
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    1238:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
	}
}
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0b be       	out	0x3b, r0	; 59
    124c:	0f 90       	pop	r0
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	0f 90       	pop	r0
    1252:	1f 90       	pop	r1
    1254:	18 95       	reti

00001256 <__vector_4>:


//Service routines for external interrupts (buttons)
ISR(INT3_vect){
    1256:	1f 92       	push	r1
    1258:	0f 92       	push	r0
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	0f 92       	push	r0
    125e:	11 24       	eor	r1, r1
    1260:	8f 93       	push	r24
	if(init_flag == 1){
    1262:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	19 f4       	brne	.+6      	; 0x1270 <__vector_4+0x1a>
		init_flag = 0;
    126a:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <__vector_4+0x20>
	}
	else{
	BTN3_flag = 1;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <BTN3_flag>
	}
}
    1276:	8f 91       	pop	r24
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <__vector_3>:

ISR(INT2_vect){
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	8f 93       	push	r24
	if(init_flag == 1){
    128e:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	19 f4       	brne	.+6      	; 0x129c <__vector_3+0x1a>
		init_flag = 0;
    1296:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <__vector_3+0x20>
	}
	else{
		BTN4_flag = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <BTN4_flag>
	}
}
    12a2:	8f 91       	pop	r24
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_6>:

ISR(INT5_vect){
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	8f 93       	push	r24
	if(init_flag == 1){
    12ba:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	19 f4       	brne	.+6      	; 0x12c8 <__vector_6+0x1a>
		init_flag = 0;
    12c2:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <__vector_6+0x20>
	}
	else{
		BTN5_flag = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <BTN5_flag>
	}
    12ce:	8f 91       	pop	r24
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <ssd1306_command>:

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
    12da:	cf 93       	push	r28
    12dc:	c8 2f       	mov	r28, r24
    12de:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_i2c_address>
    12e2:	70 d9       	rcall	.-3360   	; 0x5c4 <I2C_Start>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	92 d9       	rcall	.-3292   	; 0x60c <I2C_Write>
    12e8:	8c 2f       	mov	r24, r28
    12ea:	90 d9       	rcall	.-3296   	; 0x60c <I2C_Write>
    12ec:	a5 d9       	rcall	.-3254   	; 0x638 <I2C_Stop>
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <InitializeDisplay>:
    12f2:	8e ea       	ldi	r24, 0xAE	; 174
    12f4:	f2 df       	rcall	.-28     	; 0x12da <ssd1306_command>
    12f6:	85 ed       	ldi	r24, 0xD5	; 213
    12f8:	f0 df       	rcall	.-32     	; 0x12da <ssd1306_command>
    12fa:	80 e8       	ldi	r24, 0x80	; 128
    12fc:	ee df       	rcall	.-36     	; 0x12da <ssd1306_command>
    12fe:	88 ea       	ldi	r24, 0xA8	; 168
    1300:	ec df       	rcall	.-40     	; 0x12da <ssd1306_command>
    1302:	8f e3       	ldi	r24, 0x3F	; 63
    1304:	ea df       	rcall	.-44     	; 0x12da <ssd1306_command>
    1306:	83 ed       	ldi	r24, 0xD3	; 211
    1308:	e8 df       	rcall	.-48     	; 0x12da <ssd1306_command>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	e6 df       	rcall	.-52     	; 0x12da <ssd1306_command>
    130e:	80 e4       	ldi	r24, 0x40	; 64
    1310:	e4 df       	rcall	.-56     	; 0x12da <ssd1306_command>
    1312:	8d e8       	ldi	r24, 0x8D	; 141
    1314:	e2 df       	rcall	.-60     	; 0x12da <ssd1306_command>
    1316:	84 e1       	ldi	r24, 0x14	; 20
    1318:	e0 df       	rcall	.-64     	; 0x12da <ssd1306_command>
    131a:	80 e2       	ldi	r24, 0x20	; 32
    131c:	de df       	rcall	.-68     	; 0x12da <ssd1306_command>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	dc df       	rcall	.-72     	; 0x12da <ssd1306_command>
    1322:	81 ea       	ldi	r24, 0xA1	; 161
    1324:	da df       	rcall	.-76     	; 0x12da <ssd1306_command>
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	d8 df       	rcall	.-80     	; 0x12da <ssd1306_command>
    132a:	8a ed       	ldi	r24, 0xDA	; 218
    132c:	d6 df       	rcall	.-84     	; 0x12da <ssd1306_command>
    132e:	82 e1       	ldi	r24, 0x12	; 18
    1330:	d4 df       	rcall	.-88     	; 0x12da <ssd1306_command>
    1332:	81 e8       	ldi	r24, 0x81	; 129
    1334:	d2 df       	rcall	.-92     	; 0x12da <ssd1306_command>
    1336:	8f ec       	ldi	r24, 0xCF	; 207
    1338:	d0 df       	rcall	.-96     	; 0x12da <ssd1306_command>
    133a:	89 ed       	ldi	r24, 0xD9	; 217
    133c:	ce df       	rcall	.-100    	; 0x12da <ssd1306_command>
    133e:	81 ef       	ldi	r24, 0xF1	; 241
    1340:	cc df       	rcall	.-104    	; 0x12da <ssd1306_command>
    1342:	8b ed       	ldi	r24, 0xDB	; 219
    1344:	ca df       	rcall	.-108    	; 0x12da <ssd1306_command>
    1346:	80 e4       	ldi	r24, 0x40	; 64
    1348:	c8 df       	rcall	.-112    	; 0x12da <ssd1306_command>
    134a:	84 ea       	ldi	r24, 0xA4	; 164
    134c:	c6 df       	rcall	.-116    	; 0x12da <ssd1306_command>
    134e:	86 ea       	ldi	r24, 0xA6	; 166
    1350:	c4 df       	rcall	.-120    	; 0x12da <ssd1306_command>
    1352:	8f ea       	ldi	r24, 0xAF	; 175
    1354:	c2 cf       	rjmp	.-124    	; 0x12da <ssd1306_command>
    1356:	08 95       	ret

00001358 <SendChar>:
    1358:	cf 93       	push	r28
    135a:	c8 2f       	mov	r28, r24
    135c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_i2c_address>
    1360:	31 d9       	rcall	.-3486   	; 0x5c4 <I2C_Start>
    1362:	80 e4       	ldi	r24, 0x40	; 64
    1364:	53 d9       	rcall	.-3418   	; 0x60c <I2C_Write>
    1366:	8c 2f       	mov	r24, r28
    1368:	51 d9       	rcall	.-3422   	; 0x60c <I2C_Write>
    136a:	66 d9       	rcall	.-3380   	; 0x638 <I2C_Stop>
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <setXY>:
    1370:	cf 93       	push	r28
    1372:	c6 2f       	mov	r28, r22
    1374:	80 55       	subi	r24, 0x50	; 80
    1376:	b1 df       	rcall	.-158    	; 0x12da <ssd1306_command>
    1378:	8c 2f       	mov	r24, r28
    137a:	88 0f       	add	r24, r24
    137c:	88 0f       	add	r24, r24
    137e:	88 0f       	add	r24, r24
    1380:	88 70       	andi	r24, 0x08	; 8
    1382:	ab df       	rcall	.-170    	; 0x12da <ssd1306_command>
    1384:	8c 2f       	mov	r24, r28
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	96 95       	lsr	r25
    138a:	87 95       	ror	r24
    138c:	8f 70       	andi	r24, 0x0F	; 15
    138e:	80 5f       	subi	r24, 0xF0	; 240
    1390:	a4 df       	rcall	.-184    	; 0x12da <ssd1306_command>
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <clear_display>:
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	d0 e0       	ldi	r29, 0x00	; 0
    139c:	0b c0       	rjmp	.+22     	; 0x13b4 <clear_display+0x1e>
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	8d 2f       	mov	r24, r29
    13a2:	e6 df       	rcall	.-52     	; 0x1370 <setXY>
    13a4:	c0 e0       	ldi	r28, 0x00	; 0
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <clear_display+0x18>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	d6 df       	rcall	.-84     	; 0x1358 <SendChar>
    13ac:	cf 5f       	subi	r28, 0xFF	; 255
    13ae:	cc 23       	and	r28, r28
    13b0:	dc f7       	brge	.-10     	; 0x13a8 <clear_display+0x12>
    13b2:	df 5f       	subi	r29, 0xFF	; 255
    13b4:	d8 30       	cpi	r29, 0x08	; 8
    13b6:	98 f3       	brcs	.-26     	; 0x139e <clear_display+0x8>
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <sendStrXY>:
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	ec 01       	movw	r28, r24
    13c8:	86 2f       	mov	r24, r22
    13ca:	06 2f       	mov	r16, r22
    13cc:	64 2f       	mov	r22, r20
    13ce:	d0 df       	rcall	.-96     	; 0x1370 <setXY>
    13d0:	1c c0       	rjmp	.+56     	; 0x140a <sendStrXY+0x4c>
    13d2:	8a 30       	cpi	r24, 0x0A	; 10
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <sendStrXY+0x22>
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 0f       	add	r24, r16
    13dc:	c9 df       	rcall	.-110    	; 0x1370 <setXY>
    13de:	21 96       	adiw	r28, 0x01	; 1
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	10 c0       	rjmp	.+32     	; 0x1404 <sendStrXY+0x46>
    13e4:	e8 81       	ld	r30, Y
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	b0 97       	sbiw	r30, 0x20	; 32
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	e4 5f       	subi	r30, 0xF4	; 244
    13f8:	fd 4f       	sbci	r31, 0xFD	; 253
    13fa:	e1 0f       	add	r30, r17
    13fc:	f1 1d       	adc	r31, r1
    13fe:	84 91       	lpm	r24, Z
    1400:	ab df       	rcall	.-170    	; 0x1358 <SendChar>
    1402:	1f 5f       	subi	r17, 0xFF	; 255
    1404:	18 30       	cpi	r17, 0x08	; 8
    1406:	70 f3       	brcs	.-36     	; 0x13e4 <sendStrXY+0x26>
    1408:	21 96       	adiw	r28, 0x01	; 1
    140a:	88 81       	ld	r24, Y
    140c:	81 11       	cpse	r24, r1
    140e:	e1 cf       	rjmp	.-62     	; 0x13d2 <sendStrXY+0x14>
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <print_fonts>:
void print_fonts(){
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
	clear_display();
    1428:	b6 df       	rcall	.-148    	; 0x1396 <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
    142a:	e1 2c       	mov	r14, r1
    142c:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
    142e:	68 94       	set
    1430:	dd 24       	eor	r13, r13
    1432:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
    1434:	27 c0       	rjmp	.+78     	; 0x1484 <print_fonts+0x6a>
		setXY(k,0);
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	8e 2d       	mov	r24, r14
    143a:	9a df       	rcall	.-204    	; 0x1370 <setXY>

		for (int j=0;j<16;j++)
    143c:	00 e0       	ldi	r16, 0x00	; 0
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	19 c0       	rjmp	.+50     	; 0x1474 <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
    1442:	f8 01       	movw	r30, r16
    1444:	ed 0d       	add	r30, r13
    1446:	f1 1d       	adc	r31, r1
    1448:	b0 97       	sbiw	r30, 0x20	; 32
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	ee 0f       	add	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	e4 5f       	subi	r30, 0xF4	; 244
    1458:	fd 4f       	sbci	r31, 0xFD	; 253
    145a:	ec 0f       	add	r30, r28
    145c:	fd 1f       	adc	r31, r29
    145e:	84 91       	lpm	r24, Z
    1460:	7b df       	rcall	.-266    	; 0x1358 <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
    1462:	21 96       	adiw	r28, 0x01	; 1
    1464:	02 c0       	rjmp	.+4      	; 0x146a <print_fonts+0x50>
    1466:	c0 e0       	ldi	r28, 0x00	; 0
    1468:	d0 e0       	ldi	r29, 0x00	; 0
    146a:	c8 30       	cpi	r28, 0x08	; 8
    146c:	d1 05       	cpc	r29, r1
    146e:	4c f3       	brlt	.-46     	; 0x1442 <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
    1470:	0f 5f       	subi	r16, 0xFF	; 255
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	00 31       	cpi	r16, 0x10	; 16
    1476:	11 05       	cpc	r17, r1
    1478:	b4 f3       	brlt	.-20     	; 0x1466 <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
    147a:	80 e1       	ldi	r24, 0x10	; 16
    147c:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	e8 1a       	sub	r14, r24
    1482:	f8 0a       	sbc	r15, r24
    1484:	86 e0       	ldi	r24, 0x06	; 6
    1486:	e8 16       	cp	r14, r24
    1488:	f1 04       	cpc	r15, r1
    148a:	ac f2       	brlt	.-86     	; 0x1436 <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	08 95       	ret

0000149c <init_timer0>:
	TIMSK1 |= (1<<OCIE1B);				//Interrupt when TCNT1 = OCR3B
}
	
//Initialize hardware timer 0
void init_timer0(){
	DDRB |= (1<<DDB7);					// Set OC0A as output
    149c:	84 b1       	in	r24, 0x04	; 4
    149e:	80 68       	ori	r24, 0x80	; 128
    14a0:	84 b9       	out	0x04, r24	; 4
	TCCR0A |= (1<<COM0A0) | (1<<WGM01); //Toggle OC0A CTC-mode
    14a2:	84 b5       	in	r24, 0x24	; 36
    14a4:	82 64       	ori	r24, 0x42	; 66
    14a6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);				//Prescaler 8
    14a8:	85 b5       	in	r24, 0x25	; 37
    14aa:	82 60       	ori	r24, 0x02	; 2
    14ac:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;							//Count from 0
    14ae:	16 bc       	out	0x26, r1	; 38
	OCR0A = 249;						//Compare value
    14b0:	89 ef       	ldi	r24, 0xF9	; 249
    14b2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);				//Interrupt when TCNT1 = OCR0A
    14b4:	ee e6       	ldi	r30, 0x6E	; 110
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	82 60       	ori	r24, 0x02	; 2
    14bc:	80 83       	st	Z, r24
    14be:	08 95       	ret

000014c0 <__subsf3>:
    14c0:	50 58       	subi	r21, 0x80	; 128

000014c2 <__addsf3>:
    14c2:	bb 27       	eor	r27, r27
    14c4:	aa 27       	eor	r26, r26
    14c6:	0e d0       	rcall	.+28     	; 0x14e4 <__addsf3x>
    14c8:	c9 c1       	rjmp	.+914    	; 0x185c <__fp_round>
    14ca:	ba d1       	rcall	.+884    	; 0x1840 <__fp_pscA>
    14cc:	30 f0       	brcs	.+12     	; 0x14da <__addsf3+0x18>
    14ce:	bf d1       	rcall	.+894    	; 0x184e <__fp_pscB>
    14d0:	20 f0       	brcs	.+8      	; 0x14da <__addsf3+0x18>
    14d2:	31 f4       	brne	.+12     	; 0x14e0 <__addsf3+0x1e>
    14d4:	9f 3f       	cpi	r25, 0xFF	; 255
    14d6:	11 f4       	brne	.+4      	; 0x14dc <__addsf3+0x1a>
    14d8:	1e f4       	brtc	.+6      	; 0x14e0 <__addsf3+0x1e>
    14da:	8a c1       	rjmp	.+788    	; 0x17f0 <__fp_nan>
    14dc:	0e f4       	brtc	.+2      	; 0x14e0 <__addsf3+0x1e>
    14de:	e0 95       	com	r30
    14e0:	e7 fb       	bst	r30, 7
    14e2:	80 c1       	rjmp	.+768    	; 0x17e4 <__fp_inf>

000014e4 <__addsf3x>:
    14e4:	e9 2f       	mov	r30, r25
    14e6:	cb d1       	rcall	.+918    	; 0x187e <__fp_split3>
    14e8:	80 f3       	brcs	.-32     	; 0x14ca <__addsf3+0x8>
    14ea:	ba 17       	cp	r27, r26
    14ec:	62 07       	cpc	r22, r18
    14ee:	73 07       	cpc	r23, r19
    14f0:	84 07       	cpc	r24, r20
    14f2:	95 07       	cpc	r25, r21
    14f4:	18 f0       	brcs	.+6      	; 0x14fc <__addsf3x+0x18>
    14f6:	71 f4       	brne	.+28     	; 0x1514 <__addsf3x+0x30>
    14f8:	9e f5       	brtc	.+102    	; 0x1560 <__addsf3x+0x7c>
    14fa:	e3 c1       	rjmp	.+966    	; 0x18c2 <__fp_zero>
    14fc:	0e f4       	brtc	.+2      	; 0x1500 <__addsf3x+0x1c>
    14fe:	e0 95       	com	r30
    1500:	0b 2e       	mov	r0, r27
    1502:	ba 2f       	mov	r27, r26
    1504:	a0 2d       	mov	r26, r0
    1506:	0b 01       	movw	r0, r22
    1508:	b9 01       	movw	r22, r18
    150a:	90 01       	movw	r18, r0
    150c:	0c 01       	movw	r0, r24
    150e:	ca 01       	movw	r24, r20
    1510:	a0 01       	movw	r20, r0
    1512:	11 24       	eor	r1, r1
    1514:	ff 27       	eor	r31, r31
    1516:	59 1b       	sub	r21, r25
    1518:	99 f0       	breq	.+38     	; 0x1540 <__addsf3x+0x5c>
    151a:	59 3f       	cpi	r21, 0xF9	; 249
    151c:	50 f4       	brcc	.+20     	; 0x1532 <__addsf3x+0x4e>
    151e:	50 3e       	cpi	r21, 0xE0	; 224
    1520:	68 f1       	brcs	.+90     	; 0x157c <__addsf3x+0x98>
    1522:	1a 16       	cp	r1, r26
    1524:	f0 40       	sbci	r31, 0x00	; 0
    1526:	a2 2f       	mov	r26, r18
    1528:	23 2f       	mov	r18, r19
    152a:	34 2f       	mov	r19, r20
    152c:	44 27       	eor	r20, r20
    152e:	58 5f       	subi	r21, 0xF8	; 248
    1530:	f3 cf       	rjmp	.-26     	; 0x1518 <__addsf3x+0x34>
    1532:	46 95       	lsr	r20
    1534:	37 95       	ror	r19
    1536:	27 95       	ror	r18
    1538:	a7 95       	ror	r26
    153a:	f0 40       	sbci	r31, 0x00	; 0
    153c:	53 95       	inc	r21
    153e:	c9 f7       	brne	.-14     	; 0x1532 <__addsf3x+0x4e>
    1540:	7e f4       	brtc	.+30     	; 0x1560 <__addsf3x+0x7c>
    1542:	1f 16       	cp	r1, r31
    1544:	ba 0b       	sbc	r27, r26
    1546:	62 0b       	sbc	r22, r18
    1548:	73 0b       	sbc	r23, r19
    154a:	84 0b       	sbc	r24, r20
    154c:	ba f0       	brmi	.+46     	; 0x157c <__addsf3x+0x98>
    154e:	91 50       	subi	r25, 0x01	; 1
    1550:	a1 f0       	breq	.+40     	; 0x157a <__addsf3x+0x96>
    1552:	ff 0f       	add	r31, r31
    1554:	bb 1f       	adc	r27, r27
    1556:	66 1f       	adc	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	88 1f       	adc	r24, r24
    155c:	c2 f7       	brpl	.-16     	; 0x154e <__addsf3x+0x6a>
    155e:	0e c0       	rjmp	.+28     	; 0x157c <__addsf3x+0x98>
    1560:	ba 0f       	add	r27, r26
    1562:	62 1f       	adc	r22, r18
    1564:	73 1f       	adc	r23, r19
    1566:	84 1f       	adc	r24, r20
    1568:	48 f4       	brcc	.+18     	; 0x157c <__addsf3x+0x98>
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f7 95       	ror	r31
    1574:	9e 3f       	cpi	r25, 0xFE	; 254
    1576:	08 f0       	brcs	.+2      	; 0x157a <__addsf3x+0x96>
    1578:	b3 cf       	rjmp	.-154    	; 0x14e0 <__addsf3+0x1e>
    157a:	93 95       	inc	r25
    157c:	88 0f       	add	r24, r24
    157e:	08 f0       	brcs	.+2      	; 0x1582 <__addsf3x+0x9e>
    1580:	99 27       	eor	r25, r25
    1582:	ee 0f       	add	r30, r30
    1584:	97 95       	ror	r25
    1586:	87 95       	ror	r24
    1588:	08 95       	ret
    158a:	5a d1       	rcall	.+692    	; 0x1840 <__fp_pscA>
    158c:	58 f0       	brcs	.+22     	; 0x15a4 <__addsf3x+0xc0>
    158e:	80 e8       	ldi	r24, 0x80	; 128
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	09 f4       	brne	.+2      	; 0x1596 <__addsf3x+0xb2>
    1594:	9e ef       	ldi	r25, 0xFE	; 254
    1596:	5b d1       	rcall	.+694    	; 0x184e <__fp_pscB>
    1598:	28 f0       	brcs	.+10     	; 0x15a4 <__addsf3x+0xc0>
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	51 e0       	ldi	r21, 0x01	; 1
    159e:	59 f4       	brne	.+22     	; 0x15b6 <atan2+0xe>
    15a0:	5e ef       	ldi	r21, 0xFE	; 254
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <atan2+0xe>
    15a4:	25 c1       	rjmp	.+586    	; 0x17f0 <__fp_nan>
    15a6:	8d c1       	rjmp	.+794    	; 0x18c2 <__fp_zero>

000015a8 <atan2>:
    15a8:	e9 2f       	mov	r30, r25
    15aa:	e0 78       	andi	r30, 0x80	; 128
    15ac:	68 d1       	rcall	.+720    	; 0x187e <__fp_split3>
    15ae:	68 f3       	brcs	.-38     	; 0x158a <__addsf3x+0xa6>
    15b0:	09 2e       	mov	r0, r25
    15b2:	05 2a       	or	r0, r21
    15b4:	c1 f3       	breq	.-16     	; 0x15a6 <__addsf3x+0xc2>
    15b6:	26 17       	cp	r18, r22
    15b8:	37 07       	cpc	r19, r23
    15ba:	48 07       	cpc	r20, r24
    15bc:	59 07       	cpc	r21, r25
    15be:	38 f0       	brcs	.+14     	; 0x15ce <atan2+0x26>
    15c0:	0e 2e       	mov	r0, r30
    15c2:	07 f8       	bld	r0, 7
    15c4:	e0 25       	eor	r30, r0
    15c6:	69 f0       	breq	.+26     	; 0x15e2 <atan2+0x3a>
    15c8:	e0 25       	eor	r30, r0
    15ca:	e0 64       	ori	r30, 0x40	; 64
    15cc:	0a c0       	rjmp	.+20     	; 0x15e2 <atan2+0x3a>
    15ce:	ef 63       	ori	r30, 0x3F	; 63
    15d0:	07 f8       	bld	r0, 7
    15d2:	00 94       	com	r0
    15d4:	07 fa       	bst	r0, 7
    15d6:	db 01       	movw	r26, r22
    15d8:	b9 01       	movw	r22, r18
    15da:	9d 01       	movw	r18, r26
    15dc:	dc 01       	movw	r26, r24
    15de:	ca 01       	movw	r24, r20
    15e0:	ad 01       	movw	r20, r26
    15e2:	ef 93       	push	r30
    15e4:	45 d0       	rcall	.+138    	; 0x1670 <__divsf3_pse>
    15e6:	3a d1       	rcall	.+628    	; 0x185c <__fp_round>
    15e8:	0a d0       	rcall	.+20     	; 0x15fe <atan>
    15ea:	5f 91       	pop	r21
    15ec:	55 23       	and	r21, r21
    15ee:	31 f0       	breq	.+12     	; 0x15fc <atan2+0x54>
    15f0:	2b ed       	ldi	r18, 0xDB	; 219
    15f2:	3f e0       	ldi	r19, 0x0F	; 15
    15f4:	49 e4       	ldi	r20, 0x49	; 73
    15f6:	50 fd       	sbrc	r21, 0
    15f8:	49 ec       	ldi	r20, 0xC9	; 201
    15fa:	63 cf       	rjmp	.-314    	; 0x14c2 <__addsf3>
    15fc:	08 95       	ret

000015fe <atan>:
    15fe:	df 93       	push	r29
    1600:	dd 27       	eor	r29, r29
    1602:	b9 2f       	mov	r27, r25
    1604:	bf 77       	andi	r27, 0x7F	; 127
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5f e3       	ldi	r21, 0x3F	; 63
    160a:	16 16       	cp	r1, r22
    160c:	17 06       	cpc	r1, r23
    160e:	48 07       	cpc	r20, r24
    1610:	5b 07       	cpc	r21, r27
    1612:	10 f4       	brcc	.+4      	; 0x1618 <atan+0x1a>
    1614:	d9 2f       	mov	r29, r25
    1616:	60 d1       	rcall	.+704    	; 0x18d8 <inverse>
    1618:	9f 93       	push	r25
    161a:	8f 93       	push	r24
    161c:	7f 93       	push	r23
    161e:	6f 93       	push	r22
    1620:	07 d2       	rcall	.+1038   	; 0x1a30 <square>
    1622:	e4 ee       	ldi	r30, 0xE4	; 228
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	e7 d0       	rcall	.+462    	; 0x17f6 <__fp_powser>
    1628:	19 d1       	rcall	.+562    	; 0x185c <__fp_round>
    162a:	2f 91       	pop	r18
    162c:	3f 91       	pop	r19
    162e:	4f 91       	pop	r20
    1630:	5f 91       	pop	r21
    1632:	65 d1       	rcall	.+714    	; 0x18fe <__mulsf3x>
    1634:	dd 23       	and	r29, r29
    1636:	49 f0       	breq	.+18     	; 0x164a <atan+0x4c>
    1638:	90 58       	subi	r25, 0x80	; 128
    163a:	a2 ea       	ldi	r26, 0xA2	; 162
    163c:	2a ed       	ldi	r18, 0xDA	; 218
    163e:	3f e0       	ldi	r19, 0x0F	; 15
    1640:	49 ec       	ldi	r20, 0xC9	; 201
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	d0 78       	andi	r29, 0x80	; 128
    1646:	5d 27       	eor	r21, r29
    1648:	4d df       	rcall	.-358    	; 0x14e4 <__addsf3x>
    164a:	df 91       	pop	r29
    164c:	07 c1       	rjmp	.+526    	; 0x185c <__fp_round>

0000164e <__cmpsf2>:
    164e:	a6 d0       	rcall	.+332    	; 0x179c <__fp_cmp>
    1650:	08 f4       	brcc	.+2      	; 0x1654 <__cmpsf2+0x6>
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	08 95       	ret
    1656:	fb d0       	rcall	.+502    	; 0x184e <__fp_pscB>
    1658:	40 f0       	brcs	.+16     	; 0x166a <__cmpsf2+0x1c>
    165a:	f2 d0       	rcall	.+484    	; 0x1840 <__fp_pscA>
    165c:	30 f0       	brcs	.+12     	; 0x166a <__cmpsf2+0x1c>
    165e:	21 f4       	brne	.+8      	; 0x1668 <__cmpsf2+0x1a>
    1660:	5f 3f       	cpi	r21, 0xFF	; 255
    1662:	19 f0       	breq	.+6      	; 0x166a <__cmpsf2+0x1c>
    1664:	bf c0       	rjmp	.+382    	; 0x17e4 <__fp_inf>
    1666:	51 11       	cpse	r21, r1
    1668:	2d c1       	rjmp	.+602    	; 0x18c4 <__fp_szero>
    166a:	c2 c0       	rjmp	.+388    	; 0x17f0 <__fp_nan>

0000166c <__divsf3x>:
    166c:	08 d1       	rcall	.+528    	; 0x187e <__fp_split3>
    166e:	98 f3       	brcs	.-26     	; 0x1656 <__cmpsf2+0x8>

00001670 <__divsf3_pse>:
    1670:	99 23       	and	r25, r25
    1672:	c9 f3       	breq	.-14     	; 0x1666 <__cmpsf2+0x18>
    1674:	55 23       	and	r21, r21
    1676:	b1 f3       	breq	.-20     	; 0x1664 <__cmpsf2+0x16>
    1678:	95 1b       	sub	r25, r21
    167a:	55 0b       	sbc	r21, r21
    167c:	bb 27       	eor	r27, r27
    167e:	aa 27       	eor	r26, r26
    1680:	62 17       	cp	r22, r18
    1682:	73 07       	cpc	r23, r19
    1684:	84 07       	cpc	r24, r20
    1686:	38 f0       	brcs	.+14     	; 0x1696 <__divsf3_pse+0x26>
    1688:	9f 5f       	subi	r25, 0xFF	; 255
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	22 0f       	add	r18, r18
    168e:	33 1f       	adc	r19, r19
    1690:	44 1f       	adc	r20, r20
    1692:	aa 1f       	adc	r26, r26
    1694:	a9 f3       	breq	.-22     	; 0x1680 <__divsf3_pse+0x10>
    1696:	33 d0       	rcall	.+102    	; 0x16fe <__divsf3_pse+0x8e>
    1698:	0e 2e       	mov	r0, r30
    169a:	3a f0       	brmi	.+14     	; 0x16aa <__divsf3_pse+0x3a>
    169c:	e0 e8       	ldi	r30, 0x80	; 128
    169e:	30 d0       	rcall	.+96     	; 0x1700 <__divsf3_pse+0x90>
    16a0:	91 50       	subi	r25, 0x01	; 1
    16a2:	50 40       	sbci	r21, 0x00	; 0
    16a4:	e6 95       	lsr	r30
    16a6:	00 1c       	adc	r0, r0
    16a8:	ca f7       	brpl	.-14     	; 0x169c <__divsf3_pse+0x2c>
    16aa:	29 d0       	rcall	.+82     	; 0x16fe <__divsf3_pse+0x8e>
    16ac:	fe 2f       	mov	r31, r30
    16ae:	27 d0       	rcall	.+78     	; 0x16fe <__divsf3_pse+0x8e>
    16b0:	66 0f       	add	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 1f       	adc	r24, r24
    16b6:	bb 1f       	adc	r27, r27
    16b8:	26 17       	cp	r18, r22
    16ba:	37 07       	cpc	r19, r23
    16bc:	48 07       	cpc	r20, r24
    16be:	ab 07       	cpc	r26, r27
    16c0:	b0 e8       	ldi	r27, 0x80	; 128
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <__divsf3_pse+0x56>
    16c4:	bb 0b       	sbc	r27, r27
    16c6:	80 2d       	mov	r24, r0
    16c8:	bf 01       	movw	r22, r30
    16ca:	ff 27       	eor	r31, r31
    16cc:	93 58       	subi	r25, 0x83	; 131
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
    16d0:	2a f0       	brmi	.+10     	; 0x16dc <__divsf3_pse+0x6c>
    16d2:	9e 3f       	cpi	r25, 0xFE	; 254
    16d4:	51 05       	cpc	r21, r1
    16d6:	68 f0       	brcs	.+26     	; 0x16f2 <__divsf3_pse+0x82>
    16d8:	85 c0       	rjmp	.+266    	; 0x17e4 <__fp_inf>
    16da:	f4 c0       	rjmp	.+488    	; 0x18c4 <__fp_szero>
    16dc:	5f 3f       	cpi	r21, 0xFF	; 255
    16de:	ec f3       	brlt	.-6      	; 0x16da <__divsf3_pse+0x6a>
    16e0:	98 3e       	cpi	r25, 0xE8	; 232
    16e2:	dc f3       	brlt	.-10     	; 0x16da <__divsf3_pse+0x6a>
    16e4:	86 95       	lsr	r24
    16e6:	77 95       	ror	r23
    16e8:	67 95       	ror	r22
    16ea:	b7 95       	ror	r27
    16ec:	f7 95       	ror	r31
    16ee:	9f 5f       	subi	r25, 0xFF	; 255
    16f0:	c9 f7       	brne	.-14     	; 0x16e4 <__divsf3_pse+0x74>
    16f2:	88 0f       	add	r24, r24
    16f4:	91 1d       	adc	r25, r1
    16f6:	96 95       	lsr	r25
    16f8:	87 95       	ror	r24
    16fa:	97 f9       	bld	r25, 7
    16fc:	08 95       	ret
    16fe:	e1 e0       	ldi	r30, 0x01	; 1
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	bb 1f       	adc	r27, r27
    1708:	62 17       	cp	r22, r18
    170a:	73 07       	cpc	r23, r19
    170c:	84 07       	cpc	r24, r20
    170e:	ba 07       	cpc	r27, r26
    1710:	20 f0       	brcs	.+8      	; 0x171a <__divsf3_pse+0xaa>
    1712:	62 1b       	sub	r22, r18
    1714:	73 0b       	sbc	r23, r19
    1716:	84 0b       	sbc	r24, r20
    1718:	ba 0b       	sbc	r27, r26
    171a:	ee 1f       	adc	r30, r30
    171c:	88 f7       	brcc	.-30     	; 0x1700 <__divsf3_pse+0x90>
    171e:	e0 95       	com	r30
    1720:	08 95       	ret

00001722 <__floatunsisf>:
    1722:	e8 94       	clt
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <__floatsisf+0x12>

00001726 <__floatsisf>:
    1726:	97 fb       	bst	r25, 7
    1728:	3e f4       	brtc	.+14     	; 0x1738 <__floatsisf+0x12>
    172a:	90 95       	com	r25
    172c:	80 95       	com	r24
    172e:	70 95       	com	r23
    1730:	61 95       	neg	r22
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	8f 4f       	sbci	r24, 0xFF	; 255
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	99 23       	and	r25, r25
    173a:	a9 f0       	breq	.+42     	; 0x1766 <__floatsisf+0x40>
    173c:	f9 2f       	mov	r31, r25
    173e:	96 e9       	ldi	r25, 0x96	; 150
    1740:	bb 27       	eor	r27, r27
    1742:	93 95       	inc	r25
    1744:	f6 95       	lsr	r31
    1746:	87 95       	ror	r24
    1748:	77 95       	ror	r23
    174a:	67 95       	ror	r22
    174c:	b7 95       	ror	r27
    174e:	f1 11       	cpse	r31, r1
    1750:	f8 cf       	rjmp	.-16     	; 0x1742 <__floatsisf+0x1c>
    1752:	fa f4       	brpl	.+62     	; 0x1792 <__floatsisf+0x6c>
    1754:	bb 0f       	add	r27, r27
    1756:	11 f4       	brne	.+4      	; 0x175c <__floatsisf+0x36>
    1758:	60 ff       	sbrs	r22, 0
    175a:	1b c0       	rjmp	.+54     	; 0x1792 <__floatsisf+0x6c>
    175c:	6f 5f       	subi	r22, 0xFF	; 255
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	8f 4f       	sbci	r24, 0xFF	; 255
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	16 c0       	rjmp	.+44     	; 0x1792 <__floatsisf+0x6c>
    1766:	88 23       	and	r24, r24
    1768:	11 f0       	breq	.+4      	; 0x176e <__floatsisf+0x48>
    176a:	96 e9       	ldi	r25, 0x96	; 150
    176c:	11 c0       	rjmp	.+34     	; 0x1790 <__floatsisf+0x6a>
    176e:	77 23       	and	r23, r23
    1770:	21 f0       	breq	.+8      	; 0x177a <__floatsisf+0x54>
    1772:	9e e8       	ldi	r25, 0x8E	; 142
    1774:	87 2f       	mov	r24, r23
    1776:	76 2f       	mov	r23, r22
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <__floatsisf+0x5e>
    177a:	66 23       	and	r22, r22
    177c:	71 f0       	breq	.+28     	; 0x179a <__floatsisf+0x74>
    177e:	96 e8       	ldi	r25, 0x86	; 134
    1780:	86 2f       	mov	r24, r22
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	2a f0       	brmi	.+10     	; 0x1792 <__floatsisf+0x6c>
    1788:	9a 95       	dec	r25
    178a:	66 0f       	add	r22, r22
    178c:	77 1f       	adc	r23, r23
    178e:	88 1f       	adc	r24, r24
    1790:	da f7       	brpl	.-10     	; 0x1788 <__floatsisf+0x62>
    1792:	88 0f       	add	r24, r24
    1794:	96 95       	lsr	r25
    1796:	87 95       	ror	r24
    1798:	97 f9       	bld	r25, 7
    179a:	08 95       	ret

0000179c <__fp_cmp>:
    179c:	99 0f       	add	r25, r25
    179e:	00 08       	sbc	r0, r0
    17a0:	55 0f       	add	r21, r21
    17a2:	aa 0b       	sbc	r26, r26
    17a4:	e0 e8       	ldi	r30, 0x80	; 128
    17a6:	fe ef       	ldi	r31, 0xFE	; 254
    17a8:	16 16       	cp	r1, r22
    17aa:	17 06       	cpc	r1, r23
    17ac:	e8 07       	cpc	r30, r24
    17ae:	f9 07       	cpc	r31, r25
    17b0:	c0 f0       	brcs	.+48     	; 0x17e2 <__fp_cmp+0x46>
    17b2:	12 16       	cp	r1, r18
    17b4:	13 06       	cpc	r1, r19
    17b6:	e4 07       	cpc	r30, r20
    17b8:	f5 07       	cpc	r31, r21
    17ba:	98 f0       	brcs	.+38     	; 0x17e2 <__fp_cmp+0x46>
    17bc:	62 1b       	sub	r22, r18
    17be:	73 0b       	sbc	r23, r19
    17c0:	84 0b       	sbc	r24, r20
    17c2:	95 0b       	sbc	r25, r21
    17c4:	39 f4       	brne	.+14     	; 0x17d4 <__fp_cmp+0x38>
    17c6:	0a 26       	eor	r0, r26
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <__fp_cmp+0x46>
    17ca:	23 2b       	or	r18, r19
    17cc:	24 2b       	or	r18, r20
    17ce:	25 2b       	or	r18, r21
    17d0:	21 f4       	brne	.+8      	; 0x17da <__fp_cmp+0x3e>
    17d2:	08 95       	ret
    17d4:	0a 26       	eor	r0, r26
    17d6:	09 f4       	brne	.+2      	; 0x17da <__fp_cmp+0x3e>
    17d8:	a1 40       	sbci	r26, 0x01	; 1
    17da:	a6 95       	lsr	r26
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	81 1d       	adc	r24, r1
    17e0:	81 1d       	adc	r24, r1
    17e2:	08 95       	ret

000017e4 <__fp_inf>:
    17e4:	97 f9       	bld	r25, 7
    17e6:	9f 67       	ori	r25, 0x7F	; 127
    17e8:	80 e8       	ldi	r24, 0x80	; 128
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	08 95       	ret

000017f0 <__fp_nan>:
    17f0:	9f ef       	ldi	r25, 0xFF	; 255
    17f2:	80 ec       	ldi	r24, 0xC0	; 192
    17f4:	08 95       	ret

000017f6 <__fp_powser>:
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	1f 93       	push	r17
    17fc:	0f 93       	push	r16
    17fe:	ff 92       	push	r15
    1800:	ef 92       	push	r14
    1802:	df 92       	push	r13
    1804:	7b 01       	movw	r14, r22
    1806:	8c 01       	movw	r16, r24
    1808:	68 94       	set
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <__fp_powser+0x20>
    180c:	da 2e       	mov	r13, r26
    180e:	ef 01       	movw	r28, r30
    1810:	76 d0       	rcall	.+236    	; 0x18fe <__mulsf3x>
    1812:	fe 01       	movw	r30, r28
    1814:	e8 94       	clt
    1816:	a5 91       	lpm	r26, Z+
    1818:	25 91       	lpm	r18, Z+
    181a:	35 91       	lpm	r19, Z+
    181c:	45 91       	lpm	r20, Z+
    181e:	55 91       	lpm	r21, Z+
    1820:	ae f3       	brts	.-22     	; 0x180c <__fp_powser+0x16>
    1822:	ef 01       	movw	r28, r30
    1824:	5f de       	rcall	.-834    	; 0x14e4 <__addsf3x>
    1826:	fe 01       	movw	r30, r28
    1828:	97 01       	movw	r18, r14
    182a:	a8 01       	movw	r20, r16
    182c:	da 94       	dec	r13
    182e:	79 f7       	brne	.-34     	; 0x180e <__fp_powser+0x18>
    1830:	df 90       	pop	r13
    1832:	ef 90       	pop	r14
    1834:	ff 90       	pop	r15
    1836:	0f 91       	pop	r16
    1838:	1f 91       	pop	r17
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <__fp_pscA>:
    1840:	00 24       	eor	r0, r0
    1842:	0a 94       	dec	r0
    1844:	16 16       	cp	r1, r22
    1846:	17 06       	cpc	r1, r23
    1848:	18 06       	cpc	r1, r24
    184a:	09 06       	cpc	r0, r25
    184c:	08 95       	ret

0000184e <__fp_pscB>:
    184e:	00 24       	eor	r0, r0
    1850:	0a 94       	dec	r0
    1852:	12 16       	cp	r1, r18
    1854:	13 06       	cpc	r1, r19
    1856:	14 06       	cpc	r1, r20
    1858:	05 06       	cpc	r0, r21
    185a:	08 95       	ret

0000185c <__fp_round>:
    185c:	09 2e       	mov	r0, r25
    185e:	03 94       	inc	r0
    1860:	00 0c       	add	r0, r0
    1862:	11 f4       	brne	.+4      	; 0x1868 <__fp_round+0xc>
    1864:	88 23       	and	r24, r24
    1866:	52 f0       	brmi	.+20     	; 0x187c <__fp_round+0x20>
    1868:	bb 0f       	add	r27, r27
    186a:	40 f4       	brcc	.+16     	; 0x187c <__fp_round+0x20>
    186c:	bf 2b       	or	r27, r31
    186e:	11 f4       	brne	.+4      	; 0x1874 <__fp_round+0x18>
    1870:	60 ff       	sbrs	r22, 0
    1872:	04 c0       	rjmp	.+8      	; 0x187c <__fp_round+0x20>
    1874:	6f 5f       	subi	r22, 0xFF	; 255
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	8f 4f       	sbci	r24, 0xFF	; 255
    187a:	9f 4f       	sbci	r25, 0xFF	; 255
    187c:	08 95       	ret

0000187e <__fp_split3>:
    187e:	57 fd       	sbrc	r21, 7
    1880:	90 58       	subi	r25, 0x80	; 128
    1882:	44 0f       	add	r20, r20
    1884:	55 1f       	adc	r21, r21
    1886:	59 f0       	breq	.+22     	; 0x189e <__fp_splitA+0x10>
    1888:	5f 3f       	cpi	r21, 0xFF	; 255
    188a:	71 f0       	breq	.+28     	; 0x18a8 <__fp_splitA+0x1a>
    188c:	47 95       	ror	r20

0000188e <__fp_splitA>:
    188e:	88 0f       	add	r24, r24
    1890:	97 fb       	bst	r25, 7
    1892:	99 1f       	adc	r25, r25
    1894:	61 f0       	breq	.+24     	; 0x18ae <__fp_splitA+0x20>
    1896:	9f 3f       	cpi	r25, 0xFF	; 255
    1898:	79 f0       	breq	.+30     	; 0x18b8 <__fp_splitA+0x2a>
    189a:	87 95       	ror	r24
    189c:	08 95       	ret
    189e:	12 16       	cp	r1, r18
    18a0:	13 06       	cpc	r1, r19
    18a2:	14 06       	cpc	r1, r20
    18a4:	55 1f       	adc	r21, r21
    18a6:	f2 cf       	rjmp	.-28     	; 0x188c <__fp_split3+0xe>
    18a8:	46 95       	lsr	r20
    18aa:	f1 df       	rcall	.-30     	; 0x188e <__fp_splitA>
    18ac:	08 c0       	rjmp	.+16     	; 0x18be <__fp_splitA+0x30>
    18ae:	16 16       	cp	r1, r22
    18b0:	17 06       	cpc	r1, r23
    18b2:	18 06       	cpc	r1, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	f1 cf       	rjmp	.-30     	; 0x189a <__fp_splitA+0xc>
    18b8:	86 95       	lsr	r24
    18ba:	71 05       	cpc	r23, r1
    18bc:	61 05       	cpc	r22, r1
    18be:	08 94       	sec
    18c0:	08 95       	ret

000018c2 <__fp_zero>:
    18c2:	e8 94       	clt

000018c4 <__fp_szero>:
    18c4:	bb 27       	eor	r27, r27
    18c6:	66 27       	eor	r22, r22
    18c8:	77 27       	eor	r23, r23
    18ca:	cb 01       	movw	r24, r22
    18cc:	97 f9       	bld	r25, 7
    18ce:	08 95       	ret

000018d0 <__gesf2>:
    18d0:	65 df       	rcall	.-310    	; 0x179c <__fp_cmp>
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <__gesf2+0x6>
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	08 95       	ret

000018d8 <inverse>:
    18d8:	9b 01       	movw	r18, r22
    18da:	ac 01       	movw	r20, r24
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	80 e8       	ldi	r24, 0x80	; 128
    18e2:	9f e3       	ldi	r25, 0x3F	; 63
    18e4:	a8 c0       	rjmp	.+336    	; 0x1a36 <__divsf3>

000018e6 <__mulsf3>:
    18e6:	0b d0       	rcall	.+22     	; 0x18fe <__mulsf3x>
    18e8:	b9 cf       	rjmp	.-142    	; 0x185c <__fp_round>
    18ea:	aa df       	rcall	.-172    	; 0x1840 <__fp_pscA>
    18ec:	28 f0       	brcs	.+10     	; 0x18f8 <__mulsf3+0x12>
    18ee:	af df       	rcall	.-162    	; 0x184e <__fp_pscB>
    18f0:	18 f0       	brcs	.+6      	; 0x18f8 <__mulsf3+0x12>
    18f2:	95 23       	and	r25, r21
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <__mulsf3+0x12>
    18f6:	76 cf       	rjmp	.-276    	; 0x17e4 <__fp_inf>
    18f8:	7b cf       	rjmp	.-266    	; 0x17f0 <__fp_nan>
    18fa:	11 24       	eor	r1, r1
    18fc:	e3 cf       	rjmp	.-58     	; 0x18c4 <__fp_szero>

000018fe <__mulsf3x>:
    18fe:	bf df       	rcall	.-130    	; 0x187e <__fp_split3>
    1900:	a0 f3       	brcs	.-24     	; 0x18ea <__mulsf3+0x4>

00001902 <__mulsf3_pse>:
    1902:	95 9f       	mul	r25, r21
    1904:	d1 f3       	breq	.-12     	; 0x18fa <__mulsf3+0x14>
    1906:	95 0f       	add	r25, r21
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	55 1f       	adc	r21, r21
    190c:	62 9f       	mul	r22, r18
    190e:	f0 01       	movw	r30, r0
    1910:	72 9f       	mul	r23, r18
    1912:	bb 27       	eor	r27, r27
    1914:	f0 0d       	add	r31, r0
    1916:	b1 1d       	adc	r27, r1
    1918:	63 9f       	mul	r22, r19
    191a:	aa 27       	eor	r26, r26
    191c:	f0 0d       	add	r31, r0
    191e:	b1 1d       	adc	r27, r1
    1920:	aa 1f       	adc	r26, r26
    1922:	64 9f       	mul	r22, r20
    1924:	66 27       	eor	r22, r22
    1926:	b0 0d       	add	r27, r0
    1928:	a1 1d       	adc	r26, r1
    192a:	66 1f       	adc	r22, r22
    192c:	82 9f       	mul	r24, r18
    192e:	22 27       	eor	r18, r18
    1930:	b0 0d       	add	r27, r0
    1932:	a1 1d       	adc	r26, r1
    1934:	62 1f       	adc	r22, r18
    1936:	73 9f       	mul	r23, r19
    1938:	b0 0d       	add	r27, r0
    193a:	a1 1d       	adc	r26, r1
    193c:	62 1f       	adc	r22, r18
    193e:	83 9f       	mul	r24, r19
    1940:	a0 0d       	add	r26, r0
    1942:	61 1d       	adc	r22, r1
    1944:	22 1f       	adc	r18, r18
    1946:	74 9f       	mul	r23, r20
    1948:	33 27       	eor	r19, r19
    194a:	a0 0d       	add	r26, r0
    194c:	61 1d       	adc	r22, r1
    194e:	23 1f       	adc	r18, r19
    1950:	84 9f       	mul	r24, r20
    1952:	60 0d       	add	r22, r0
    1954:	21 1d       	adc	r18, r1
    1956:	82 2f       	mov	r24, r18
    1958:	76 2f       	mov	r23, r22
    195a:	6a 2f       	mov	r22, r26
    195c:	11 24       	eor	r1, r1
    195e:	9f 57       	subi	r25, 0x7F	; 127
    1960:	50 40       	sbci	r21, 0x00	; 0
    1962:	8a f0       	brmi	.+34     	; 0x1986 <__mulsf3_pse+0x84>
    1964:	e1 f0       	breq	.+56     	; 0x199e <__mulsf3_pse+0x9c>
    1966:	88 23       	and	r24, r24
    1968:	4a f0       	brmi	.+18     	; 0x197c <__mulsf3_pse+0x7a>
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	bb 1f       	adc	r27, r27
    1970:	66 1f       	adc	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	91 50       	subi	r25, 0x01	; 1
    1978:	50 40       	sbci	r21, 0x00	; 0
    197a:	a9 f7       	brne	.-22     	; 0x1966 <__mulsf3_pse+0x64>
    197c:	9e 3f       	cpi	r25, 0xFE	; 254
    197e:	51 05       	cpc	r21, r1
    1980:	70 f0       	brcs	.+28     	; 0x199e <__mulsf3_pse+0x9c>
    1982:	30 cf       	rjmp	.-416    	; 0x17e4 <__fp_inf>
    1984:	9f cf       	rjmp	.-194    	; 0x18c4 <__fp_szero>
    1986:	5f 3f       	cpi	r21, 0xFF	; 255
    1988:	ec f3       	brlt	.-6      	; 0x1984 <__mulsf3_pse+0x82>
    198a:	98 3e       	cpi	r25, 0xE8	; 232
    198c:	dc f3       	brlt	.-10     	; 0x1984 <__mulsf3_pse+0x82>
    198e:	86 95       	lsr	r24
    1990:	77 95       	ror	r23
    1992:	67 95       	ror	r22
    1994:	b7 95       	ror	r27
    1996:	f7 95       	ror	r31
    1998:	e7 95       	ror	r30
    199a:	9f 5f       	subi	r25, 0xFF	; 255
    199c:	c1 f7       	brne	.-16     	; 0x198e <__mulsf3_pse+0x8c>
    199e:	fe 2b       	or	r31, r30
    19a0:	88 0f       	add	r24, r24
    19a2:	91 1d       	adc	r25, r1
    19a4:	96 95       	lsr	r25
    19a6:	87 95       	ror	r24
    19a8:	97 f9       	bld	r25, 7
    19aa:	08 95       	ret
    19ac:	11 f4       	brne	.+4      	; 0x19b2 <__mulsf3_pse+0xb0>
    19ae:	0e f4       	brtc	.+2      	; 0x19b2 <__mulsf3_pse+0xb0>
    19b0:	1f cf       	rjmp	.-450    	; 0x17f0 <__fp_nan>
    19b2:	43 c0       	rjmp	.+134    	; 0x1a3a <__fp_mpack>

000019b4 <sqrt>:
    19b4:	6c df       	rcall	.-296    	; 0x188e <__fp_splitA>
    19b6:	d0 f3       	brcs	.-12     	; 0x19ac <__mulsf3_pse+0xaa>
    19b8:	99 23       	and	r25, r25
    19ba:	d9 f3       	breq	.-10     	; 0x19b2 <__mulsf3_pse+0xb0>
    19bc:	ce f3       	brts	.-14     	; 0x19b0 <__mulsf3_pse+0xae>
    19be:	9f 57       	subi	r25, 0x7F	; 127
    19c0:	55 0b       	sbc	r21, r21
    19c2:	87 ff       	sbrs	r24, 7
    19c4:	48 d0       	rcall	.+144    	; 0x1a56 <__fp_norm2>
    19c6:	00 24       	eor	r0, r0
    19c8:	a0 e6       	ldi	r26, 0x60	; 96
    19ca:	40 ea       	ldi	r20, 0xA0	; 160
    19cc:	90 01       	movw	r18, r0
    19ce:	80 58       	subi	r24, 0x80	; 128
    19d0:	56 95       	lsr	r21
    19d2:	97 95       	ror	r25
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <sqrt+0x2c>
    19d6:	80 5c       	subi	r24, 0xC0	; 192
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	88 1f       	adc	r24, r24
    19de:	20 f0       	brcs	.+8      	; 0x19e8 <sqrt+0x34>
    19e0:	26 17       	cp	r18, r22
    19e2:	37 07       	cpc	r19, r23
    19e4:	48 07       	cpc	r20, r24
    19e6:	30 f4       	brcc	.+12     	; 0x19f4 <sqrt+0x40>
    19e8:	62 1b       	sub	r22, r18
    19ea:	73 0b       	sbc	r23, r19
    19ec:	84 0b       	sbc	r24, r20
    19ee:	20 29       	or	r18, r0
    19f0:	31 29       	or	r19, r1
    19f2:	4a 2b       	or	r20, r26
    19f4:	a6 95       	lsr	r26
    19f6:	17 94       	ror	r1
    19f8:	07 94       	ror	r0
    19fa:	20 25       	eor	r18, r0
    19fc:	31 25       	eor	r19, r1
    19fe:	4a 27       	eor	r20, r26
    1a00:	58 f7       	brcc	.-42     	; 0x19d8 <sqrt+0x24>
    1a02:	66 0f       	add	r22, r22
    1a04:	77 1f       	adc	r23, r23
    1a06:	88 1f       	adc	r24, r24
    1a08:	20 f0       	brcs	.+8      	; 0x1a12 <sqrt+0x5e>
    1a0a:	26 17       	cp	r18, r22
    1a0c:	37 07       	cpc	r19, r23
    1a0e:	48 07       	cpc	r20, r24
    1a10:	30 f4       	brcc	.+12     	; 0x1a1e <sqrt+0x6a>
    1a12:	62 0b       	sbc	r22, r18
    1a14:	73 0b       	sbc	r23, r19
    1a16:	84 0b       	sbc	r24, r20
    1a18:	20 0d       	add	r18, r0
    1a1a:	31 1d       	adc	r19, r1
    1a1c:	41 1d       	adc	r20, r1
    1a1e:	a0 95       	com	r26
    1a20:	81 f7       	brne	.-32     	; 0x1a02 <sqrt+0x4e>
    1a22:	b9 01       	movw	r22, r18
    1a24:	84 2f       	mov	r24, r20
    1a26:	91 58       	subi	r25, 0x81	; 129
    1a28:	88 0f       	add	r24, r24
    1a2a:	96 95       	lsr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	08 95       	ret

00001a30 <square>:
    1a30:	9b 01       	movw	r18, r22
    1a32:	ac 01       	movw	r20, r24
    1a34:	58 cf       	rjmp	.-336    	; 0x18e6 <__mulsf3>

00001a36 <__divsf3>:
    1a36:	1a de       	rcall	.-972    	; 0x166c <__divsf3x>
    1a38:	11 cf       	rjmp	.-478    	; 0x185c <__fp_round>

00001a3a <__fp_mpack>:
    1a3a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a3c:	31 f0       	breq	.+12     	; 0x1a4a <__fp_mpack_finite+0xc>

00001a3e <__fp_mpack_finite>:
    1a3e:	91 50       	subi	r25, 0x01	; 1
    1a40:	20 f4       	brcc	.+8      	; 0x1a4a <__fp_mpack_finite+0xc>
    1a42:	87 95       	ror	r24
    1a44:	77 95       	ror	r23
    1a46:	67 95       	ror	r22
    1a48:	b7 95       	ror	r27
    1a4a:	88 0f       	add	r24, r24
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	96 95       	lsr	r25
    1a50:	87 95       	ror	r24
    1a52:	97 f9       	bld	r25, 7
    1a54:	08 95       	ret

00001a56 <__fp_norm2>:
    1a56:	91 50       	subi	r25, 0x01	; 1
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	66 0f       	add	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	88 1f       	adc	r24, r24
    1a60:	d2 f7       	brpl	.-12     	; 0x1a56 <__fp_norm2>
    1a62:	08 95       	ret

00001a64 <dtostrf>:
    1a64:	ef 92       	push	r14
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	e8 01       	movw	r28, r16
    1a70:	47 fd       	sbrc	r20, 7
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <dtostrf+0x14>
    1a74:	34 e0       	ldi	r19, 0x04	; 4
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <dtostrf+0x16>
    1a78:	34 e1       	ldi	r19, 0x14	; 20
    1a7a:	04 2e       	mov	r0, r20
    1a7c:	00 0c       	add	r0, r0
    1a7e:	55 0b       	sbc	r21, r21
    1a80:	57 ff       	sbrs	r21, 7
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <dtostrf+0x26>
    1a84:	51 95       	neg	r21
    1a86:	41 95       	neg	r20
    1a88:	51 09       	sbc	r21, r1
    1a8a:	e3 2e       	mov	r14, r19
    1a8c:	02 2f       	mov	r16, r18
    1a8e:	24 2f       	mov	r18, r20
    1a90:	ae 01       	movw	r20, r28
    1a92:	07 d0       	rcall	.+14     	; 0x1aa2 <dtoa_prf>
    1a94:	ce 01       	movw	r24, r28
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	ef 90       	pop	r14
    1aa0:	08 95       	ret

00001aa2 <dtoa_prf>:
    1aa2:	8f 92       	push	r8
    1aa4:	9f 92       	push	r9
    1aa6:	af 92       	push	r10
    1aa8:	bf 92       	push	r11
    1aaa:	cf 92       	push	r12
    1aac:	df 92       	push	r13
    1aae:	ef 92       	push	r14
    1ab0:	ff 92       	push	r15
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	29 97       	sbiw	r28, 0x09	; 9
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	6a 01       	movw	r12, r20
    1acc:	12 2f       	mov	r17, r18
    1ace:	b0 2e       	mov	r11, r16
    1ad0:	2b e3       	ldi	r18, 0x3B	; 59
    1ad2:	20 17       	cp	r18, r16
    1ad4:	20 f0       	brcs	.+8      	; 0x1ade <dtoa_prf+0x3c>
    1ad6:	ff 24       	eor	r15, r15
    1ad8:	f3 94       	inc	r15
    1ada:	f0 0e       	add	r15, r16
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <dtoa_prf+0x40>
    1ade:	2c e3       	ldi	r18, 0x3C	; 60
    1ae0:	f2 2e       	mov	r15, r18
    1ae2:	0f 2d       	mov	r16, r15
    1ae4:	27 e0       	ldi	r18, 0x07	; 7
    1ae6:	ae 01       	movw	r20, r28
    1ae8:	4f 5f       	subi	r20, 0xFF	; 255
    1aea:	5f 4f       	sbci	r21, 0xFF	; 255
    1aec:	50 d1       	rcall	.+672    	; 0x1d8e <__ftoa_engine>
    1aee:	bc 01       	movw	r22, r24
    1af0:	49 81       	ldd	r20, Y+1	; 0x01
    1af2:	84 2f       	mov	r24, r20
    1af4:	89 70       	andi	r24, 0x09	; 9
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <dtoa_prf+0x64>
    1afa:	e1 fc       	sbrc	r14, 1
    1afc:	06 c0       	rjmp	.+12     	; 0x1b0a <dtoa_prf+0x68>
    1afe:	e0 fe       	sbrs	r14, 0
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <dtoa_prf+0x6c>
    1b02:	90 e2       	ldi	r25, 0x20	; 32
    1b04:	05 c0       	rjmp	.+10     	; 0x1b10 <dtoa_prf+0x6e>
    1b06:	9d e2       	ldi	r25, 0x2D	; 45
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <dtoa_prf+0x6e>
    1b0a:	9b e2       	ldi	r25, 0x2B	; 43
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <dtoa_prf+0x6e>
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	5e 2d       	mov	r21, r14
    1b12:	50 71       	andi	r21, 0x10	; 16
    1b14:	43 ff       	sbrs	r20, 3
    1b16:	3c c0       	rjmp	.+120    	; 0x1b90 <dtoa_prf+0xee>
    1b18:	91 11       	cpse	r25, r1
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <dtoa_prf+0x7e>
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <dtoa_prf+0x80>
    1b20:	84 e0       	ldi	r24, 0x04	; 4
    1b22:	81 17       	cp	r24, r17
    1b24:	18 f4       	brcc	.+6      	; 0x1b2c <dtoa_prf+0x8a>
    1b26:	21 2f       	mov	r18, r17
    1b28:	28 1b       	sub	r18, r24
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <dtoa_prf+0x8c>
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	51 11       	cpse	r21, r1
    1b30:	0b c0       	rjmp	.+22     	; 0x1b48 <dtoa_prf+0xa6>
    1b32:	f6 01       	movw	r30, r12
    1b34:	82 2f       	mov	r24, r18
    1b36:	30 e2       	ldi	r19, 0x20	; 32
    1b38:	88 23       	and	r24, r24
    1b3a:	19 f0       	breq	.+6      	; 0x1b42 <dtoa_prf+0xa0>
    1b3c:	31 93       	st	Z+, r19
    1b3e:	81 50       	subi	r24, 0x01	; 1
    1b40:	fb cf       	rjmp	.-10     	; 0x1b38 <dtoa_prf+0x96>
    1b42:	c2 0e       	add	r12, r18
    1b44:	d1 1c       	adc	r13, r1
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	99 23       	and	r25, r25
    1b4a:	29 f0       	breq	.+10     	; 0x1b56 <dtoa_prf+0xb4>
    1b4c:	d6 01       	movw	r26, r12
    1b4e:	9c 93       	st	X, r25
    1b50:	f6 01       	movw	r30, r12
    1b52:	31 96       	adiw	r30, 0x01	; 1
    1b54:	6f 01       	movw	r12, r30
    1b56:	c6 01       	movw	r24, r12
    1b58:	03 96       	adiw	r24, 0x03	; 3
    1b5a:	e2 fe       	sbrs	r14, 2
    1b5c:	0a c0       	rjmp	.+20     	; 0x1b72 <dtoa_prf+0xd0>
    1b5e:	3e e4       	ldi	r19, 0x4E	; 78
    1b60:	d6 01       	movw	r26, r12
    1b62:	3c 93       	st	X, r19
    1b64:	41 e4       	ldi	r20, 0x41	; 65
    1b66:	11 96       	adiw	r26, 0x01	; 1
    1b68:	4c 93       	st	X, r20
    1b6a:	11 97       	sbiw	r26, 0x01	; 1
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	3c 93       	st	X, r19
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <dtoa_prf+0xdc>
    1b72:	3e e6       	ldi	r19, 0x6E	; 110
    1b74:	f6 01       	movw	r30, r12
    1b76:	30 83       	st	Z, r19
    1b78:	41 e6       	ldi	r20, 0x61	; 97
    1b7a:	41 83       	std	Z+1, r20	; 0x01
    1b7c:	32 83       	std	Z+2, r19	; 0x02
    1b7e:	fc 01       	movw	r30, r24
    1b80:	32 2f       	mov	r19, r18
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	33 23       	and	r19, r19
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <dtoa_prf+0xe8>
    1b88:	42 c0       	rjmp	.+132    	; 0x1c0e <dtoa_prf+0x16c>
    1b8a:	41 93       	st	Z+, r20
    1b8c:	31 50       	subi	r19, 0x01	; 1
    1b8e:	fa cf       	rjmp	.-12     	; 0x1b84 <dtoa_prf+0xe2>
    1b90:	42 ff       	sbrs	r20, 2
    1b92:	44 c0       	rjmp	.+136    	; 0x1c1c <dtoa_prf+0x17a>
    1b94:	91 11       	cpse	r25, r1
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <dtoa_prf+0xfa>
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <dtoa_prf+0xfc>
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
    1b9e:	81 17       	cp	r24, r17
    1ba0:	18 f4       	brcc	.+6      	; 0x1ba8 <dtoa_prf+0x106>
    1ba2:	21 2f       	mov	r18, r17
    1ba4:	28 1b       	sub	r18, r24
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <dtoa_prf+0x108>
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	51 11       	cpse	r21, r1
    1bac:	0b c0       	rjmp	.+22     	; 0x1bc4 <dtoa_prf+0x122>
    1bae:	f6 01       	movw	r30, r12
    1bb0:	82 2f       	mov	r24, r18
    1bb2:	30 e2       	ldi	r19, 0x20	; 32
    1bb4:	88 23       	and	r24, r24
    1bb6:	19 f0       	breq	.+6      	; 0x1bbe <dtoa_prf+0x11c>
    1bb8:	31 93       	st	Z+, r19
    1bba:	81 50       	subi	r24, 0x01	; 1
    1bbc:	fb cf       	rjmp	.-10     	; 0x1bb4 <dtoa_prf+0x112>
    1bbe:	c2 0e       	add	r12, r18
    1bc0:	d1 1c       	adc	r13, r1
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	99 23       	and	r25, r25
    1bc6:	29 f0       	breq	.+10     	; 0x1bd2 <dtoa_prf+0x130>
    1bc8:	d6 01       	movw	r26, r12
    1bca:	9c 93       	st	X, r25
    1bcc:	f6 01       	movw	r30, r12
    1bce:	31 96       	adiw	r30, 0x01	; 1
    1bd0:	6f 01       	movw	r12, r30
    1bd2:	c6 01       	movw	r24, r12
    1bd4:	03 96       	adiw	r24, 0x03	; 3
    1bd6:	e2 fe       	sbrs	r14, 2
    1bd8:	0b c0       	rjmp	.+22     	; 0x1bf0 <dtoa_prf+0x14e>
    1bda:	39 e4       	ldi	r19, 0x49	; 73
    1bdc:	d6 01       	movw	r26, r12
    1bde:	3c 93       	st	X, r19
    1be0:	3e e4       	ldi	r19, 0x4E	; 78
    1be2:	11 96       	adiw	r26, 0x01	; 1
    1be4:	3c 93       	st	X, r19
    1be6:	11 97       	sbiw	r26, 0x01	; 1
    1be8:	36 e4       	ldi	r19, 0x46	; 70
    1bea:	12 96       	adiw	r26, 0x02	; 2
    1bec:	3c 93       	st	X, r19
    1bee:	07 c0       	rjmp	.+14     	; 0x1bfe <dtoa_prf+0x15c>
    1bf0:	39 e6       	ldi	r19, 0x69	; 105
    1bf2:	f6 01       	movw	r30, r12
    1bf4:	30 83       	st	Z, r19
    1bf6:	3e e6       	ldi	r19, 0x6E	; 110
    1bf8:	31 83       	std	Z+1, r19	; 0x01
    1bfa:	36 e6       	ldi	r19, 0x66	; 102
    1bfc:	32 83       	std	Z+2, r19	; 0x02
    1bfe:	fc 01       	movw	r30, r24
    1c00:	32 2f       	mov	r19, r18
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	33 23       	and	r19, r19
    1c06:	19 f0       	breq	.+6      	; 0x1c0e <dtoa_prf+0x16c>
    1c08:	41 93       	st	Z+, r20
    1c0a:	31 50       	subi	r19, 0x01	; 1
    1c0c:	fb cf       	rjmp	.-10     	; 0x1c04 <dtoa_prf+0x162>
    1c0e:	fc 01       	movw	r30, r24
    1c10:	e2 0f       	add	r30, r18
    1c12:	f1 1d       	adc	r31, r1
    1c14:	10 82       	st	Z, r1
    1c16:	8e ef       	ldi	r24, 0xFE	; 254
    1c18:	9f ef       	ldi	r25, 0xFF	; 255
    1c1a:	a6 c0       	rjmp	.+332    	; 0x1d68 <dtoa_prf+0x2c6>
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	91 11       	cpse	r25, r1
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <dtoa_prf+0x186>
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	16 16       	cp	r1, r22
    1c2a:	17 06       	cpc	r1, r23
    1c2c:	1c f4       	brge	.+6      	; 0x1c34 <dtoa_prf+0x192>
    1c2e:	fb 01       	movw	r30, r22
    1c30:	31 96       	adiw	r30, 0x01	; 1
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <dtoa_prf+0x196>
    1c34:	e1 e0       	ldi	r30, 0x01	; 1
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	2e 0f       	add	r18, r30
    1c3a:	3f 1f       	adc	r19, r31
    1c3c:	bb 20       	and	r11, r11
    1c3e:	21 f0       	breq	.+8      	; 0x1c48 <dtoa_prf+0x1a6>
    1c40:	eb 2d       	mov	r30, r11
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	31 96       	adiw	r30, 0x01	; 1
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <dtoa_prf+0x1aa>
    1c48:	e0 e0       	ldi	r30, 0x00	; 0
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	2e 0f       	add	r18, r30
    1c4e:	3f 1f       	adc	r19, r31
    1c50:	e1 2f       	mov	r30, r17
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	2e 17       	cp	r18, r30
    1c56:	3f 07       	cpc	r19, r31
    1c58:	1c f4       	brge	.+6      	; 0x1c60 <dtoa_prf+0x1be>
    1c5a:	12 1b       	sub	r17, r18
    1c5c:	21 2f       	mov	r18, r17
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <dtoa_prf+0x1c0>
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	8e 2d       	mov	r24, r14
    1c64:	88 71       	andi	r24, 0x18	; 24
    1c66:	59 f4       	brne	.+22     	; 0x1c7e <dtoa_prf+0x1dc>
    1c68:	f6 01       	movw	r30, r12
    1c6a:	82 2f       	mov	r24, r18
    1c6c:	30 e2       	ldi	r19, 0x20	; 32
    1c6e:	88 23       	and	r24, r24
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <dtoa_prf+0x1d6>
    1c72:	31 93       	st	Z+, r19
    1c74:	81 50       	subi	r24, 0x01	; 1
    1c76:	fb cf       	rjmp	.-10     	; 0x1c6e <dtoa_prf+0x1cc>
    1c78:	c2 0e       	add	r12, r18
    1c7a:	d1 1c       	adc	r13, r1
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	99 23       	and	r25, r25
    1c80:	29 f0       	breq	.+10     	; 0x1c8c <dtoa_prf+0x1ea>
    1c82:	d6 01       	movw	r26, r12
    1c84:	9c 93       	st	X, r25
    1c86:	f6 01       	movw	r30, r12
    1c88:	31 96       	adiw	r30, 0x01	; 1
    1c8a:	6f 01       	movw	r12, r30
    1c8c:	51 11       	cpse	r21, r1
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <dtoa_prf+0x204>
    1c90:	f6 01       	movw	r30, r12
    1c92:	82 2f       	mov	r24, r18
    1c94:	90 e3       	ldi	r25, 0x30	; 48
    1c96:	88 23       	and	r24, r24
    1c98:	19 f0       	breq	.+6      	; 0x1ca0 <dtoa_prf+0x1fe>
    1c9a:	91 93       	st	Z+, r25
    1c9c:	81 50       	subi	r24, 0x01	; 1
    1c9e:	fb cf       	rjmp	.-10     	; 0x1c96 <dtoa_prf+0x1f4>
    1ca0:	c2 0e       	add	r12, r18
    1ca2:	d1 1c       	adc	r13, r1
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	0f 2d       	mov	r16, r15
    1ca8:	06 0f       	add	r16, r22
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	34 2f       	mov	r19, r20
    1cae:	30 71       	andi	r19, 0x10	; 16
    1cb0:	44 ff       	sbrs	r20, 4
    1cb2:	03 c0       	rjmp	.+6      	; 0x1cba <dtoa_prf+0x218>
    1cb4:	91 33       	cpi	r25, 0x31	; 49
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <dtoa_prf+0x218>
    1cb8:	01 50       	subi	r16, 0x01	; 1
    1cba:	10 16       	cp	r1, r16
    1cbc:	24 f4       	brge	.+8      	; 0x1cc6 <dtoa_prf+0x224>
    1cbe:	09 30       	cpi	r16, 0x09	; 9
    1cc0:	18 f0       	brcs	.+6      	; 0x1cc8 <dtoa_prf+0x226>
    1cc2:	08 e0       	ldi	r16, 0x08	; 8
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <dtoa_prf+0x226>
    1cc6:	01 e0       	ldi	r16, 0x01	; 1
    1cc8:	ab 01       	movw	r20, r22
    1cca:	77 ff       	sbrs	r23, 7
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <dtoa_prf+0x230>
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	fb 01       	movw	r30, r22
    1cd4:	e4 1b       	sub	r30, r20
    1cd6:	f5 0b       	sbc	r31, r21
    1cd8:	a1 e0       	ldi	r26, 0x01	; 1
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	ac 0f       	add	r26, r28
    1cde:	bd 1f       	adc	r27, r29
    1ce0:	ea 0f       	add	r30, r26
    1ce2:	fb 1f       	adc	r31, r27
    1ce4:	8e e2       	ldi	r24, 0x2E	; 46
    1ce6:	a8 2e       	mov	r10, r24
    1ce8:	4b 01       	movw	r8, r22
    1cea:	80 1a       	sub	r8, r16
    1cec:	91 08       	sbc	r9, r1
    1cee:	0b 2d       	mov	r16, r11
    1cf0:	10 e0       	ldi	r17, 0x00	; 0
    1cf2:	11 95       	neg	r17
    1cf4:	01 95       	neg	r16
    1cf6:	11 09       	sbc	r17, r1
    1cf8:	4f 3f       	cpi	r20, 0xFF	; 255
    1cfa:	bf ef       	ldi	r27, 0xFF	; 255
    1cfc:	5b 07       	cpc	r21, r27
    1cfe:	21 f4       	brne	.+8      	; 0x1d08 <dtoa_prf+0x266>
    1d00:	d6 01       	movw	r26, r12
    1d02:	ac 92       	st	X, r10
    1d04:	11 96       	adiw	r26, 0x01	; 1
    1d06:	6d 01       	movw	r12, r26
    1d08:	64 17       	cp	r22, r20
    1d0a:	75 07       	cpc	r23, r21
    1d0c:	2c f0       	brlt	.+10     	; 0x1d18 <dtoa_prf+0x276>
    1d0e:	84 16       	cp	r8, r20
    1d10:	95 06       	cpc	r9, r21
    1d12:	14 f4       	brge	.+4      	; 0x1d18 <dtoa_prf+0x276>
    1d14:	81 81       	ldd	r24, Z+1	; 0x01
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <dtoa_prf+0x278>
    1d18:	80 e3       	ldi	r24, 0x30	; 48
    1d1a:	41 50       	subi	r20, 0x01	; 1
    1d1c:	51 09       	sbc	r21, r1
    1d1e:	31 96       	adiw	r30, 0x01	; 1
    1d20:	d6 01       	movw	r26, r12
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	7d 01       	movw	r14, r26
    1d26:	40 17       	cp	r20, r16
    1d28:	51 07       	cpc	r21, r17
    1d2a:	24 f0       	brlt	.+8      	; 0x1d34 <dtoa_prf+0x292>
    1d2c:	d6 01       	movw	r26, r12
    1d2e:	8c 93       	st	X, r24
    1d30:	67 01       	movw	r12, r14
    1d32:	e2 cf       	rjmp	.-60     	; 0x1cf8 <dtoa_prf+0x256>
    1d34:	64 17       	cp	r22, r20
    1d36:	75 07       	cpc	r23, r21
    1d38:	39 f4       	brne	.+14     	; 0x1d48 <dtoa_prf+0x2a6>
    1d3a:	96 33       	cpi	r25, 0x36	; 54
    1d3c:	20 f4       	brcc	.+8      	; 0x1d46 <dtoa_prf+0x2a4>
    1d3e:	95 33       	cpi	r25, 0x35	; 53
    1d40:	19 f4       	brne	.+6      	; 0x1d48 <dtoa_prf+0x2a6>
    1d42:	31 11       	cpse	r19, r1
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <dtoa_prf+0x2a6>
    1d46:	81 e3       	ldi	r24, 0x31	; 49
    1d48:	f6 01       	movw	r30, r12
    1d4a:	80 83       	st	Z, r24
    1d4c:	f7 01       	movw	r30, r14
    1d4e:	82 2f       	mov	r24, r18
    1d50:	90 e2       	ldi	r25, 0x20	; 32
    1d52:	88 23       	and	r24, r24
    1d54:	19 f0       	breq	.+6      	; 0x1d5c <dtoa_prf+0x2ba>
    1d56:	91 93       	st	Z+, r25
    1d58:	81 50       	subi	r24, 0x01	; 1
    1d5a:	fb cf       	rjmp	.-10     	; 0x1d52 <dtoa_prf+0x2b0>
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	e2 0f       	add	r30, r18
    1d60:	f1 1d       	adc	r31, r1
    1d62:	10 82       	st	Z, r1
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	29 96       	adiw	r28, 0x09	; 9
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	9f 90       	pop	r9
    1d8a:	8f 90       	pop	r8
    1d8c:	08 95       	ret

00001d8e <__ftoa_engine>:
    1d8e:	28 30       	cpi	r18, 0x08	; 8
    1d90:	08 f0       	brcs	.+2      	; 0x1d94 <__ftoa_engine+0x6>
    1d92:	27 e0       	ldi	r18, 0x07	; 7
    1d94:	33 27       	eor	r19, r19
    1d96:	da 01       	movw	r26, r20
    1d98:	99 0f       	add	r25, r25
    1d9a:	31 1d       	adc	r19, r1
    1d9c:	87 fd       	sbrc	r24, 7
    1d9e:	91 60       	ori	r25, 0x01	; 1
    1da0:	00 96       	adiw	r24, 0x00	; 0
    1da2:	61 05       	cpc	r22, r1
    1da4:	71 05       	cpc	r23, r1
    1da6:	39 f4       	brne	.+14     	; 0x1db6 <__ftoa_engine+0x28>
    1da8:	32 60       	ori	r19, 0x02	; 2
    1daa:	2e 5f       	subi	r18, 0xFE	; 254
    1dac:	3d 93       	st	X+, r19
    1dae:	30 e3       	ldi	r19, 0x30	; 48
    1db0:	2a 95       	dec	r18
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <__ftoa_engine+0x1e>
    1db4:	08 95       	ret
    1db6:	9f 3f       	cpi	r25, 0xFF	; 255
    1db8:	30 f0       	brcs	.+12     	; 0x1dc6 <__ftoa_engine+0x38>
    1dba:	80 38       	cpi	r24, 0x80	; 128
    1dbc:	71 05       	cpc	r23, r1
    1dbe:	61 05       	cpc	r22, r1
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <__ftoa_engine+0x36>
    1dc2:	3c 5f       	subi	r19, 0xFC	; 252
    1dc4:	3c 5f       	subi	r19, 0xFC	; 252
    1dc6:	3d 93       	st	X+, r19
    1dc8:	91 30       	cpi	r25, 0x01	; 1
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <__ftoa_engine+0x40>
    1dcc:	80 68       	ori	r24, 0x80	; 128
    1dce:	91 1d       	adc	r25, r1
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	1f 93       	push	r17
    1dd6:	0f 93       	push	r16
    1dd8:	ff 92       	push	r15
    1dda:	ef 92       	push	r14
    1ddc:	19 2f       	mov	r17, r25
    1dde:	98 7f       	andi	r25, 0xF8	; 248
    1de0:	96 95       	lsr	r25
    1de2:	e9 2f       	mov	r30, r25
    1de4:	96 95       	lsr	r25
    1de6:	96 95       	lsr	r25
    1de8:	e9 0f       	add	r30, r25
    1dea:	ff 27       	eor	r31, r31
    1dec:	e4 59       	subi	r30, 0x94	; 148
    1dee:	fe 4f       	sbci	r31, 0xFE	; 254
    1df0:	99 27       	eor	r25, r25
    1df2:	33 27       	eor	r19, r19
    1df4:	ee 24       	eor	r14, r14
    1df6:	ff 24       	eor	r15, r15
    1df8:	a7 01       	movw	r20, r14
    1dfa:	e7 01       	movw	r28, r14
    1dfc:	05 90       	lpm	r0, Z+
    1dfe:	08 94       	sec
    1e00:	07 94       	ror	r0
    1e02:	28 f4       	brcc	.+10     	; 0x1e0e <__ftoa_engine+0x80>
    1e04:	36 0f       	add	r19, r22
    1e06:	e7 1e       	adc	r14, r23
    1e08:	f8 1e       	adc	r15, r24
    1e0a:	49 1f       	adc	r20, r25
    1e0c:	51 1d       	adc	r21, r1
    1e0e:	66 0f       	add	r22, r22
    1e10:	77 1f       	adc	r23, r23
    1e12:	88 1f       	adc	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	06 94       	lsr	r0
    1e18:	a1 f7       	brne	.-24     	; 0x1e02 <__ftoa_engine+0x74>
    1e1a:	05 90       	lpm	r0, Z+
    1e1c:	07 94       	ror	r0
    1e1e:	28 f4       	brcc	.+10     	; 0x1e2a <__ftoa_engine+0x9c>
    1e20:	e7 0e       	add	r14, r23
    1e22:	f8 1e       	adc	r15, r24
    1e24:	49 1f       	adc	r20, r25
    1e26:	56 1f       	adc	r21, r22
    1e28:	c1 1d       	adc	r28, r1
    1e2a:	77 0f       	add	r23, r23
    1e2c:	88 1f       	adc	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	66 1f       	adc	r22, r22
    1e32:	06 94       	lsr	r0
    1e34:	a1 f7       	brne	.-24     	; 0x1e1e <__ftoa_engine+0x90>
    1e36:	05 90       	lpm	r0, Z+
    1e38:	07 94       	ror	r0
    1e3a:	28 f4       	brcc	.+10     	; 0x1e46 <__ftoa_engine+0xb8>
    1e3c:	f8 0e       	add	r15, r24
    1e3e:	49 1f       	adc	r20, r25
    1e40:	56 1f       	adc	r21, r22
    1e42:	c7 1f       	adc	r28, r23
    1e44:	d1 1d       	adc	r29, r1
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	66 1f       	adc	r22, r22
    1e4c:	77 1f       	adc	r23, r23
    1e4e:	06 94       	lsr	r0
    1e50:	a1 f7       	brne	.-24     	; 0x1e3a <__ftoa_engine+0xac>
    1e52:	05 90       	lpm	r0, Z+
    1e54:	07 94       	ror	r0
    1e56:	20 f4       	brcc	.+8      	; 0x1e60 <__ftoa_engine+0xd2>
    1e58:	49 0f       	add	r20, r25
    1e5a:	56 1f       	adc	r21, r22
    1e5c:	c7 1f       	adc	r28, r23
    1e5e:	d8 1f       	adc	r29, r24
    1e60:	99 0f       	add	r25, r25
    1e62:	66 1f       	adc	r22, r22
    1e64:	77 1f       	adc	r23, r23
    1e66:	88 1f       	adc	r24, r24
    1e68:	06 94       	lsr	r0
    1e6a:	a9 f7       	brne	.-22     	; 0x1e56 <__ftoa_engine+0xc8>
    1e6c:	84 91       	lpm	r24, Z
    1e6e:	10 95       	com	r17
    1e70:	17 70       	andi	r17, 0x07	; 7
    1e72:	41 f0       	breq	.+16     	; 0x1e84 <__ftoa_engine+0xf6>
    1e74:	d6 95       	lsr	r29
    1e76:	c7 95       	ror	r28
    1e78:	57 95       	ror	r21
    1e7a:	47 95       	ror	r20
    1e7c:	f7 94       	ror	r15
    1e7e:	e7 94       	ror	r14
    1e80:	1a 95       	dec	r17
    1e82:	c1 f7       	brne	.-16     	; 0x1e74 <__ftoa_engine+0xe6>
    1e84:	e2 e1       	ldi	r30, 0x12	; 18
    1e86:	f1 e0       	ldi	r31, 0x01	; 1
    1e88:	68 94       	set
    1e8a:	15 90       	lpm	r1, Z+
    1e8c:	15 91       	lpm	r17, Z+
    1e8e:	35 91       	lpm	r19, Z+
    1e90:	65 91       	lpm	r22, Z+
    1e92:	95 91       	lpm	r25, Z+
    1e94:	05 90       	lpm	r0, Z+
    1e96:	7f e2       	ldi	r23, 0x2F	; 47
    1e98:	73 95       	inc	r23
    1e9a:	e1 18       	sub	r14, r1
    1e9c:	f1 0a       	sbc	r15, r17
    1e9e:	43 0b       	sbc	r20, r19
    1ea0:	56 0b       	sbc	r21, r22
    1ea2:	c9 0b       	sbc	r28, r25
    1ea4:	d0 09       	sbc	r29, r0
    1ea6:	c0 f7       	brcc	.-16     	; 0x1e98 <__ftoa_engine+0x10a>
    1ea8:	e1 0c       	add	r14, r1
    1eaa:	f1 1e       	adc	r15, r17
    1eac:	43 1f       	adc	r20, r19
    1eae:	56 1f       	adc	r21, r22
    1eb0:	c9 1f       	adc	r28, r25
    1eb2:	d0 1d       	adc	r29, r0
    1eb4:	7e f4       	brtc	.+30     	; 0x1ed4 <__ftoa_engine+0x146>
    1eb6:	70 33       	cpi	r23, 0x30	; 48
    1eb8:	11 f4       	brne	.+4      	; 0x1ebe <__ftoa_engine+0x130>
    1eba:	8a 95       	dec	r24
    1ebc:	e6 cf       	rjmp	.-52     	; 0x1e8a <__ftoa_engine+0xfc>
    1ebe:	e8 94       	clt
    1ec0:	01 50       	subi	r16, 0x01	; 1
    1ec2:	30 f0       	brcs	.+12     	; 0x1ed0 <__ftoa_engine+0x142>
    1ec4:	08 0f       	add	r16, r24
    1ec6:	0a f4       	brpl	.+2      	; 0x1eca <__ftoa_engine+0x13c>
    1ec8:	00 27       	eor	r16, r16
    1eca:	02 17       	cp	r16, r18
    1ecc:	08 f4       	brcc	.+2      	; 0x1ed0 <__ftoa_engine+0x142>
    1ece:	20 2f       	mov	r18, r16
    1ed0:	23 95       	inc	r18
    1ed2:	02 2f       	mov	r16, r18
    1ed4:	7a 33       	cpi	r23, 0x3A	; 58
    1ed6:	28 f0       	brcs	.+10     	; 0x1ee2 <__ftoa_engine+0x154>
    1ed8:	79 e3       	ldi	r23, 0x39	; 57
    1eda:	7d 93       	st	X+, r23
    1edc:	2a 95       	dec	r18
    1ede:	e9 f7       	brne	.-6      	; 0x1eda <__ftoa_engine+0x14c>
    1ee0:	10 c0       	rjmp	.+32     	; 0x1f02 <__ftoa_engine+0x174>
    1ee2:	7d 93       	st	X+, r23
    1ee4:	2a 95       	dec	r18
    1ee6:	89 f6       	brne	.-94     	; 0x1e8a <__ftoa_engine+0xfc>
    1ee8:	06 94       	lsr	r0
    1eea:	97 95       	ror	r25
    1eec:	67 95       	ror	r22
    1eee:	37 95       	ror	r19
    1ef0:	17 95       	ror	r17
    1ef2:	17 94       	ror	r1
    1ef4:	e1 18       	sub	r14, r1
    1ef6:	f1 0a       	sbc	r15, r17
    1ef8:	43 0b       	sbc	r20, r19
    1efa:	56 0b       	sbc	r21, r22
    1efc:	c9 0b       	sbc	r28, r25
    1efe:	d0 09       	sbc	r29, r0
    1f00:	98 f0       	brcs	.+38     	; 0x1f28 <__ftoa_engine+0x19a>
    1f02:	23 95       	inc	r18
    1f04:	7e 91       	ld	r23, -X
    1f06:	73 95       	inc	r23
    1f08:	7a 33       	cpi	r23, 0x3A	; 58
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <__ftoa_engine+0x180>
    1f0c:	70 e3       	ldi	r23, 0x30	; 48
    1f0e:	7c 93       	st	X, r23
    1f10:	20 13       	cpse	r18, r16
    1f12:	b8 f7       	brcc	.-18     	; 0x1f02 <__ftoa_engine+0x174>
    1f14:	7e 91       	ld	r23, -X
    1f16:	70 61       	ori	r23, 0x10	; 16
    1f18:	7d 93       	st	X+, r23
    1f1a:	30 f0       	brcs	.+12     	; 0x1f28 <__ftoa_engine+0x19a>
    1f1c:	83 95       	inc	r24
    1f1e:	71 e3       	ldi	r23, 0x31	; 49
    1f20:	7d 93       	st	X+, r23
    1f22:	70 e3       	ldi	r23, 0x30	; 48
    1f24:	2a 95       	dec	r18
    1f26:	e1 f7       	brne	.-8      	; 0x1f20 <__ftoa_engine+0x192>
    1f28:	11 24       	eor	r1, r1
    1f2a:	ef 90       	pop	r14
    1f2c:	ff 90       	pop	r15
    1f2e:	0f 91       	pop	r16
    1f30:	1f 91       	pop	r17
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	99 27       	eor	r25, r25
    1f38:	87 fd       	sbrc	r24, 7
    1f3a:	90 95       	com	r25
    1f3c:	08 95       	ret

00001f3e <_exit>:
    1f3e:	f8 94       	cli

00001f40 <__stop_program>:
    1f40:	ff cf       	rjmp	.-2      	; 0x1f40 <__stop_program>
