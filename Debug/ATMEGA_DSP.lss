
ATMEGA_DSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800200  00001e18  00001eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d8  008003dc  008003dc  00002088  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d3c  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120b  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001775  00000000  00000000  000062a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  00007a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c23  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000196b  00000000  00000000  00008d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000a6fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c2       	rjmp	.+1290   	; 0x50c <__ctors_end>
       2:	00 00       	nop
       4:	a3 c2       	rjmp	.+1350   	; 0x54c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c2       	rjmp	.+1346   	; 0x54c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c2       	rjmp	.+1342   	; 0x54c <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_4>
      14:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_5>
      18:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_6>
      1c:	97 c2       	rjmp	.+1326   	; 0x54c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c2       	rjmp	.+1322   	; 0x54c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c2       	rjmp	.+1318   	; 0x54c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c2       	rjmp	.+1314   	; 0x54c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c2       	rjmp	.+1310   	; 0x54c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c2       	rjmp	.+1306   	; 0x54c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c2       	rjmp	.+1302   	; 0x54c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c2       	rjmp	.+1298   	; 0x54c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c2       	rjmp	.+1294   	; 0x54c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c2       	rjmp	.+1290   	; 0x54c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c2       	rjmp	.+1286   	; 0x54c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c2       	rjmp	.+1282   	; 0x54c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c2       	rjmp	.+1278   	; 0x54c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c2       	rjmp	.+1274   	; 0x54c <__bad_interrupt>
      52:	00 00       	nop
      54:	c0 c7       	rjmp	.+3968   	; 0xfd6 <__vector_21>
      56:	00 00       	nop
      58:	79 c2       	rjmp	.+1266   	; 0x54c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	77 c2       	rjmp	.+1262   	; 0x54c <__bad_interrupt>
      5e:	00 00       	nop
      60:	75 c2       	rjmp	.+1258   	; 0x54c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c2       	rjmp	.+1254   	; 0x54c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c2       	rjmp	.+1250   	; 0x54c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c2       	rjmp	.+1246   	; 0x54c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c2       	rjmp	.+1242   	; 0x54c <__bad_interrupt>
      72:	00 00       	nop
      74:	ee c7       	rjmp	.+4060   	; 0x1052 <__vector_29>
      76:	00 00       	nop
      78:	69 c2       	rjmp	.+1234   	; 0x54c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c2       	rjmp	.+1230   	; 0x54c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c2       	rjmp	.+1226   	; 0x54c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c2       	rjmp	.+1222   	; 0x54c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c2       	rjmp	.+1218   	; 0x54c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c2       	rjmp	.+1214   	; 0x54c <__bad_interrupt>
      8e:	00 00       	nop
      90:	5d c2       	rjmp	.+1210   	; 0x54c <__bad_interrupt>
      92:	00 00       	nop
      94:	5b c2       	rjmp	.+1206   	; 0x54c <__bad_interrupt>
      96:	00 00       	nop
      98:	59 c2       	rjmp	.+1202   	; 0x54c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	57 c2       	rjmp	.+1198   	; 0x54c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	55 c2       	rjmp	.+1194   	; 0x54c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c2       	rjmp	.+1190   	; 0x54c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c2       	rjmp	.+1186   	; 0x54c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4f c2       	rjmp	.+1182   	; 0x54c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4d c2       	rjmp	.+1178   	; 0x54c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4b c2       	rjmp	.+1174   	; 0x54c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	49 c2       	rjmp	.+1170   	; 0x54c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	47 c2       	rjmp	.+1166   	; 0x54c <__bad_interrupt>
      be:	00 00       	nop
      c0:	45 c2       	rjmp	.+1162   	; 0x54c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	43 c2       	rjmp	.+1158   	; 0x54c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	41 c2       	rjmp	.+1154   	; 0x54c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3f c2       	rjmp	.+1150   	; 0x54c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3d c2       	rjmp	.+1146   	; 0x54c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3b c2       	rjmp	.+1142   	; 0x54c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	39 c2       	rjmp	.+1138   	; 0x54c <__bad_interrupt>
      da:	00 00       	nop
      dc:	37 c2       	rjmp	.+1134   	; 0x54c <__bad_interrupt>
      de:	00 00       	nop
      e0:	35 c2       	rjmp	.+1130   	; 0x54c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__trampolines_end>:
     112:	00 40       	sbci	r16, 0x00	; 0
     114:	7a 10       	cpse	r7, r10
     116:	f3 5a       	subi	r31, 0xA3	; 163
     118:	00 a0       	ldd	r0, Z+32	; 0x20
     11a:	72 4e       	sbci	r23, 0xE2	; 226
     11c:	18 09       	sbc	r17, r8
     11e:	00 10       	cpse	r0, r0
     120:	a5 d4       	rcall	.+2378   	; 0xa6c <printMaterial+0x3c>
     122:	e8 00       	.word	0x00e8	; ????
     124:	00 e8       	ldi	r16, 0x80	; 128
     126:	76 48       	sbci	r23, 0x86	; 134
     128:	17 00       	.word	0x0017	; ????
     12a:	00 e4       	ldi	r16, 0x40	; 64
     12c:	0b 54       	subi	r16, 0x4B	; 75
     12e:	02 00       	.word	0x0002	; ????
     130:	00 ca       	rjmp	.-3072   	; 0xfffff532 <__eeprom_end+0xff7ef532>
     132:	9a 3b       	cpi	r25, 0xBA	; 186
     134:	00 00       	nop
     136:	00 e1       	ldi	r16, 0x10	; 16
     138:	f5 05       	cpc	r31, r5
     13a:	00 00       	nop
     13c:	80 96       	adiw	r24, 0x20	; 32
     13e:	98 00       	.word	0x0098	; ????
     140:	00 00       	nop
     142:	40 42       	sbci	r20, 0x20	; 32
     144:	0f 00       	.word	0x000f	; ????
     146:	00 00       	nop
     148:	a0 86       	std	Z+8, r10	; 0x08
     14a:	01 00       	.word	0x0001	; ????
     14c:	00 00       	nop
     14e:	10 27       	eor	r17, r16
     150:	00 00       	nop
     152:	00 00       	nop
     154:	e8 03       	fmulsu	r22, r16
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	64 00       	.word	0x0064	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	0a 00       	.word	0x000a	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	01 00       	.word	0x0001	; ????
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	2c 76       	andi	r18, 0x6C	; 108
     16e:	d8 88       	ldd	r13, Y+16	; 0x10
     170:	dc 67       	ori	r29, 0x7C	; 124
     172:	4f 08       	sbc	r4, r15
     174:	23 df       	rcall	.-442    	; 0xffffffbc <__eeprom_end+0xff7effbc>
     176:	c1 df       	rcall	.-126    	; 0xfa <__SREG__+0xbb>
     178:	ae 59       	subi	r26, 0x9E	; 158
     17a:	e1 b1       	in	r30, 0x01	; 1
     17c:	b7 96       	adiw	r30, 0x27	; 39
     17e:	e5 e3       	ldi	r30, 0x35	; 53
     180:	e4 53       	subi	r30, 0x34	; 52
     182:	c6 3a       	cpi	r28, 0xA6	; 166
     184:	e6 51       	subi	r30, 0x16	; 22
     186:	99 76       	andi	r25, 0x69	; 105
     188:	96 e8       	ldi	r25, 0x86	; 134
     18a:	e6 c2       	rjmp	.+1484   	; 0x758 <loadMaterials+0x4e>
     18c:	84 26       	eor	r8, r20
     18e:	eb 89       	ldd	r30, Y+19	; 0x13
     190:	8c 9b       	sbis	0x11, 4	; 17
     192:	62 ed       	ldi	r22, 0xD2	; 210
     194:	40 7c       	andi	r20, 0xC0	; 192
     196:	6f fc       	.word	0xfc6f	; ????
     198:	ef bc       	out	0x2f, r14	; 47
     19a:	9c 9f       	mul	r25, r28
     19c:	40 f2       	brcs	.-112    	; 0x12e <__trampolines_end+0x1c>
     19e:	ba a5       	ldd	r27, Y+42	; 0x2a
     1a0:	6f a5       	ldd	r22, Y+47	; 0x2f
     1a2:	f4 90       	lpm	r15, Z
     1a4:	05 5a       	subi	r16, 0xA5	; 165
     1a6:	2a f7       	brpl	.-54     	; 0x172 <__trampolines_end+0x60>
     1a8:	5c 93       	st	X, r21
     1aa:	6b 6c       	ori	r22, 0xCB	; 203
     1ac:	f9 67       	ori	r31, 0x79	; 121
     1ae:	6d c1       	rjmp	.+730    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     1b0:	1b fc       	.word	0xfc1b	; ????
     1b2:	e0 e4       	ldi	r30, 0x40	; 64
     1b4:	0d 47       	sbci	r16, 0x7D	; 125
     1b6:	fe f5       	brtc	.+126    	; 0x236 <myFont+0x2a>
     1b8:	20 e6       	ldi	r18, 0x60	; 96
     1ba:	b5 00       	.word	0x00b5	; ????
     1bc:	d0 ed       	ldi	r29, 0xD0	; 208
     1be:	90 2e       	mov	r9, r16
     1c0:	03 00       	.word	0x0003	; ????
     1c2:	94 35       	cpi	r25, 0x54	; 84
     1c4:	77 05       	cpc	r23, r7
     1c6:	00 80       	ld	r0, Z
     1c8:	84 1e       	adc	r8, r20
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	00 20       	and	r0, r0
     1ce:	4e 0a       	sbc	r4, r30
     1d0:	00 00       	nop
     1d2:	00 c8       	rjmp	.-4096   	; 0xfffff1d4 <__eeprom_end+0xff7ef1d4>
     1d4:	0c 33       	cpi	r16, 0x3C	; 60
     1d6:	33 33       	cpi	r19, 0x33	; 51
     1d8:	33 0f       	add	r19, r19
     1da:	98 6e       	ori	r25, 0xE8	; 232
     1dc:	12 83       	std	Z+2, r17	; 0x02
     1de:	11 41       	sbci	r17, 0x11	; 17
     1e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1e2:	21 14       	cp	r2, r1
     1e4:	89 3b       	cpi	r24, 0xB9	; 185
     1e6:	e6 55       	subi	r30, 0x56	; 86
     1e8:	16 cf       	rjmp	.-468    	; 0x16 <__FUSE_REGION_LENGTH__+0x13>
     1ea:	fe e6       	ldi	r31, 0x6E	; 110
     1ec:	db 18       	sub	r13, r11
     1ee:	d1 84       	ldd	r13, Z+9	; 0x09
     1f0:	4b 38       	cpi	r20, 0x8B	; 139
     1f2:	1b f7       	brvc	.-58     	; 0x1ba <__trampolines_end+0xa8>
     1f4:	7c 1d       	adc	r23, r12
     1f6:	90 1d       	adc	r25, r0
     1f8:	a4 bb       	out	0x14, r26	; 20
     1fa:	e4 24       	eor	r14, r4
     1fc:	20 32       	cpi	r18, 0x20	; 32
     1fe:	84 72       	andi	r24, 0x24	; 36
     200:	5e 22       	and	r5, r30
     202:	81 00       	.word	0x0081	; ????
     204:	c9 f1       	breq	.+114    	; 0x278 <myFont+0x6c>
     206:	24 ec       	ldi	r18, 0xC4	; 196
     208:	a1 e5       	ldi	r26, 0x51	; 81
     20a:	3d 27       	eor	r19, r29

0000020c <myFont>:
	...
     214:	00 00 5f 00 00 00 00 00 00 00 07 00 07 00 00 00     .._.............
     224:	00 14 7f 14 7f 14 00 00 00 24 2a 7f 2a 12 00 00     .........$*.*...
     234:	00 23 13 08 64 62 00 00 00 36 49 55 22 50 00 00     .#..db...6IU"P..
     244:	00 00 05 03 00 00 00 00 00 1c 22 41 00 00 00 00     .........."A....
     254:	00 41 22 1c 00 00 00 00 00 08 2a 1c 2a 08 00 00     .A".......*.*...
     264:	00 08 08 3e 08 08 00 00 00 a0 60 00 00 00 00 00     ...>......`.....
     274:	00 08 08 08 08 08 00 00 00 60 60 00 00 00 00 00     .........``.....
     284:	00 20 10 08 04 02 00 00 00 3e 51 49 45 3e 00 00     . .......>QIE>..
     294:	00 00 42 7f 40 00 00 00 00 62 51 49 49 46 00 00     ..B.@....bQIIF..
     2a4:	00 22 41 49 49 36 00 00 00 18 14 12 7f 10 00 00     ."AII6..........
     2b4:	00 27 45 45 45 39 00 00 00 3c 4a 49 49 30 00 00     .'EEE9...<JII0..
     2c4:	00 01 71 09 05 03 00 00 00 36 49 49 49 36 00 00     ..q......6III6..
     2d4:	00 06 49 49 29 1e 00 00 00 00 36 36 00 00 00 00     ..II).....66....
     2e4:	00 00 ac 6c 00 00 00 00 00 08 14 22 41 00 00 00     ...l......."A...
     2f4:	00 14 14 14 14 14 00 00 00 41 22 14 08 00 00 00     .........A".....
     304:	00 02 01 51 09 06 00 00 00 32 49 79 41 3e 00 00     ...Q.....2IyA>..
     314:	00 7e 09 09 09 7e 00 00 00 7f 49 49 49 36 00 00     .~...~....III6..
     324:	00 3e 41 41 41 22 00 00 00 7f 41 41 22 1c 00 00     .>AAA"....AA"...
     334:	00 7f 49 49 49 41 00 00 00 7f 09 09 09 01 00 00     ..IIIA..........
     344:	00 3e 41 41 51 72 00 00 00 7f 08 08 08 7f 00 00     .>AAQr..........
     354:	00 41 7f 41 00 00 00 00 00 20 40 41 3f 01 00 00     .A.A..... @A?...
     364:	00 7f 08 14 22 41 00 00 00 7f 40 40 40 40 00 00     ...."A....@@@@..
     374:	00 7f 02 0c 02 7f 00 00 00 7f 04 08 10 7f 00 00     ................
     384:	00 3e 41 41 41 3e 00 00 00 7f 09 09 09 06 00 00     .>AAA>..........
     394:	00 3e 41 51 21 5e 00 00 00 7f 09 19 29 46 00 00     .>AQ!^......)F..
     3a4:	00 26 49 49 49 32 00 00 00 01 01 7f 01 01 00 00     .&III2..........
     3b4:	00 3f 40 40 40 3f 00 00 00 1f 20 40 20 1f 00 00     .?@@@?.... @ ...
     3c4:	00 3f 40 38 40 3f 00 00 00 63 14 08 14 63 00 00     .?@8@?...c...c..
     3d4:	00 03 04 78 04 03 00 00 00 61 51 49 45 43 00 00     ...x.....aQIEC..
     3e4:	00 7f 41 41 00 00 00 00 00 02 04 08 10 20 00 00     ..AA......... ..
     3f4:	00 41 41 7f 00 00 00 00 00 04 02 01 02 04 00 00     .AA.............
     404:	00 80 80 80 80 80 00 00 00 01 02 04 00 00 00 00     ................
     414:	00 20 54 54 54 78 00 00 00 7f 48 44 44 38 00 00     . TTTx....HDD8..
     424:	00 38 44 44 28 00 00 00 00 38 44 44 48 7f 00 00     .8DD(....8DDH...
     434:	00 38 54 54 54 18 00 00 00 08 7e 09 02 00 00 00     .8TTT.....~.....
     444:	00 18 a4 a4 a4 7c 00 00 00 7f 08 04 04 78 00 00     .....|.......x..
     454:	00 00 7d 00 00 00 00 00 00 80 84 7d 00 00 00 00     ..}........}....
     464:	00 7f 10 28 44 00 00 00 00 41 7f 40 00 00 00 00     ...(D....A.@....
     474:	00 7c 04 18 04 78 00 00 00 7c 08 04 7c 00 00 00     .|...x...|..|...
     484:	00 38 44 44 38 00 00 00 00 fc 24 24 18 00 00 00     .8DD8.....$$....
     494:	00 18 24 24 fc 00 00 00 00 00 7c 08 04 00 00 00     ..$$......|.....
     4a4:	00 48 54 54 24 00 00 00 00 04 7f 44 00 00 00 00     .HTT$......D....
     4b4:	00 3c 40 40 7c 00 00 00 00 1c 20 40 20 1c 00 00     .<@@|..... @ ...
     4c4:	00 3c 40 30 40 3c 00 00 00 44 28 10 28 44 00 00     .<@0@<...D(.(D..
     4d4:	00 1c a0 a0 7c 00 00 00 00 44 64 54 4c 44 00 00     ....|....DdTLD..
     4e4:	00 08 36 41 00 00 00 00 00 00 7f 00 00 00 00 00     ..6A............
     4f4:	00 41 36 08 00 00 00 00 00 02 01 01 02 01 00 00     .A6.............
     504:	00 02 05 05 02 00 00 00                             ........

0000050c <__ctors_end>:
     50c:	11 24       	eor	r1, r1
     50e:	1f be       	out	0x3f, r1	; 63
     510:	cf ef       	ldi	r28, 0xFF	; 255
     512:	d1 e2       	ldi	r29, 0x21	; 33
     514:	de bf       	out	0x3e, r29	; 62
     516:	cd bf       	out	0x3d, r28	; 61
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	0c bf       	out	0x3c, r16	; 60

0000051c <__do_copy_data>:
     51c:	13 e0       	ldi	r17, 0x03	; 3
     51e:	a0 e0       	ldi	r26, 0x00	; 0
     520:	b2 e0       	ldi	r27, 0x02	; 2
     522:	e8 e1       	ldi	r30, 0x18	; 24
     524:	fe e1       	ldi	r31, 0x1E	; 30
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0b bf       	out	0x3b, r16	; 59
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__do_copy_data+0x14>
     52c:	07 90       	elpm	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	ac 3d       	cpi	r26, 0xDC	; 220
     532:	b1 07       	cpc	r27, r17
     534:	d9 f7       	brne	.-10     	; 0x52c <__do_copy_data+0x10>

00000536 <__do_clear_bss>:
     536:	25 e0       	ldi	r18, 0x05	; 5
     538:	ac ed       	ldi	r26, 0xDC	; 220
     53a:	b3 e0       	ldi	r27, 0x03	; 3
     53c:	01 c0       	rjmp	.+2      	; 0x540 <.do_clear_bss_start>

0000053e <.do_clear_bss_loop>:
     53e:	1d 92       	st	X+, r1

00000540 <.do_clear_bss_start>:
     540:	a4 3b       	cpi	r26, 0xB4	; 180
     542:	b2 07       	cpc	r27, r18
     544:	e1 f7       	brne	.-8      	; 0x53e <.do_clear_bss_loop>
     546:	f1 d4       	rcall	.+2530   	; 0xf2a <main>
     548:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <_exit>

0000054c <__bad_interrupt>:
     54c:	59 cd       	rjmp	.-1358   	; 0x0 <__vectors>

0000054e <init_adc>:
}
*/

//Init ADC 8kHz from timer 0 (with interrupt if entered)
void init_adc(char interrupt){
	ADCSRA |= (1<<ADPS2);						//1MHz input clock to ADC (div factor 16). NB: Only for resolutions less than 10bit
     54e:	ea e7       	ldi	r30, 0x7A	; 122
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	90 81       	ld	r25, Z
     554:	94 60       	ori	r25, 0x04	; 4
     556:	90 83       	st	Z, r25
//	ADMUX  |= (1<<REFS0);						//3,3 V reference with cap at VREF pin.
	ADMUX  |= (1<<ADLAR);						//Left adjustment for 8bit resolution
     558:	ac e7       	ldi	r26, 0x7C	; 124
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	9c 91       	ld	r25, X
     55e:	90 62       	ori	r25, 0x20	; 32
     560:	9c 93       	st	X, r25
	DIDR0  |= (1<<ADC0D);						//disabling unused inputs to save power
     562:	ae e7       	ldi	r26, 0x7E	; 126
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	9c 91       	ld	r25, X
     568:	91 60       	ori	r25, 0x01	; 1
     56a:	9c 93       	st	X, r25
	ADCSRB |= (1<<ADTS1) | (1<<ADTS0);			//Auto Trigger source: (Timer/Counter0 Compare Match A)
     56c:	ab e7       	ldi	r26, 0x7B	; 123
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	9c 91       	ld	r25, X
     572:	93 60       	ori	r25, 0x03	; 3
     574:	9c 93       	st	X, r25
	ADCSRA |= (1<<ADATE);						//Enable auto trigger mode
     576:	90 81       	ld	r25, Z
     578:	90 62       	ori	r25, 0x20	; 32
     57a:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADEN);						//Enable ADC
     57c:	90 81       	ld	r25, Z
     57e:	90 68       	ori	r25, 0x80	; 128
     580:	90 83       	st	Z, r25
	if(interrupt) ADCSRA |= (1<<ADIE);			//Enable interrupt
     582:	88 23       	and	r24, r24
     584:	19 f0       	breq	.+6      	; 0x58c <init_adc+0x3e>
     586:	80 81       	ld	r24, Z
     588:	88 60       	ori	r24, 0x08	; 8
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret

0000058e <I2C_Init>:
     58e:	81 b1       	in	r24, 0x01	; 1
     590:	81 60       	ori	r24, 0x01	; 1
     592:	81 b9       	out	0x01, r24	; 1
     594:	82 b1       	in	r24, 0x02	; 2
     596:	81 60       	ori	r24, 0x01	; 1
     598:	82 b9       	out	0x02, r24	; 2
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	83 ed       	ldi	r24, 0xD3	; 211
     59e:	90 e3       	ldi	r25, 0x30	; 48
     5a0:	21 50       	subi	r18, 0x01	; 1
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	90 40       	sbci	r25, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <I2C_Init+0x12>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <I2C_Init+0x1c>
     5aa:	00 00       	nop
     5ac:	82 e1       	ldi	r24, 0x12	; 18
     5ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     5b2:	e9 eb       	ldi	r30, 0xB9	; 185
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	8c 7f       	andi	r24, 0xFC	; 252
     5ba:	80 83       	st	Z, r24
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5c2:	08 95       	ret

000005c4 <I2C_Start>:
     5c4:	94 ea       	ldi	r25, 0xA4	; 164
     5c6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ce:	99 23       	and	r25, r25
     5d0:	e4 f7       	brge	.-8      	; 0x5ca <I2C_Start+0x6>
     5d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     5d6:	98 7f       	andi	r25, 0xF8	; 248
     5d8:	98 30       	cpi	r25, 0x08	; 8
     5da:	91 f4       	brne	.+36     	; 0x600 <I2C_Start+0x3c>
     5dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     5e0:	84 e8       	ldi	r24, 0x84	; 132
     5e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ea:	88 23       	and	r24, r24
     5ec:	e4 f7       	brge	.-8      	; 0x5e6 <I2C_Start+0x22>
     5ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     5f2:	88 7f       	andi	r24, 0xF8	; 248
     5f4:	88 31       	cpi	r24, 0x18	; 24
     5f6:	31 f0       	breq	.+12     	; 0x604 <I2C_Start+0x40>
     5f8:	80 32       	cpi	r24, 0x20	; 32
     5fa:	31 f4       	brne	.+12     	; 0x608 <I2C_Start+0x44>
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	08 95       	ret
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	08 95       	ret
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	08 95       	ret
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	08 95       	ret

0000060c <I2C_Write>:
     60c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     610:	84 e8       	ldi	r24, 0x84	; 132
     612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     616:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     61a:	88 23       	and	r24, r24
     61c:	e4 f7       	brge	.-8      	; 0x616 <I2C_Write+0xa>
     61e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     622:	88 7f       	andi	r24, 0xF8	; 248
     624:	88 32       	cpi	r24, 0x28	; 40
     626:	21 f0       	breq	.+8      	; 0x630 <I2C_Write+0x24>
     628:	80 33       	cpi	r24, 0x30	; 48
     62a:	21 f4       	brne	.+8      	; 0x634 <I2C_Write+0x28>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	08 95       	ret
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	08 95       	ret
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	08 95       	ret

00000638 <I2C_Stop>:
     638:	84 e9       	ldi	r24, 0x94	; 148
     63a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     63e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     642:	84 fd       	sbrc	r24, 4
     644:	fc cf       	rjmp	.-8      	; 0x63e <I2C_Stop+0x6>
     646:	08 95       	ret

00000648 <nextState>:
 }
 
 
  //Set next state in state machine
  void nextState(char input){
	  tilstand = input;
     648:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <tilstand>
     64c:	08 95       	ret

0000064e <init_trigonometry>:
 // DFT
 // ================================================
 
 //Pre-load Trigonometric values into buffers:
 void init_trigonometry(){
	 for(int i = 0; i<NUM_SAMPLES; i++){
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	56 c0       	rjmp	.+172    	; 0x700 <init_trigonometry+0xb2>
		switch(trig_count){
     654:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <trig_count>
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	c9 f0       	breq	.+50     	; 0x68e <init_trigonometry+0x40>
     65c:	28 f0       	brcs	.+10     	; 0x668 <init_trigonometry+0x1a>
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	49 f1       	breq	.+82     	; 0x6b4 <init_trigonometry+0x66>
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	d1 f1       	breq	.+116    	; 0x6da <init_trigonometry+0x8c>
     666:	4a c0       	rjmp	.+148    	; 0x6fc <init_trigonometry+0xae>
			case 0:
			ReTrig[i]=1;
     668:	a9 01       	movw	r20, r18
     66a:	44 0f       	add	r20, r20
     66c:	55 1f       	adc	r21, r21
     66e:	fa 01       	movw	r30, r20
     670:	e8 5e       	subi	r30, 0xE8	; 232
     672:	fa 4f       	sbci	r31, 0xFA	; 250
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	71 83       	std	Z+1, r23	; 0x01
     67a:	60 83       	st	Z, r22
			ImTrig[i]=0;
     67c:	fa 01       	movw	r30, r20
     67e:	e8 56       	subi	r30, 0x68	; 104
     680:	fb 4f       	sbci	r31, 0xFB	; 251
     682:	11 82       	std	Z+1, r1	; 0x01
     684:	10 82       	st	Z, r1
			trig_count++;
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     68c:	37 c0       	rjmp	.+110    	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 1:
			ReTrig[i]=0;
     68e:	a9 01       	movw	r20, r18
     690:	44 0f       	add	r20, r20
     692:	55 1f       	adc	r21, r21
     694:	fa 01       	movw	r30, r20
     696:	e8 5e       	subi	r30, 0xE8	; 232
     698:	fa 4f       	sbci	r31, 0xFA	; 250
     69a:	11 82       	std	Z+1, r1	; 0x01
     69c:	10 82       	st	Z, r1
			ImTrig[i]=1;
     69e:	fa 01       	movw	r30, r20
     6a0:	e8 56       	subi	r30, 0x68	; 104
     6a2:	fb 4f       	sbci	r31, 0xFB	; 251
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	71 83       	std	Z+1, r23	; 0x01
     6aa:	60 83       	st	Z, r22
			trig_count++;
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     6b2:	24 c0       	rjmp	.+72     	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 2:
			ReTrig[i]=-1;
     6b4:	a9 01       	movw	r20, r18
     6b6:	44 0f       	add	r20, r20
     6b8:	55 1f       	adc	r21, r21
     6ba:	fa 01       	movw	r30, r20
     6bc:	e8 5e       	subi	r30, 0xE8	; 232
     6be:	fa 4f       	sbci	r31, 0xFA	; 250
     6c0:	6f ef       	ldi	r22, 0xFF	; 255
     6c2:	7f ef       	ldi	r23, 0xFF	; 255
     6c4:	71 83       	std	Z+1, r23	; 0x01
     6c6:	60 83       	st	Z, r22
			ImTrig[i]=0;
     6c8:	fa 01       	movw	r30, r20
     6ca:	e8 56       	subi	r30, 0x68	; 104
     6cc:	fb 4f       	sbci	r31, 0xFB	; 251
     6ce:	11 82       	std	Z+1, r1	; 0x01
     6d0:	10 82       	st	Z, r1
			trig_count++;
     6d2:	8f 5f       	subi	r24, 0xFF	; 255
     6d4:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     6d8:	11 c0       	rjmp	.+34     	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 3:
			ReTrig[i]=0;
     6da:	c9 01       	movw	r24, r18
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	fc 01       	movw	r30, r24
     6e2:	e8 5e       	subi	r30, 0xE8	; 232
     6e4:	fa 4f       	sbci	r31, 0xFA	; 250
     6e6:	11 82       	std	Z+1, r1	; 0x01
     6e8:	10 82       	st	Z, r1
			ImTrig[i]=-1;
     6ea:	fc 01       	movw	r30, r24
     6ec:	e8 56       	subi	r30, 0x68	; 104
     6ee:	fb 4f       	sbci	r31, 0xFB	; 251
     6f0:	4f ef       	ldi	r20, 0xFF	; 255
     6f2:	5f ef       	ldi	r21, 0xFF	; 255
     6f4:	51 83       	std	Z+1, r21	; 0x01
     6f6:	40 83       	st	Z, r20
			trig_count = 0;
     6f8:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <trig_count>
 // DFT
 // ================================================
 
 //Pre-load Trigonometric values into buffers:
 void init_trigonometry(){
	 for(int i = 0; i<NUM_SAMPLES; i++){
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	20 34       	cpi	r18, 0x40	; 64
     702:	31 05       	cpc	r19, r1
     704:	0c f4       	brge	.+2      	; 0x708 <init_trigonometry+0xba>
     706:	a6 cf       	rjmp	.-180    	; 0x654 <init_trigonometry+0x6>
			ImTrig[i]=-1;
			trig_count = 0;
			break;
		}
	 }
 }
     708:	08 95       	ret

0000070a <loadMaterials>:
}

//Pre-load default material phases
void loadMaterials(){
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	10 c0       	rjmp	.+32     	; 0x730 <loadMaterials+0x26>
		materials[iron][i] = IRON_PHASE;
     710:	fc 01       	movw	r30, r24
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e0 50       	subi	r30, 0x00	; 0
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	60 e2       	ldi	r22, 0x20	; 32
     724:	71 e4       	ldi	r23, 0x41	; 65
     726:	40 83       	st	Z, r20
     728:	51 83       	std	Z+1, r21	; 0x01
     72a:	62 83       	std	Z+2, r22	; 0x02
     72c:	73 83       	std	Z+3, r23	; 0x03
}

//Pre-load default material phases
void loadMaterials(){
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	84 31       	cpi	r24, 0x14	; 20
     732:	91 05       	cpc	r25, r1
     734:	6c f3       	brlt	.-38     	; 0x710 <loadMaterials+0x6>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	11 c0       	rjmp	.+34     	; 0x75e <loadMaterials+0x54>
		materials[iron][i] = IRON_PHASE;
	}
	//Copper
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[copper][i] = COPPER_PHASE; 
     73c:	fc 01       	movw	r30, r24
     73e:	74 96       	adiw	r30, 0x14	; 20
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	e0 50       	subi	r30, 0x00	; 0
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	60 e2       	ldi	r22, 0x20	; 32
     752:	72 ec       	ldi	r23, 0xC2	; 194
     754:	40 83       	st	Z, r20
     756:	51 83       	std	Z+1, r21	; 0x01
     758:	62 83       	std	Z+2, r22	; 0x02
     75a:	73 83       	std	Z+3, r23	; 0x03
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[iron][i] = IRON_PHASE;
	}
	//Copper
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	84 31       	cpi	r24, 0x14	; 20
     760:	91 05       	cpc	r25, r1
     762:	64 f3       	brlt	.-40     	; 0x73c <loadMaterials+0x32>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	11 c0       	rjmp	.+34     	; 0x78c <loadMaterials+0x82>
		materials[copper][i] = COPPER_PHASE; 
	}

	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[brass][i] = BRASS_PHASE;
     76a:	fc 01       	movw	r30, r24
     76c:	b8 96       	adiw	r30, 0x28	; 40
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e0 50       	subi	r30, 0x00	; 0
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	60 e2       	ldi	r22, 0x20	; 32
     780:	71 e4       	ldi	r23, 0x41	; 65
     782:	40 83       	st	Z, r20
     784:	51 83       	std	Z+1, r21	; 0x01
     786:	62 83       	std	Z+2, r22	; 0x02
     788:	73 83       	std	Z+3, r23	; 0x03
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[copper][i] = COPPER_PHASE; 
	}

	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	84 31       	cpi	r24, 0x14	; 20
     78e:	91 05       	cpc	r25, r1
     790:	64 f3       	brlt	.-40     	; 0x76a <loadMaterials+0x60>
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	11 c0       	rjmp	.+34     	; 0x7ba <loadMaterials+0xb0>
		materials[brass][i] = BRASS_PHASE;
	}
	//Aluminum
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[aluminum][i] = ALUMINUM_PHASE;
     798:	fc 01       	movw	r30, r24
     79a:	fc 96       	adiw	r30, 0x3c	; 60
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e0 50       	subi	r30, 0x00	; 0
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	64 e7       	ldi	r22, 0x74	; 116
     7ae:	72 ec       	ldi	r23, 0xC2	; 194
     7b0:	40 83       	st	Z, r20
     7b2:	51 83       	std	Z+1, r21	; 0x01
     7b4:	62 83       	std	Z+2, r22	; 0x02
     7b6:	73 83       	std	Z+3, r23	; 0x03
	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[brass][i] = BRASS_PHASE;
	}
	//Aluminum
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	84 31       	cpi	r24, 0x14	; 20
     7bc:	91 05       	cpc	r25, r1
     7be:	64 f3       	brlt	.-40     	; 0x798 <loadMaterials+0x8e>
		materials[aluminum][i] = ALUMINUM_PHASE;
	}
}
     7c0:	08 95       	ret

000007c2 <checkPhaseStability>:


//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
     7c2:	8f 92       	push	r8
     7c4:	9f 92       	push	r9
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	d0 e0       	ldi	r29, 0x00	; 0
     7da:	30 c0       	rjmp	.+96     	; 0x83c <checkPhaseStability+0x7a>
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
     7dc:	fe 01       	movw	r30, r28
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	e2 5a       	subi	r30, 0xA2	; 162
     7e8:	fb 4f       	sbci	r31, 0xFB	; 251
     7ea:	c0 80       	ld	r12, Z
     7ec:	d1 80       	ldd	r13, Z+1	; 0x01
     7ee:	e2 80       	ldd	r14, Z+2	; 0x02
     7f0:	f3 80       	ldd	r15, Z+3	; 0x03
     7f2:	80 90 8a 04 	lds	r8, 0x048A	; 0x80048a <angle>
     7f6:	90 90 8b 04 	lds	r9, 0x048B	; 0x80048b <angle+0x1>
     7fa:	a0 90 8c 04 	lds	r10, 0x048C	; 0x80048c <angle+0x2>
     7fe:	b0 90 8d 04 	lds	r11, 0x048D	; 0x80048d <angle+0x3>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 ea       	ldi	r20, 0xA0	; 160
     808:	50 e4       	ldi	r21, 0x40	; 64
     80a:	c5 01       	movw	r24, r10
     80c:	b4 01       	movw	r22, r8
     80e:	c4 d5       	rcall	.+2952   	; 0x1398 <__addsf3>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	c7 01       	movw	r24, r14
     816:	b6 01       	movw	r22, r12
     818:	c6 d7       	rcall	.+3980   	; 0x17a6 <__gesf2>
     81a:	18 16       	cp	r1, r24
     81c:	a4 f0       	brlt	.+40     	; 0x846 <checkPhaseStability+0x84>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 ea       	ldi	r20, 0xA0	; 160
     824:	50 e4       	ldi	r21, 0x40	; 64
     826:	c5 01       	movw	r24, r10
     828:	b4 01       	movw	r22, r8
     82a:	b5 d5       	rcall	.+2922   	; 0x1396 <__subsf3>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	77 d6       	rcall	.+3310   	; 0x1524 <__cmpsf2>
     836:	88 23       	and	r24, r24
     838:	44 f0       	brlt	.+16     	; 0x84a <checkPhaseStability+0x88>


//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
     83a:	21 96       	adiw	r28, 0x01	; 1
     83c:	ca 30       	cpi	r28, 0x0A	; 10
     83e:	d1 05       	cpc	r29, r1
     840:	6c f2       	brlt	.-102    	; 0x7dc <checkPhaseStability+0x1a>
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
	}
	return true;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	03 c0       	rjmp	.+6      	; 0x84c <checkPhaseStability+0x8a>

//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	01 c0       	rjmp	.+2      	; 0x84c <checkPhaseStability+0x8a>
     84a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	08 95       	ret

00000862 <detectPhase>:
// Main functionality
// ================================================

//Detect material from signal phase
//Returns material ID if phase is matched. 0xFF otherwise
char detectPhase(){
     862:	4f 92       	push	r4
     864:	5f 92       	push	r5
     866:	6f 92       	push	r6
     868:	7f 92       	push	r7
     86a:	8f 92       	push	r8
     86c:	9f 92       	push	r9
     86e:	af 92       	push	r10
     870:	bf 92       	push	r11
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
	
	//Check if signal amplitude is above threshold
	if(modulus>AMP_THRESHOLD){
     880:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     884:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     888:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     88c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e4       	ldi	r20, 0x40	; 64
     896:	50 e4       	ldi	r21, 0x40	; 64
     898:	86 d7       	rcall	.+3852   	; 0x17a6 <__gesf2>
     89a:	18 16       	cp	r1, r24
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <detectPhase+0x3e>
     89e:	56 c0       	rjmp	.+172    	; 0x94c <detectPhase+0xea>
		//Check stability of phase
		if(checkPhaseStability()){
     8a0:	90 df       	rcall	.-224    	; 0x7c2 <checkPhaseStability>
     8a2:	88 23       	and	r24, r24
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <detectPhase+0x46>
     8a6:	54 c0       	rjmp	.+168    	; 0x950 <detectPhase+0xee>
			
			//Detect material from phase
			char result[2] = {0,undefined};
     8a8:	e1 2c       	mov	r14, r1
     8aa:	68 94       	set
     8ac:	dd 24       	eor	r13, r13
     8ae:	d2 f8       	bld	r13, 2
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
     8b0:	00 e0       	ldi	r16, 0x00	; 0
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	46 c0       	rjmp	.+140    	; 0x942 <detectPhase+0xe0>
				hits = 0;
				for(int j = 0; j<NUM_MATERIAL_SAMPLES; j++){
					if(materials[i][j] < (angle+MATERIAL_DEVIATION) && materials[i][j] > (angle-MATERIAL_DEVIATION)){
     8b6:	84 e1       	ldi	r24, 0x14	; 20
     8b8:	80 9f       	mul	r24, r16
     8ba:	f0 01       	movw	r30, r0
     8bc:	81 9f       	mul	r24, r17
     8be:	f0 0d       	add	r31, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	ec 0f       	add	r30, r28
     8c4:	fd 1f       	adc	r31, r29
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	e0 50       	subi	r30, 0x00	; 0
     8d0:	fe 4f       	sbci	r31, 0xFE	; 254
     8d2:	80 80       	ld	r8, Z
     8d4:	91 80       	ldd	r9, Z+1	; 0x01
     8d6:	a2 80       	ldd	r10, Z+2	; 0x02
     8d8:	b3 80       	ldd	r11, Z+3	; 0x03
     8da:	40 90 8a 04 	lds	r4, 0x048A	; 0x80048a <angle>
     8de:	50 90 8b 04 	lds	r5, 0x048B	; 0x80048b <angle+0x1>
     8e2:	60 90 8c 04 	lds	r6, 0x048C	; 0x80048c <angle+0x2>
     8e6:	70 90 8d 04 	lds	r7, 0x048D	; 0x80048d <angle+0x3>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	50 e4       	ldi	r21, 0x40	; 64
     8f2:	c3 01       	movw	r24, r6
     8f4:	b2 01       	movw	r22, r4
     8f6:	50 d5       	rcall	.+2720   	; 0x1398 <__addsf3>
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	c5 01       	movw	r24, r10
     8fe:	b4 01       	movw	r22, r8
     900:	11 d6       	rcall	.+3106   	; 0x1524 <__cmpsf2>
     902:	88 23       	and	r24, r24
     904:	7c f4       	brge	.+30     	; 0x924 <detectPhase+0xc2>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	50 e4       	ldi	r21, 0x40	; 64
     90e:	c3 01       	movw	r24, r6
     910:	b2 01       	movw	r22, r4
     912:	41 d5       	rcall	.+2690   	; 0x1396 <__subsf3>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	c5 01       	movw	r24, r10
     91a:	b4 01       	movw	r22, r8
     91c:	44 d7       	rcall	.+3720   	; 0x17a6 <__gesf2>
     91e:	18 16       	cp	r1, r24
     920:	0c f4       	brge	.+2      	; 0x924 <detectPhase+0xc2>
						hits ++; 
     922:	f3 94       	inc	r15
					}
					if(hits>result[0]){
     924:	ef 14       	cp	r14, r15
     926:	10 f4       	brcc	.+4      	; 0x92c <detectPhase+0xca>
						 result[0]=hits;
     928:	ef 2c       	mov	r14, r15
						 result[1]=i;	//Save material with most hits
     92a:	d0 2e       	mov	r13, r16
			//Detect material from phase
			char result[2] = {0,undefined};
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
				hits = 0;
				for(int j = 0; j<NUM_MATERIAL_SAMPLES; j++){
     92c:	21 96       	adiw	r28, 0x01	; 1
     92e:	03 c0       	rjmp	.+6      	; 0x936 <detectPhase+0xd4>
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	d0 e0       	ldi	r29, 0x00	; 0
     934:	f1 2c       	mov	r15, r1
     936:	c4 31       	cpi	r28, 0x14	; 20
     938:	d1 05       	cpc	r29, r1
     93a:	0c f4       	brge	.+2      	; 0x93e <detectPhase+0xdc>
     93c:	bc cf       	rjmp	.-136    	; 0x8b6 <detectPhase+0x54>
		if(checkPhaseStability()){
			
			//Detect material from phase
			char result[2] = {0,undefined};
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
     93e:	0f 5f       	subi	r16, 0xFF	; 255
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	04 30       	cpi	r16, 0x04	; 4
     944:	11 05       	cpc	r17, r1
     946:	a4 f3       	brlt	.-24     	; 0x930 <detectPhase+0xce>
						 result[1]=i;	//Save material with most hits
					}
				}
			}
			//Return material with most matched phase "hits"
			return result[1];
     948:	8d 2d       	mov	r24, r13
     94a:	03 c0       	rjmp	.+6      	; 0x952 <detectPhase+0xf0>
		}
	}
	return undefined;
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	01 c0       	rjmp	.+2      	; 0x952 <detectPhase+0xf0>
     950:	84 e0       	ldi	r24, 0x04	; 4
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	9f 90       	pop	r9
     966:	8f 90       	pop	r8
     968:	7f 90       	pop	r7
     96a:	6f 90       	pop	r6
     96c:	5f 90       	pop	r5
     96e:	4f 90       	pop	r4
     970:	08 95       	ret

00000972 <defaultDisplay>:
// Utils
// ================================================

//Print default text on display
void defaultDisplay(){
	clear_display();
     972:	7c d4       	rcall	.+2296   	; 0x126c <clear_display>
	sendStrXY("Mode:",1,0);
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	83 e9       	ldi	r24, 0x93	; 147
     97e:	93 e0       	ldi	r25, 0x03	; 3
     980:	89 d4       	rcall	.+2322   	; 0x1294 <sendStrXY>
	sendStrXY("AMP",2,0);
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	62 e0       	ldi	r22, 0x02	; 2
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	89 e9       	ldi	r24, 0x99	; 153
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	82 d4       	rcall	.+2308   	; 0x1294 <sendStrXY>
	sendStrXY("Angle:",3,0);
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	63 e0       	ldi	r22, 0x03	; 3
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	8d e9       	ldi	r24, 0x9D	; 157
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	7b d4       	rcall	.+2294   	; 0x1294 <sendStrXY>
	sendStrXY("Material:",5,0);
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	65 e0       	ldi	r22, 0x05	; 5
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	84 ea       	ldi	r24, 0xA4	; 164
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	74 c4       	rjmp	.+2280   	; 0x1294 <sendStrXY>
     9ac:	08 95       	ret

000009ae <setup>:
// ================================================

 void setup(){
	 
	 //Setup ADC PORT
	 SETBIT(DDRB,6);
     9ae:	84 b1       	in	r24, 0x04	; 4
     9b0:	80 64       	ori	r24, 0x40	; 64
     9b2:	84 b9       	out	0x04, r24	; 4
	 CLRBIT(PORTB,6);
     9b4:	85 b1       	in	r24, 0x05	; 5
     9b6:	8f 7b       	andi	r24, 0xBF	; 191
     9b8:	85 b9       	out	0x05, r24	; 5
	 
	 //Setup PINS for buttons
	 CLRBIT(DDRE,5); //PE5 int5 pin3
     9ba:	8d b1       	in	r24, 0x0d	; 13
     9bc:	8f 7d       	andi	r24, 0xDF	; 223
     9be:	8d b9       	out	0x0d, r24	; 13
	 CLRBIT(DDRE,4); //PE4 int4 pin2
     9c0:	8d b1       	in	r24, 0x0d	; 13
     9c2:	8f 7e       	andi	r24, 0xEF	; 239
     9c4:	8d b9       	out	0x0d, r24	; 13
	 CLRBIT(DDRD,3); //PD3 int3 pin18
     9c6:	8a b1       	in	r24, 0x0a	; 10
     9c8:	87 7f       	andi	r24, 0xF7	; 247
     9ca:	8a b9       	out	0x0a, r24	; 10
	 //Internal Pull-up on inputs
	 SETBIT(PORTE,5); 
     9cc:	8e b1       	in	r24, 0x0e	; 14
     9ce:	80 62       	ori	r24, 0x20	; 32
     9d0:	8e b9       	out	0x0e, r24	; 14
	 SETBIT(PORTE,4);
     9d2:	8e b1       	in	r24, 0x0e	; 14
     9d4:	80 61       	ori	r24, 0x10	; 16
     9d6:	8e b9       	out	0x0e, r24	; 14
	 SETBIT(PORTD,3);
     9d8:	8b b1       	in	r24, 0x0b	; 11
     9da:	88 60       	ori	r24, 0x08	; 8
     9dc:	8b b9       	out	0x0b, r24	; 11
	 
	 //Configure falling edge detection on pins:
	 EICRA |= (1<<ISC31);
     9de:	e9 e6       	ldi	r30, 0x69	; 105
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	80 68       	ori	r24, 0x80	; 128
     9e6:	80 83       	st	Z, r24
	 EICRB |= (1<<ISC41) | (1<<ISC51) ;	
     9e8:	ea e6       	ldi	r30, 0x6A	; 106
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	8a 60       	ori	r24, 0x0A	; 10
     9f0:	80 83       	st	Z, r24
	 
	 //Enable interrupts with EIMSK:
	 EIMSK |= (1<<INT5) | (1<<INT4) | (1<<INT3);
     9f2:	8d b3       	in	r24, 0x1d	; 29
     9f4:	88 63       	ori	r24, 0x38	; 56
     9f6:	8d bb       	out	0x1d, r24	; 29
	 
	 //Enable global interrupt
	 sei();
     9f8:	78 94       	sei
	 
	 //OLED-display
	 _i2c_address = 0X78;
     9fa:	88 e7       	ldi	r24, 0x78	; 120
     9fc:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <_i2c_address>
	 I2C_Init();
     a00:	c6 dd       	rcall	.-1140   	; 0x58e <I2C_Init>
	 InitializeDisplay();
     a02:	e2 d3       	rcall	.+1988   	; 0x11c8 <InitializeDisplay>
	 print_fonts();
     a04:	75 d4       	rcall	.+2282   	; 0x12f0 <print_fonts>
	defaultDisplay();
     a06:	b5 df       	rcall	.-150    	; 0x972 <defaultDisplay>
	
	 //init_timer0();
	 init_timer0();
     a08:	b4 d4       	rcall	.+2408   	; 0x1372 <init_timer0>
     a0a:	21 de       	rcall	.-958    	; 0x64e <init_trigonometry>
	 
	 //Fill Trigonometric array
	 init_trigonometry();
     a0c:	7e ce       	rjmp	.-772    	; 0x70a <loadMaterials>
     a0e:	08 95       	ret

00000a10 <calibrateDisplay>:
	 
	 loadMaterials();
     a10:	2d d4       	rcall	.+2138   	; 0x126c <clear_display>
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e0       	ldi	r21, 0x00	; 0
	sendStrXY("Material:",5,0);
}

void calibrateDisplay(){
	clear_display();
	sendStrXY("Select material",1,0);
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	8e ea       	ldi	r24, 0xAE	; 174
     a1c:	93 e0       	ldi	r25, 0x03	; 3
     a1e:	3a d4       	rcall	.+2164   	; 0x1294 <sendStrXY>
	sendStrXY("Material:",5,0);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	65 e0       	ldi	r22, 0x05	; 5
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	84 ea       	ldi	r24, 0xA4	; 164
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	33 c4       	rjmp	.+2150   	; 0x1294 <sendStrXY>
     a2e:	08 95       	ret

00000a30 <printMaterial>:
}

//Prints material to display
//INPUT: material ID
void printMaterial(char materialID){
	switch(materialID){
     a30:	82 30       	cpi	r24, 0x02	; 2
     a32:	d9 f0       	breq	.+54     	; 0xa6a <printMaterial+0x3a>
     a34:	28 f4       	brcc	.+10     	; 0xa40 <printMaterial+0x10>
     a36:	88 23       	and	r24, r24
     a38:	41 f0       	breq	.+16     	; 0xa4a <printMaterial+0x1a>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	71 f0       	breq	.+28     	; 0xa5a <printMaterial+0x2a>
     a3e:	08 95       	ret
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	d9 f0       	breq	.+54     	; 0xa7a <printMaterial+0x4a>
     a44:	84 30       	cpi	r24, 0x04	; 4
     a46:	09 f1       	breq	.+66     	; 0xa8a <printMaterial+0x5a>
     a48:	08 95       	ret
		case iron:
			sendStrXY("IRO",5,10);
     a4a:	4a e0       	ldi	r20, 0x0A	; 10
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	65 e0       	ldi	r22, 0x05	; 5
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	8e eb       	ldi	r24, 0xBE	; 190
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	1e c4       	rjmp	.+2108   	; 0x1294 <sendStrXY>
			break;
     a58:	08 95       	ret
		case copper:
			sendStrXY("COP",5,10);
     a5a:	4a e0       	ldi	r20, 0x0A	; 10
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	65 e0       	ldi	r22, 0x05	; 5
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	82 ec       	ldi	r24, 0xC2	; 194
     a64:	93 e0       	ldi	r25, 0x03	; 3
     a66:	16 c4       	rjmp	.+2092   	; 0x1294 <sendStrXY>
			break;
     a68:	08 95       	ret
		case brass:
			sendStrXY("BRA",5,10);
     a6a:	4a e0       	ldi	r20, 0x0A	; 10
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	65 e0       	ldi	r22, 0x05	; 5
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	86 ec       	ldi	r24, 0xC6	; 198
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	0e c4       	rjmp	.+2076   	; 0x1294 <sendStrXY>
			break;
     a78:	08 95       	ret
		case aluminum:
			sendStrXY("ALU",5,10);
     a7a:	4a e0       	ldi	r20, 0x0A	; 10
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	65 e0       	ldi	r22, 0x05	; 5
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	8a ec       	ldi	r24, 0xCA	; 202
     a84:	93 e0       	ldi	r25, 0x03	; 3
     a86:	06 c4       	rjmp	.+2060   	; 0x1294 <sendStrXY>
			break;
     a88:	08 95       	ret
		case undefined:
			sendStrXY("UND",5,10);
     a8a:	4a e0       	ldi	r20, 0x0A	; 10
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	65 e0       	ldi	r22, 0x05	; 5
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	8e ec       	ldi	r24, 0xCE	; 206
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	fe c3       	rjmp	.+2044   	; 0x1294 <sendStrXY>
     a98:	08 95       	ret

00000a9a <debug_print_char>:
			break;
	}
}


void debug_print_char(float input,char x, char y){
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	c4 56       	subi	r28, 0x64	; 100
     ab0:	d1 09       	sbc	r29, r1
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	d4 2e       	mov	r13, r20
     abe:	c2 2e       	mov	r12, r18
	char temp[100] = {0};
     ac0:	9e 01       	movw	r18, r28
     ac2:	2f 5f       	subi	r18, 0xFF	; 255
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	79 01       	movw	r14, r18
     ac8:	24 e6       	ldi	r18, 0x64	; 100
     aca:	f7 01       	movw	r30, r14
     acc:	11 92       	st	Z+, r1
     ace:	2a 95       	dec	r18
     ad0:	e9 f7       	brne	.-6      	; 0xacc <debug_print_char+0x32>
	dtostrf(input,4,2,temp);
     ad2:	87 01       	movw	r16, r14
     ad4:	22 e0       	ldi	r18, 0x02	; 2
     ad6:	44 e0       	ldi	r20, 0x04	; 4
     ad8:	30 d7       	rcall	.+3680   	; 0x193a <dtostrf>
	//sprintf(temp,"%d",input);
	sendStrXY(temp, x,y);
     ada:	4c 2d       	mov	r20, r12
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	6d 2d       	mov	r22, r13
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	c7 01       	movw	r24, r14
     ae4:	d7 d3       	rcall	.+1966   	; 0x1294 <sendStrXY>
}
     ae6:	cc 59       	subi	r28, 0x9C	; 156
     ae8:	df 4f       	sbci	r29, 0xFF	; 255
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	08 95       	ret

00000b06 <computeDFT>:
 }


//Compute DFT for latest sample
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
     b06:	4f 92       	push	r4
     b08:	5f 92       	push	r5
     b0a:	6f 92       	push	r6
     b0c:	7f 92       	push	r7
     b0e:	8f 92       	push	r8
     b10:	9f 92       	push	r9
     b12:	af 92       	push	r10
     b14:	bf 92       	push	r11
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
	 if(DFT_ready == 1){
     b24:	10 91 8e 04 	lds	r17, 0x048E	; 0x80048e <DFT_ready>
     b28:	11 30       	cpi	r17, 0x01	; 1
     b2a:	09 f4       	brne	.+2      	; 0xb2e <computeDFT+0x28>
     b2c:	9e c0       	rjmp	.+316    	; 0xc6a <computeDFT+0x164>
		 Re = 0;
		 Im = 0;
		 DFT_ready = 0;
		 return 1; 
	 }
	 return 0;
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	7e c1       	rjmp	.+764    	; 0xe2e <computeDFT+0x328>
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
	 if(DFT_ready == 1){
		 
		 for(int i = 0; i<NUM_SAMPLES; i++){
			 Re += ReTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
     b32:	fe 01       	movw	r30, r28
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	e8 5e       	subi	r30, 0xE8	; 232
     b3a:	fa 4f       	sbci	r31, 0xFA	; 250
     b3c:	40 81       	ld	r20, Z
     b3e:	51 81       	ldd	r21, Z+1	; 0x01
     b40:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <active_write>
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	22 23       	and	r18, r18
     b4a:	11 f0       	breq	.+4      	; 0xb50 <computeDFT+0x4a>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	fc 01       	movw	r30, r24
     b52:	00 24       	eor	r0, r0
     b54:	f6 95       	lsr	r31
     b56:	e7 95       	ror	r30
     b58:	07 94       	ror	r0
     b5a:	f6 95       	lsr	r31
     b5c:	e7 95       	ror	r30
     b5e:	07 94       	ror	r0
     b60:	fe 2f       	mov	r31, r30
     b62:	e0 2d       	mov	r30, r0
     b64:	e3 52       	subi	r30, 0x23	; 35
     b66:	fc 4f       	sbci	r31, 0xFC	; 252
     b68:	ec 0f       	add	r30, r28
     b6a:	fd 1f       	adc	r31, r29
     b6c:	80 81       	ld	r24, Z
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	9c 01       	movw	r18, r24
     b72:	22 0f       	add	r18, r18
     b74:	33 1f       	adc	r19, r19
     b76:	22 0f       	add	r18, r18
     b78:	33 1f       	adc	r19, r19
     b7a:	82 0f       	add	r24, r18
     b7c:	93 1f       	adc	r25, r19
     b7e:	48 9f       	mul	r20, r24
     b80:	90 01       	movw	r18, r0
     b82:	49 9f       	mul	r20, r25
     b84:	30 0d       	add	r19, r0
     b86:	58 9f       	mul	r21, r24
     b88:	30 0d       	add	r19, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	33 23       	and	r19, r19
     b8e:	14 f4       	brge	.+4      	; 0xb94 <computeDFT+0x8e>
     b90:	21 50       	subi	r18, 0x01	; 1
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	63 2f       	mov	r22, r19
     b96:	73 2f       	mov	r23, r19
     b98:	77 0f       	add	r23, r23
     b9a:	77 0b       	sbc	r23, r23
     b9c:	07 2e       	mov	r0, r23
     b9e:	00 0c       	add	r0, r0
     ba0:	88 0b       	sbc	r24, r24
     ba2:	99 0b       	sbc	r25, r25
     ba4:	2b d5       	rcall	.+2646   	; 0x15fc <__floatsisf>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     bae:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     bb2:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     bb6:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     bba:	ee d3       	rcall	.+2012   	; 0x1398 <__addsf3>
     bbc:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <Re>
     bc0:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <Re+0x1>
     bc4:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <Re+0x2>
     bc8:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <Re+0x3>
			 Im += ImTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
     bcc:	fe 01       	movw	r30, r28
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	e8 56       	subi	r30, 0x68	; 104
     bd4:	fb 4f       	sbci	r31, 0xFB	; 251
     bd6:	40 81       	ld	r20, Z
     bd8:	51 81       	ldd	r21, Z+1	; 0x01
     bda:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <active_write>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	22 23       	and	r18, r18
     be4:	11 f0       	breq	.+4      	; 0xbea <computeDFT+0xe4>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	fc 01       	movw	r30, r24
     bec:	00 24       	eor	r0, r0
     bee:	f6 95       	lsr	r31
     bf0:	e7 95       	ror	r30
     bf2:	07 94       	ror	r0
     bf4:	f6 95       	lsr	r31
     bf6:	e7 95       	ror	r30
     bf8:	07 94       	ror	r0
     bfa:	fe 2f       	mov	r31, r30
     bfc:	e0 2d       	mov	r30, r0
     bfe:	e3 52       	subi	r30, 0x23	; 35
     c00:	fc 4f       	sbci	r31, 0xFC	; 252
     c02:	ec 0f       	add	r30, r28
     c04:	fd 1f       	adc	r31, r29
     c06:	80 81       	ld	r24, Z
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 01       	movw	r18, r24
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	22 0f       	add	r18, r18
     c12:	33 1f       	adc	r19, r19
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	48 9f       	mul	r20, r24
     c1a:	90 01       	movw	r18, r0
     c1c:	49 9f       	mul	r20, r25
     c1e:	30 0d       	add	r19, r0
     c20:	58 9f       	mul	r21, r24
     c22:	30 0d       	add	r19, r0
     c24:	11 24       	eor	r1, r1
     c26:	33 23       	and	r19, r19
     c28:	14 f4       	brge	.+4      	; 0xc2e <computeDFT+0x128>
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	63 2f       	mov	r22, r19
     c30:	73 2f       	mov	r23, r19
     c32:	77 0f       	add	r23, r23
     c34:	77 0b       	sbc	r23, r23
     c36:	07 2e       	mov	r0, r23
     c38:	00 0c       	add	r0, r0
     c3a:	88 0b       	sbc	r24, r24
     c3c:	99 0b       	sbc	r25, r25
     c3e:	de d4       	rcall	.+2492   	; 0x15fc <__floatsisf>
     c40:	9b 01       	movw	r18, r22
     c42:	ac 01       	movw	r20, r24
     c44:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <Im>
     c48:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <Im+0x1>
     c4c:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <Im+0x2>
     c50:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <Im+0x3>
     c54:	a1 d3       	rcall	.+1858   	; 0x1398 <__addsf3>
     c56:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <Im>
     c5a:	70 93 91 04 	sts	0x0491, r23	; 0x800491 <Im+0x1>
     c5e:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <Im+0x2>
     c62:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <Im+0x3>
//Compute DFT for latest sample
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
	 if(DFT_ready == 1){
		 
		 for(int i = 0; i<NUM_SAMPLES; i++){
     c66:	21 96       	adiw	r28, 0x01	; 1
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <computeDFT+0x168>
     c6a:	c0 e0       	ldi	r28, 0x00	; 0
     c6c:	d0 e0       	ldi	r29, 0x00	; 0
     c6e:	c0 34       	cpi	r28, 0x40	; 64
     c70:	d1 05       	cpc	r29, r1
     c72:	0c f4       	brge	.+2      	; 0xc76 <computeDFT+0x170>
     c74:	5e cf       	rjmp	.-324    	; 0xb32 <computeDFT+0x2c>
			 Re += ReTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
			 Im += ImTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
		 }
		 Im = -Im;
     c76:	c0 90 90 04 	lds	r12, 0x0490	; 0x800490 <Im>
     c7a:	d0 90 91 04 	lds	r13, 0x0491	; 0x800491 <Im+0x1>
     c7e:	e0 90 92 04 	lds	r14, 0x0492	; 0x800492 <Im+0x2>
     c82:	f0 90 93 04 	lds	r15, 0x0493	; 0x800493 <Im+0x3>
     c86:	f7 fa       	bst	r15, 7
     c88:	f0 94       	com	r15
     c8a:	f7 f8       	bld	r15, 7
     c8c:	f0 94       	com	r15
     c8e:	c0 92 90 04 	sts	0x0490, r12	; 0x800490 <Im>
     c92:	d0 92 91 04 	sts	0x0491, r13	; 0x800491 <Im+0x1>
     c96:	e0 92 92 04 	sts	0x0492, r14	; 0x800492 <Im+0x2>
     c9a:	f0 92 93 04 	sts	0x0493, r15	; 0x800493 <Im+0x3>
		 modulus = (0.6*modulus)+(0.4*sqrtf((Im*Im) + (Re*Re))/16);
     c9e:	2a e9       	ldi	r18, 0x9A	; 154
     ca0:	39 e9       	ldi	r19, 0x99	; 153
     ca2:	49 e1       	ldi	r20, 0x19	; 25
     ca4:	5f e3       	ldi	r21, 0x3F	; 63
     ca6:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     caa:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     cae:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     cb2:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     cb6:	82 d5       	rcall	.+2820   	; 0x17bc <__mulsf3>
     cb8:	4b 01       	movw	r8, r22
     cba:	5c 01       	movw	r10, r24
     cbc:	a7 01       	movw	r20, r14
     cbe:	96 01       	movw	r18, r12
     cc0:	c7 01       	movw	r24, r14
     cc2:	b6 01       	movw	r22, r12
     cc4:	7b d5       	rcall	.+2806   	; 0x17bc <__mulsf3>
     cc6:	6b 01       	movw	r12, r22
     cc8:	7c 01       	movw	r14, r24
     cca:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     cce:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     cd2:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     cd6:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     cda:	9b 01       	movw	r18, r22
     cdc:	ac 01       	movw	r20, r24
     cde:	6e d5       	rcall	.+2780   	; 0x17bc <__mulsf3>
     ce0:	2b 01       	movw	r4, r22
     ce2:	3c 01       	movw	r6, r24
     ce4:	a3 01       	movw	r20, r6
     ce6:	92 01       	movw	r18, r4
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	55 d3       	rcall	.+1706   	; 0x1398 <__addsf3>
     cee:	cd d5       	rcall	.+2970   	; 0x188a <sqrt>
     cf0:	2d ec       	ldi	r18, 0xCD	; 205
     cf2:	3c ec       	ldi	r19, 0xCC	; 204
     cf4:	4c ec       	ldi	r20, 0xCC	; 204
     cf6:	5e e3       	ldi	r21, 0x3E	; 62
     cf8:	61 d5       	rcall	.+2754   	; 0x17bc <__mulsf3>
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5d e3       	ldi	r21, 0x3D	; 61
     d02:	5c d5       	rcall	.+2744   	; 0x17bc <__mulsf3>
     d04:	9b 01       	movw	r18, r22
     d06:	ac 01       	movw	r20, r24
     d08:	c5 01       	movw	r24, r10
     d0a:	b4 01       	movw	r22, r8
     d0c:	45 d3       	rcall	.+1674   	; 0x1398 <__addsf3>
     d0e:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <modulus>
     d12:	70 93 87 04 	sts	0x0487, r23	; 0x800487 <modulus+0x1>
     d16:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <modulus+0x2>
     d1a:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <modulus+0x3>
		 debug_print_char(modulus,2,7);
     d1e:	27 e0       	ldi	r18, 0x07	; 7
     d20:	42 e0       	ldi	r20, 0x02	; 2
     d22:	bb de       	rcall	.-650    	; 0xa9a <debug_print_char>
		
		 if(Im == 0 && Re == 0){
     d24:	c0 90 90 04 	lds	r12, 0x0490	; 0x800490 <Im>
     d28:	d0 90 91 04 	lds	r13, 0x0491	; 0x800491 <Im+0x1>
     d2c:	e0 90 92 04 	lds	r14, 0x0492	; 0x800492 <Im+0x2>
     d30:	f0 90 93 04 	lds	r15, 0x0493	; 0x800493 <Im+0x3>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	a9 01       	movw	r20, r18
     d3a:	c7 01       	movw	r24, r14
     d3c:	b6 01       	movw	r22, r12
     d3e:	f2 d3       	rcall	.+2020   	; 0x1524 <__cmpsf2>
     d40:	81 11       	cpse	r24, r1
     d42:	17 c0       	rjmp	.+46     	; 0xd72 <computeDFT+0x26c>
     d44:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     d48:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     d4c:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     d50:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	a9 01       	movw	r20, r18
     d5a:	e4 d3       	rcall	.+1992   	; 0x1524 <__cmpsf2>
     d5c:	81 11       	cpse	r24, r1
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <computeDFT+0x26c>
			 angle = 0;
     d60:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <angle>
     d64:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <angle+0x1>
     d68:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <angle+0x2>
     d6c:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <angle+0x3>
		 }
		 else{
		     angle = (0.6*angle)+((0.4*(180/M_PI)*atan2((double)Im, (double)Re)));
     d70:	2c c0       	rjmp	.+88     	; 0xdca <computeDFT+0x2c4>
     d72:	2a e9       	ldi	r18, 0x9A	; 154
     d74:	39 e9       	ldi	r19, 0x99	; 153
     d76:	49 e1       	ldi	r20, 0x19	; 25
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <angle>
     d7e:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <angle+0x1>
     d82:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <angle+0x2>
     d86:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <angle+0x3>
     d8a:	18 d5       	rcall	.+2608   	; 0x17bc <__mulsf3>
     d8c:	4b 01       	movw	r8, r22
     d8e:	5c 01       	movw	r10, r24
     d90:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <Re>
     d94:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <Re+0x1>
     d98:	40 91 96 04 	lds	r20, 0x0496	; 0x800496 <Re+0x2>
     d9c:	50 91 97 04 	lds	r21, 0x0497	; 0x800497 <Re+0x3>
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	6c d3       	rcall	.+1752   	; 0x147e <atan2>
     da6:	23 eb       	ldi	r18, 0xB3	; 179
     da8:	38 e5       	ldi	r19, 0x58	; 88
     daa:	47 eb       	ldi	r20, 0xB7	; 183
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	06 d5       	rcall	.+2572   	; 0x17bc <__mulsf3>
     db0:	9b 01       	movw	r18, r22
     db2:	ac 01       	movw	r20, r24
     db4:	c5 01       	movw	r24, r10
     db6:	b4 01       	movw	r22, r8
     db8:	ef d2       	rcall	.+1502   	; 0x1398 <__addsf3>
     dba:	60 93 8a 04 	sts	0x048A, r22	; 0x80048a <angle>
     dbe:	70 93 8b 04 	sts	0x048B, r23	; 0x80048b <angle+0x1>
     dc2:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <angle+0x2>
     dc6:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <angle+0x3>
		 }	
		 //Save to phase history  
		 angleThres[angleCnt] = angle;
     dca:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <angleCnt>
     dce:	e2 2f       	mov	r30, r18
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <angle>
     dd6:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <angle+0x1>
     dda:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <angle+0x2>
     dde:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <angle+0x3>
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	ee 0f       	add	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	e2 5a       	subi	r30, 0xA2	; 162
     dec:	fb 4f       	sbci	r31, 0xFB	; 251
     dee:	60 83       	st	Z, r22
     df0:	71 83       	std	Z+1, r23	; 0x01
     df2:	82 83       	std	Z+2, r24	; 0x02
		 angleCnt ++; 
     df4:	93 83       	std	Z+3, r25	; 0x03
     df6:	2f 5f       	subi	r18, 0xFF	; 255
     df8:	20 93 5d 04 	sts	0x045D, r18	; 0x80045d <angleCnt>
		 if(angleCnt >= 10) angleCnt = 0; 
     dfc:	2a 30       	cpi	r18, 0x0A	; 10
     dfe:	10 f0       	brcs	.+4      	; 0xe04 <computeDFT+0x2fe>
     e00:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <angleCnt>
		 
		 debug_print_char(angle,3,7);
     e04:	27 e0       	ldi	r18, 0x07	; 7
     e06:	43 e0       	ldi	r20, 0x03	; 3
     e08:	48 de       	rcall	.-880    	; 0xa9a <debug_print_char>
		 Re = 0;
     e0a:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <Re>
     e0e:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <Re+0x1>
     e12:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <Re+0x2>
     e16:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <Re+0x3>
		 Im = 0;
     e1a:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <Im>
     e1e:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <Im+0x1>
     e22:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <Im+0x2>
     e26:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <Im+0x3>
		 DFT_ready = 0;
     e2a:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <DFT_ready>
		 return 1; 
	 }
	 return 0;
 }
     e2e:	81 2f       	mov	r24, r17
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	bf 90       	pop	r11
     e40:	af 90       	pop	r10
     e42:	9f 90       	pop	r9
     e44:	8f 90       	pop	r8
     e46:	7f 90       	pop	r7
     e48:	6f 90       	pop	r6
     e4a:	5f 90       	pop	r5
     e4c:	4f 90       	pop	r4
     e4e:	08 95       	ret

00000e50 <calibratePhase>:
}


//Calibrates phase detection by saving samples to memory. User specifies material in menu
//INPUT: material ID to sample
void calibratePhase(char materialID){	
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	08 2f       	mov	r16, r24
	char numAttempts = 0; 
	//Normal materials
	if(materialID < 4){
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	b8 f1       	brcs	.+110    	; 0xecc <calibratePhase+0x7c>
     e5e:	c0 e0       	ldi	r28, 0x00	; 0
     e60:	d0 e0       	ldi	r29, 0x00	; 0
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	5a c0       	rjmp	.+180    	; 0xf1a <calibratePhase+0xca>
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
			if(computeDFT()){	
     e66:	4f de       	rcall	.-866    	; 0xb06 <computeDFT>
     e68:	88 23       	and	r24, r24
     e6a:	99 f1       	breq	.+102    	; 0xed2 <calibratePhase+0x82>
				if(modulus>AMP_THRESHOLD){
     e6c:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     e70:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     e74:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     e78:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e4       	ldi	r20, 0x40	; 64
     e82:	50 e4       	ldi	r21, 0x40	; 64
     e84:	90 d4       	rcall	.+2336   	; 0x17a6 <__gesf2>
     e86:	18 16       	cp	r1, r24
					//Check stability of phase
					if(checkPhaseStability()){
     e88:	ec f4       	brge	.+58     	; 0xec4 <calibratePhase+0x74>
     e8a:	9b dc       	rcall	.-1738   	; 0x7c2 <checkPhaseStability>
     e8c:	88 23       	and	r24, r24
     e8e:	d1 f0       	breq	.+52     	; 0xec4 <calibratePhase+0x74>
						materials[materialID][i] = angle;
     e90:	fe 01       	movw	r30, r28
     e92:	84 e1       	ldi	r24, 0x14	; 20
     e94:	08 9f       	mul	r16, r24
     e96:	e0 0d       	add	r30, r0
     e98:	f1 1d       	adc	r31, r1
     e9a:	11 24       	eor	r1, r1
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	e0 50       	subi	r30, 0x00	; 0
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <angle>
     eac:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <angle+0x1>
     eb0:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <angle+0x2>
     eb4:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <angle+0x3>
     eb8:	80 83       	st	Z, r24
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	a2 83       	std	Z+2, r26	; 0x02
     ebe:	b3 83       	std	Z+3, r27	; 0x03
						i++;
     ec0:	21 96       	adiw	r28, 0x01	; 1
						continue;
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <calibratePhase+0x82>
					}
				}
				//Error handling
				numAttempts ++;
     ec4:	1f 5f       	subi	r17, 0xFF	; 255
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
     ec6:	15 31       	cpi	r17, 0x15	; 21
     ec8:	20 f0       	brcs	.+8      	; 0xed2 <calibratePhase+0x82>
     eca:	2a c0       	rjmp	.+84     	; 0xf20 <calibratePhase+0xd0>
     ecc:	c0 e0       	ldi	r28, 0x00	; 0
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	10 e0       	ldi	r17, 0x00	; 0
//INPUT: material ID to sample
void calibratePhase(char materialID){	
	char numAttempts = 0; 
	//Normal materials
	if(materialID < 4){
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
     ed2:	c4 31       	cpi	r28, 0x14	; 20
     ed4:	d1 05       	cpc	r29, r1
     ed6:	3c f2       	brlt	.-114    	; 0xe66 <calibratePhase+0x16>
		}
	}
	//Background noise (should be 0)
	else{
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
			if(computeDFT()){
     ed8:	23 c0       	rjmp	.+70     	; 0xf20 <calibratePhase+0xd0>
     eda:	15 de       	rcall	.-982    	; 0xb06 <computeDFT>
     edc:	88 23       	and	r24, r24
				//Check stability of phase
				if(checkPhaseStability()){
     ede:	e9 f0       	breq	.+58     	; 0xf1a <calibratePhase+0xca>
     ee0:	70 dc       	rcall	.-1824   	; 0x7c2 <checkPhaseStability>
     ee2:	88 23       	and	r24, r24
     ee4:	b9 f0       	breq	.+46     	; 0xf14 <calibratePhase+0xc4>
					materials[undefined][i] = angle;
     ee6:	fe 01       	movw	r30, r28
     ee8:	e0 5b       	subi	r30, 0xB0	; 176
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	e0 50       	subi	r30, 0x00	; 0
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <angle>
     efc:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <angle+0x1>
     f00:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <angle+0x2>
     f04:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <angle+0x3>
     f08:	80 83       	st	Z, r24
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	a2 83       	std	Z+2, r26	; 0x02
     f0e:	b3 83       	std	Z+3, r27	; 0x03
					i++;
     f10:	21 96       	adiw	r28, 0x01	; 1
					continue;
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <calibratePhase+0xca>
				}
				//Error handling
				numAttempts ++;
     f14:	1f 5f       	subi	r17, 0xFF	; 255
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
     f16:	15 31       	cpi	r17, 0x15	; 21
     f18:	18 f4       	brcc	.+6      	; 0xf20 <calibratePhase+0xd0>
			}
		}
	}
	//Background noise (should be 0)
	else{
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
     f1a:	c4 31       	cpi	r28, 0x14	; 20
     f1c:	d1 05       	cpc	r29, r1
     f1e:	ec f2       	brlt	.-70     	; 0xeda <calibratePhase+0x8a>
				numAttempts ++;
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
			}
		}
	}
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <main>:
	};



 int main(void){
	setup();
     f2a:	41 dd       	rcall	.-1406   	; 0x9ae <setup>
	
//Main loop	
	while(1){
		switch(tilstand){
     f2c:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <tilstand>
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	39 f1       	breq	.+78     	; 0xf82 <main+0x58>
     f34:	30 f4       	brcc	.+12     	; 0xf42 <main+0x18>
     f36:	88 23       	and	r24, r24
     f38:	09 f4       	brne	.+2      	; 0xf3c <main+0x12>
     f3a:	4a c0       	rjmp	.+148    	; 0xfd0 <main+0xa6>
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	31 f0       	breq	.+12     	; 0xf4c <main+0x22>
     f40:	f5 cf       	rjmp	.-22     	; 0xf2c <main+0x2>
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	29 f1       	breq	.+74     	; 0xf90 <main+0x66>
     f46:	84 30       	cpi	r24, 0x04	; 4
     f48:	39 f1       	breq	.+78     	; 0xf98 <main+0x6e>
     f4a:	f0 cf       	rjmp	.-32     	; 0xf2c <main+0x2>
			
			case run:
				sendStrXY("Running  ",1,7);
     f4c:	47 e0       	ldi	r20, 0x07	; 7
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	82 ed       	ldi	r24, 0xD2	; 210
     f56:	93 e0       	ldi	r25, 0x03	; 3
				
				computeDFT();
     f58:	9d d1       	rcall	.+826    	; 0x1294 <sendStrXY>
				printMaterial(detectPhase());
     f5a:	d5 dd       	rcall	.-1110   	; 0xb06 <computeDFT>
     f5c:	82 dc       	rcall	.-1788   	; 0x862 <detectPhase>
     f5e:	68 dd       	rcall	.-1328   	; 0xa30 <printMaterial>
     f60:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <BTN3_flag>
				
				//Calibration button
				if(BTN3_flag == 1){
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	21 f4       	brne	.+8      	; 0xf70 <main+0x46>
					//disable interrupt
					//delay
					//read pin
 					nextState(select);
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	6e db       	rcall	.-2340   	; 0x648 <nextState>
     f6c:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <BTN3_flag>
 					BTN3_flag = 0;
					 //enable
				}

				if(BTN5_flag == 1){
     f70:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <BTN5_flag>
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	d1 f6       	brne	.-76     	; 0xf2c <main+0x2>
					nextState(reset);
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	66 db       	rcall	.-2356   	; 0x648 <nextState>
					BTN5_flag =0;
     f7c:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <BTN5_flag>
				}
				break;	
			
			case calibrate:
				calibratePhase(materialSelctor);
     f80:	d5 cf       	rjmp	.-86     	; 0xf2c <main+0x2>
     f82:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
				defaultDisplay();
     f86:	64 df       	rcall	.-312    	; 0xe50 <calibratePhase>
				nextState(run);
     f88:	f4 dc       	rcall	.-1560   	; 0x972 <defaultDisplay>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	5d db       	rcall	.-2374   	; 0x648 <nextState>
				break; 
     f8e:	ce cf       	rjmp	.-100    	; 0xf2c <main+0x2>
			
			case select:
				calibrateDisplay();
     f90:	3f dd       	rcall	.-1410   	; 0xa10 <calibrateDisplay>
     f92:	84 e0       	ldi	r24, 0x04	; 4
				nextState(store);				
     f94:	59 db       	rcall	.-2382   	; 0x648 <nextState>
     f96:	ca cf       	rjmp	.-108    	; 0xf2c <main+0x2>
     f98:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <BTN4_flag>
				break;
			
			case store:
				//Select material
				if(BTN4_flag == 1){
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	71 f4       	brne	.+28     	; 0xfbc <main+0x92>
     fa0:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
					materialSelctor ++;
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <materialSelctor>
     faa:	85 30       	cpi	r24, 0x05	; 5
					if(materialSelctor>=NUM_MATERIALS) materialSelctor = 0; 
     fac:	10 f0       	brcs	.+4      	; 0xfb2 <main+0x88>
     fae:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <materialSelctor>
					printMaterial(materialSelctor);
     fb2:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
     fb6:	3c dd       	rcall	.-1416   	; 0xa30 <printMaterial>
     fb8:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <BTN4_flag>
					BTN4_flag = 0;
				}
				
				//Perform calibration when desired material has been selected
				if(BTN3_flag == 1){
     fbc:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <BTN3_flag>
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <main+0x9c>
     fc4:	b3 cf       	rjmp	.-154    	; 0xf2c <main+0x2>
					nextState(calibrate);
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	3f db       	rcall	.-2434   	; 0x648 <nextState>
     fca:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <BTN3_flag>
					BTN3_flag = 0;
     fce:	ae cf       	rjmp	.-164    	; 0xf2c <main+0x2>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
				}
				break;
			
			case reset:
				nextState(run);
     fd2:	3a db       	rcall	.-2444   	; 0x648 <nextState>
     fd4:	ab cf       	rjmp	.-170    	; 0xf2c <main+0x2>

00000fd6 <__vector_21>:
     fd6:	1f 92       	push	r1
			
				break; 
     fd8:	0f 92       	push	r0
// ================================================
// Service Routines
// ================================================

//Service routine for Timer1 Compare B
ISR(TIMER0_COMPA_vect){
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	0b b6       	in	r0, 0x3b	; 59
     fe2:	0f 92       	push	r0
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
//	TOGGLEBIT(PORTB,5);
 	if(timercount != 1){
     ffc:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <timercount>
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	21 f0       	breq	.+8      	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
 		timercount++;		
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <timercount>
    100a:	10 c0       	rjmp	.+32     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
 	}
 	else{
 		timercount = 0;
    100c:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <timercount>
 		TOGGLEBIT(PORTB,6);	
    1010:	95 b1       	in	r25, 0x05	; 5
    1012:	80 e4       	ldi	r24, 0x40	; 64
    1014:	89 27       	eor	r24, r25
    1016:	85 b9       	out	0x05, r24	; 5
		//Start ADC sampling
		if(CHKBIT(PORTB,6) == 0 && ADC_start_flag == 0){
    1018:	2e 99       	sbic	0x05, 6	; 5
    101a:	08 c0       	rjmp	.+16     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    101c:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <ADC_start_flag>
    1020:	81 11       	cpse	r24, r1
    1022:	04 c0       	rjmp	.+8      	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
			ADC_start_flag = 1;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <ADC_start_flag>
			init_adc(1);
    102a:	91 da       	rcall	.-2782   	; 0x54e <init_adc>
			}
		}
}
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0b be       	out	0x3b, r0	; 59
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_29>:



//Service routine for ADC sample ready
ISR(ADC_vect){
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	0b b6       	in	r0, 0x3b	; 59
    105e:	0f 92       	push	r0
    1060:	2f 93       	push	r18
    1062:	3f 93       	push	r19
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	ef 93       	push	r30
    106a:	ff 93       	push	r31
	if(buffercounter < NUM_SAMPLES){
    106c:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <buffercounter>
    1070:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <buffercounter+0x1>
    1074:	80 34       	cpi	r24, 0x40	; 64
    1076:	91 05       	cpc	r25, r1
    1078:	9c f4       	brge	.+38     	; 0x10a0 <__vector_29+0x4e>
		DFTBuffer[active_write][buffercounter] = ADCH;
    107a:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    107e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1082:	30 e4       	ldi	r19, 0x40	; 64
    1084:	e3 9f       	mul	r30, r19
    1086:	f0 01       	movw	r30, r0
    1088:	11 24       	eor	r1, r1
    108a:	e3 52       	subi	r30, 0x23	; 35
    108c:	fc 4f       	sbci	r31, 0xFC	; 252
    108e:	e8 0f       	add	r30, r24
    1090:	f9 1f       	adc	r31, r25
    1092:	20 83       	st	Z, r18
		buffercounter++;
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    109a:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
    109e:	39 c0       	rjmp	.+114    	; 0x1112 <__vector_29+0xc0>
	}
	else if(DFT_ready){
    10a0:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <DFT_ready>
    10a4:	88 23       	and	r24, r24
    10a6:	b1 f0       	breq	.+44     	; 0x10d4 <__vector_29+0x82>
		buffercounter = 0;
    10a8:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <buffercounter+0x1>
    10ac:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <buffercounter>
		DFTBuffer[active_write][buffercounter] = ADCH; 
    10b0:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    10b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    10b8:	90 e4       	ldi	r25, 0x40	; 64
    10ba:	e9 9f       	mul	r30, r25
    10bc:	f0 01       	movw	r30, r0
    10be:	11 24       	eor	r1, r1
    10c0:	e3 52       	subi	r30, 0x23	; 35
    10c2:	fc 4f       	sbci	r31, 0xFC	; 252
    10c4:	80 83       	st	Z, r24
		buffercounter++;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    10ce:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
    10d2:	1f c0       	rjmp	.+62     	; 0x1112 <__vector_29+0xc0>
	}
	else{
		active_write = !active_write;
    10d4:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <active_write>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	91 11       	cpse	r25, r1
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <active_write>
		DFT_ready = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <DFT_ready>
		buffercounter = 0;
    10e8:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <buffercounter+0x1>
    10ec:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <buffercounter>
		DFTBuffer[active_write][buffercounter] = ADCH;	//Save remaining first sample 
    10f0:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    10f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    10f8:	30 e4       	ldi	r19, 0x40	; 64
    10fa:	e3 9f       	mul	r30, r19
    10fc:	f0 01       	movw	r30, r0
    10fe:	11 24       	eor	r1, r1
    1100:	e3 52       	subi	r30, 0x23	; 35
    1102:	fc 4f       	sbci	r31, 0xFC	; 252
    1104:	80 83       	st	Z, r24
		buffercounter++;  
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    110e:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
	}
}
    1112:	ff 91       	pop	r31
    1114:	ef 91       	pop	r30
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0b be       	out	0x3b, r0	; 59
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__vector_4>:


//Service routines for external interrupts (buttons)
ISR(INT3_vect){
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	8f 93       	push	r24
	if(init_flag == 1){
    1138:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	19 f4       	brne	.+6      	; 0x1146 <__vector_4+0x1a>
		init_flag = 0;
    1140:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    1144:	03 c0       	rjmp	.+6      	; 0x114c <__vector_4+0x20>
	}
	else{
	BTN3_flag = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <BTN3_flag>
	}
}
    114c:	8f 91       	pop	r24
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <__vector_5>:

ISR(INT4_vect){
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	8f 93       	push	r24
	if(init_flag == 1){
    1164:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	19 f4       	brne	.+6      	; 0x1172 <__vector_5+0x1a>
		init_flag = 0;
    116c:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <__vector_5+0x20>
	}
	else{
		BTN4_flag = 1;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <BTN4_flag>
	}
}
    1178:	8f 91       	pop	r24
    117a:	0f 90       	pop	r0
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <__vector_6>:

ISR(INT5_vect){
    1184:	1f 92       	push	r1
    1186:	0f 92       	push	r0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	8f 93       	push	r24
	if(init_flag == 1){
    1190:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	19 f4       	brne	.+6      	; 0x119e <__vector_6+0x1a>
		init_flag = 0;
    1198:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <__vector_6+0x20>
	}
	else{
		BTN5_flag = 1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <BTN5_flag>
	}
    11a4:	8f 91       	pop	r24
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <ssd1306_command>:
    11b0:	cf 93       	push	r28
    11b2:	c8 2f       	mov	r28, r24
    11b4:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_i2c_address>
    11b8:	05 da       	rcall	.-3062   	; 0x5c4 <I2C_Start>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	27 da       	rcall	.-2994   	; 0x60c <I2C_Write>
    11be:	8c 2f       	mov	r24, r28
    11c0:	25 da       	rcall	.-2998   	; 0x60c <I2C_Write>
    11c2:	3a da       	rcall	.-2956   	; 0x638 <I2C_Stop>
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <InitializeDisplay>:
    11c8:	8e ea       	ldi	r24, 0xAE	; 174
    11ca:	f2 df       	rcall	.-28     	; 0x11b0 <ssd1306_command>
    11cc:	85 ed       	ldi	r24, 0xD5	; 213
    11ce:	f0 df       	rcall	.-32     	; 0x11b0 <ssd1306_command>
    11d0:	80 e8       	ldi	r24, 0x80	; 128
    11d2:	ee df       	rcall	.-36     	; 0x11b0 <ssd1306_command>
    11d4:	88 ea       	ldi	r24, 0xA8	; 168
    11d6:	ec df       	rcall	.-40     	; 0x11b0 <ssd1306_command>
    11d8:	8f e3       	ldi	r24, 0x3F	; 63
    11da:	ea df       	rcall	.-44     	; 0x11b0 <ssd1306_command>
    11dc:	83 ed       	ldi	r24, 0xD3	; 211
    11de:	e8 df       	rcall	.-48     	; 0x11b0 <ssd1306_command>
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	e6 df       	rcall	.-52     	; 0x11b0 <ssd1306_command>
    11e4:	80 e4       	ldi	r24, 0x40	; 64
    11e6:	e4 df       	rcall	.-56     	; 0x11b0 <ssd1306_command>
    11e8:	8d e8       	ldi	r24, 0x8D	; 141
    11ea:	e2 df       	rcall	.-60     	; 0x11b0 <ssd1306_command>
    11ec:	84 e1       	ldi	r24, 0x14	; 20
    11ee:	e0 df       	rcall	.-64     	; 0x11b0 <ssd1306_command>
    11f0:	80 e2       	ldi	r24, 0x20	; 32
    11f2:	de df       	rcall	.-68     	; 0x11b0 <ssd1306_command>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	dc df       	rcall	.-72     	; 0x11b0 <ssd1306_command>
    11f8:	81 ea       	ldi	r24, 0xA1	; 161
    11fa:	da df       	rcall	.-76     	; 0x11b0 <ssd1306_command>
    11fc:	88 ec       	ldi	r24, 0xC8	; 200
    11fe:	d8 df       	rcall	.-80     	; 0x11b0 <ssd1306_command>
    1200:	8a ed       	ldi	r24, 0xDA	; 218
    1202:	d6 df       	rcall	.-84     	; 0x11b0 <ssd1306_command>
    1204:	82 e1       	ldi	r24, 0x12	; 18
    1206:	d4 df       	rcall	.-88     	; 0x11b0 <ssd1306_command>
    1208:	81 e8       	ldi	r24, 0x81	; 129
    120a:	d2 df       	rcall	.-92     	; 0x11b0 <ssd1306_command>
    120c:	8f ec       	ldi	r24, 0xCF	; 207
    120e:	d0 df       	rcall	.-96     	; 0x11b0 <ssd1306_command>
    1210:	89 ed       	ldi	r24, 0xD9	; 217
    1212:	ce df       	rcall	.-100    	; 0x11b0 <ssd1306_command>
    1214:	81 ef       	ldi	r24, 0xF1	; 241
    1216:	cc df       	rcall	.-104    	; 0x11b0 <ssd1306_command>
    1218:	8b ed       	ldi	r24, 0xDB	; 219
    121a:	ca df       	rcall	.-108    	; 0x11b0 <ssd1306_command>
    121c:	80 e4       	ldi	r24, 0x40	; 64
    121e:	c8 df       	rcall	.-112    	; 0x11b0 <ssd1306_command>
    1220:	84 ea       	ldi	r24, 0xA4	; 164
    1222:	c6 df       	rcall	.-116    	; 0x11b0 <ssd1306_command>
    1224:	86 ea       	ldi	r24, 0xA6	; 166
    1226:	c4 df       	rcall	.-120    	; 0x11b0 <ssd1306_command>
    1228:	8f ea       	ldi	r24, 0xAF	; 175
    122a:	c2 cf       	rjmp	.-124    	; 0x11b0 <ssd1306_command>
    122c:	08 95       	ret

0000122e <SendChar>:
    122e:	cf 93       	push	r28
    1230:	c8 2f       	mov	r28, r24
    1232:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_i2c_address>
    1236:	c6 d9       	rcall	.-3188   	; 0x5c4 <I2C_Start>
    1238:	80 e4       	ldi	r24, 0x40	; 64
    123a:	e8 d9       	rcall	.-3120   	; 0x60c <I2C_Write>
    123c:	8c 2f       	mov	r24, r28
    123e:	e6 d9       	rcall	.-3124   	; 0x60c <I2C_Write>
    1240:	fb d9       	rcall	.-3082   	; 0x638 <I2C_Stop>
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <setXY>:
    1246:	cf 93       	push	r28
    1248:	c6 2f       	mov	r28, r22
    124a:	80 55       	subi	r24, 0x50	; 80
    124c:	b1 df       	rcall	.-158    	; 0x11b0 <ssd1306_command>
    124e:	8c 2f       	mov	r24, r28
    1250:	88 0f       	add	r24, r24
    1252:	88 0f       	add	r24, r24
    1254:	88 0f       	add	r24, r24
    1256:	88 70       	andi	r24, 0x08	; 8
    1258:	ab df       	rcall	.-170    	; 0x11b0 <ssd1306_command>
    125a:	8c 2f       	mov	r24, r28
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	96 95       	lsr	r25
    1260:	87 95       	ror	r24
    1262:	8f 70       	andi	r24, 0x0F	; 15
    1264:	80 5f       	subi	r24, 0xF0	; 240
    1266:	a4 df       	rcall	.-184    	; 0x11b0 <ssd1306_command>
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <clear_display>:
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	d0 e0       	ldi	r29, 0x00	; 0
    1272:	0b c0       	rjmp	.+22     	; 0x128a <clear_display+0x1e>
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	8d 2f       	mov	r24, r29
    1278:	e6 df       	rcall	.-52     	; 0x1246 <setXY>
    127a:	c0 e0       	ldi	r28, 0x00	; 0
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <clear_display+0x18>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	d6 df       	rcall	.-84     	; 0x122e <SendChar>
    1282:	cf 5f       	subi	r28, 0xFF	; 255
    1284:	cc 23       	and	r28, r28
    1286:	dc f7       	brge	.-10     	; 0x127e <clear_display+0x12>
    1288:	df 5f       	subi	r29, 0xFF	; 255
    128a:	d8 30       	cpi	r29, 0x08	; 8
    128c:	98 f3       	brcs	.-26     	; 0x1274 <clear_display+0x8>
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <sendStrXY>:
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	ec 01       	movw	r28, r24
    129e:	86 2f       	mov	r24, r22
    12a0:	06 2f       	mov	r16, r22
    12a2:	64 2f       	mov	r22, r20
    12a4:	d0 df       	rcall	.-96     	; 0x1246 <setXY>
    12a6:	1c c0       	rjmp	.+56     	; 0x12e0 <sendStrXY+0x4c>
    12a8:	8a 30       	cpi	r24, 0x0A	; 10
    12aa:	29 f4       	brne	.+10     	; 0x12b6 <sendStrXY+0x22>
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	80 0f       	add	r24, r16
    12b2:	c9 df       	rcall	.-110    	; 0x1246 <setXY>
    12b4:	21 96       	adiw	r28, 0x01	; 1
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	10 c0       	rjmp	.+32     	; 0x12da <sendStrXY+0x46>
    12ba:	e8 81       	ld	r30, Y
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	b0 97       	sbiw	r30, 0x20	; 32
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	e4 5f       	subi	r30, 0xF4	; 244
    12ce:	fd 4f       	sbci	r31, 0xFD	; 253
    12d0:	e1 0f       	add	r30, r17
    12d2:	f1 1d       	adc	r31, r1
    12d4:	84 91       	lpm	r24, Z
    12d6:	ab df       	rcall	.-170    	; 0x122e <SendChar>
    12d8:	1f 5f       	subi	r17, 0xFF	; 255
    12da:	18 30       	cpi	r17, 0x08	; 8
    12dc:	70 f3       	brcs	.-36     	; 0x12ba <sendStrXY+0x26>
    12de:	21 96       	adiw	r28, 0x01	; 1
    12e0:	88 81       	ld	r24, Y
    12e2:	81 11       	cpse	r24, r1
    12e4:	e1 cf       	rjmp	.-62     	; 0x12a8 <sendStrXY+0x14>
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <print_fonts>:
    12f0:	df 92       	push	r13
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	b6 df       	rcall	.-148    	; 0x126c <clear_display>
    1300:	e1 2c       	mov	r14, r1
    1302:	f1 2c       	mov	r15, r1
    1304:	68 94       	set
    1306:	dd 24       	eor	r13, r13
    1308:	d5 f8       	bld	r13, 5
    130a:	27 c0       	rjmp	.+78     	; 0x135a <print_fonts+0x6a>
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	8e 2d       	mov	r24, r14
    1310:	9a df       	rcall	.-204    	; 0x1246 <setXY>
    1312:	00 e0       	ldi	r16, 0x00	; 0
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	19 c0       	rjmp	.+50     	; 0x134a <print_fonts+0x5a>
    1318:	f8 01       	movw	r30, r16
    131a:	ed 0d       	add	r30, r13
    131c:	f1 1d       	adc	r31, r1
    131e:	b0 97       	sbiw	r30, 0x20	; 32
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	e4 5f       	subi	r30, 0xF4	; 244
    132e:	fd 4f       	sbci	r31, 0xFD	; 253
    1330:	ec 0f       	add	r30, r28
    1332:	fd 1f       	adc	r31, r29
    1334:	84 91       	lpm	r24, Z
    1336:	7b df       	rcall	.-266    	; 0x122e <SendChar>
    1338:	21 96       	adiw	r28, 0x01	; 1
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <print_fonts+0x50>
    133c:	c0 e0       	ldi	r28, 0x00	; 0
    133e:	d0 e0       	ldi	r29, 0x00	; 0
    1340:	c8 30       	cpi	r28, 0x08	; 8
    1342:	d1 05       	cpc	r29, r1
    1344:	4c f3       	brlt	.-46     	; 0x1318 <print_fonts+0x28>
    1346:	0f 5f       	subi	r16, 0xFF	; 255
    1348:	1f 4f       	sbci	r17, 0xFF	; 255
    134a:	00 31       	cpi	r16, 0x10	; 16
    134c:	11 05       	cpc	r17, r1
    134e:	b4 f3       	brlt	.-20     	; 0x133c <print_fonts+0x4c>
    1350:	80 e1       	ldi	r24, 0x10	; 16
    1352:	d8 0e       	add	r13, r24
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	e8 1a       	sub	r14, r24
    1358:	f8 0a       	sbc	r15, r24
    135a:	86 e0       	ldi	r24, 0x06	; 6
    135c:	e8 16       	cp	r14, r24
    135e:	f1 04       	cpc	r15, r1
    1360:	ac f2       	brlt	.-86     	; 0x130c <print_fonts+0x1c>
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	08 95       	ret

00001372 <init_timer0>:
    1372:	84 b1       	in	r24, 0x04	; 4
    1374:	80 68       	ori	r24, 0x80	; 128
    1376:	84 b9       	out	0x04, r24	; 4
    1378:	84 b5       	in	r24, 0x24	; 36
    137a:	82 64       	ori	r24, 0x42	; 66
    137c:	84 bd       	out	0x24, r24	; 36
    137e:	85 b5       	in	r24, 0x25	; 37
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	85 bd       	out	0x25, r24	; 37
    1384:	16 bc       	out	0x26, r1	; 38
    1386:	89 ef       	ldi	r24, 0xF9	; 249
    1388:	87 bd       	out	0x27, r24	; 39
    138a:	ee e6       	ldi	r30, 0x6E	; 110
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	82 60       	ori	r24, 0x02	; 2
    1392:	80 83       	st	Z, r24
    1394:	08 95       	ret

00001396 <__subsf3>:
    1396:	50 58       	subi	r21, 0x80	; 128

00001398 <__addsf3>:
    1398:	bb 27       	eor	r27, r27
    139a:	aa 27       	eor	r26, r26
    139c:	0e d0       	rcall	.+28     	; 0x13ba <__addsf3x>
    139e:	c9 c1       	rjmp	.+914    	; 0x1732 <__fp_round>
    13a0:	ba d1       	rcall	.+884    	; 0x1716 <__fp_pscA>
    13a2:	30 f0       	brcs	.+12     	; 0x13b0 <__addsf3+0x18>
    13a4:	bf d1       	rcall	.+894    	; 0x1724 <__fp_pscB>
    13a6:	20 f0       	brcs	.+8      	; 0x13b0 <__addsf3+0x18>
    13a8:	31 f4       	brne	.+12     	; 0x13b6 <__addsf3+0x1e>
    13aa:	9f 3f       	cpi	r25, 0xFF	; 255
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <__addsf3+0x1a>
    13ae:	1e f4       	brtc	.+6      	; 0x13b6 <__addsf3+0x1e>
    13b0:	8a c1       	rjmp	.+788    	; 0x16c6 <__fp_nan>
    13b2:	0e f4       	brtc	.+2      	; 0x13b6 <__addsf3+0x1e>
    13b4:	e0 95       	com	r30
    13b6:	e7 fb       	bst	r30, 7
    13b8:	80 c1       	rjmp	.+768    	; 0x16ba <__fp_inf>

000013ba <__addsf3x>:
    13ba:	e9 2f       	mov	r30, r25
    13bc:	cb d1       	rcall	.+918    	; 0x1754 <__fp_split3>
    13be:	80 f3       	brcs	.-32     	; 0x13a0 <__addsf3+0x8>
    13c0:	ba 17       	cp	r27, r26
    13c2:	62 07       	cpc	r22, r18
    13c4:	73 07       	cpc	r23, r19
    13c6:	84 07       	cpc	r24, r20
    13c8:	95 07       	cpc	r25, r21
    13ca:	18 f0       	brcs	.+6      	; 0x13d2 <__addsf3x+0x18>
    13cc:	71 f4       	brne	.+28     	; 0x13ea <__addsf3x+0x30>
    13ce:	9e f5       	brtc	.+102    	; 0x1436 <__addsf3x+0x7c>
    13d0:	e3 c1       	rjmp	.+966    	; 0x1798 <__fp_zero>
    13d2:	0e f4       	brtc	.+2      	; 0x13d6 <__addsf3x+0x1c>
    13d4:	e0 95       	com	r30
    13d6:	0b 2e       	mov	r0, r27
    13d8:	ba 2f       	mov	r27, r26
    13da:	a0 2d       	mov	r26, r0
    13dc:	0b 01       	movw	r0, r22
    13de:	b9 01       	movw	r22, r18
    13e0:	90 01       	movw	r18, r0
    13e2:	0c 01       	movw	r0, r24
    13e4:	ca 01       	movw	r24, r20
    13e6:	a0 01       	movw	r20, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	ff 27       	eor	r31, r31
    13ec:	59 1b       	sub	r21, r25
    13ee:	99 f0       	breq	.+38     	; 0x1416 <__addsf3x+0x5c>
    13f0:	59 3f       	cpi	r21, 0xF9	; 249
    13f2:	50 f4       	brcc	.+20     	; 0x1408 <__addsf3x+0x4e>
    13f4:	50 3e       	cpi	r21, 0xE0	; 224
    13f6:	68 f1       	brcs	.+90     	; 0x1452 <__addsf3x+0x98>
    13f8:	1a 16       	cp	r1, r26
    13fa:	f0 40       	sbci	r31, 0x00	; 0
    13fc:	a2 2f       	mov	r26, r18
    13fe:	23 2f       	mov	r18, r19
    1400:	34 2f       	mov	r19, r20
    1402:	44 27       	eor	r20, r20
    1404:	58 5f       	subi	r21, 0xF8	; 248
    1406:	f3 cf       	rjmp	.-26     	; 0x13ee <__addsf3x+0x34>
    1408:	46 95       	lsr	r20
    140a:	37 95       	ror	r19
    140c:	27 95       	ror	r18
    140e:	a7 95       	ror	r26
    1410:	f0 40       	sbci	r31, 0x00	; 0
    1412:	53 95       	inc	r21
    1414:	c9 f7       	brne	.-14     	; 0x1408 <__addsf3x+0x4e>
    1416:	7e f4       	brtc	.+30     	; 0x1436 <__addsf3x+0x7c>
    1418:	1f 16       	cp	r1, r31
    141a:	ba 0b       	sbc	r27, r26
    141c:	62 0b       	sbc	r22, r18
    141e:	73 0b       	sbc	r23, r19
    1420:	84 0b       	sbc	r24, r20
    1422:	ba f0       	brmi	.+46     	; 0x1452 <__addsf3x+0x98>
    1424:	91 50       	subi	r25, 0x01	; 1
    1426:	a1 f0       	breq	.+40     	; 0x1450 <__addsf3x+0x96>
    1428:	ff 0f       	add	r31, r31
    142a:	bb 1f       	adc	r27, r27
    142c:	66 1f       	adc	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	88 1f       	adc	r24, r24
    1432:	c2 f7       	brpl	.-16     	; 0x1424 <__addsf3x+0x6a>
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <__addsf3x+0x98>
    1436:	ba 0f       	add	r27, r26
    1438:	62 1f       	adc	r22, r18
    143a:	73 1f       	adc	r23, r19
    143c:	84 1f       	adc	r24, r20
    143e:	48 f4       	brcc	.+18     	; 0x1452 <__addsf3x+0x98>
    1440:	87 95       	ror	r24
    1442:	77 95       	ror	r23
    1444:	67 95       	ror	r22
    1446:	b7 95       	ror	r27
    1448:	f7 95       	ror	r31
    144a:	9e 3f       	cpi	r25, 0xFE	; 254
    144c:	08 f0       	brcs	.+2      	; 0x1450 <__addsf3x+0x96>
    144e:	b3 cf       	rjmp	.-154    	; 0x13b6 <__addsf3+0x1e>
    1450:	93 95       	inc	r25
    1452:	88 0f       	add	r24, r24
    1454:	08 f0       	brcs	.+2      	; 0x1458 <__addsf3x+0x9e>
    1456:	99 27       	eor	r25, r25
    1458:	ee 0f       	add	r30, r30
    145a:	97 95       	ror	r25
    145c:	87 95       	ror	r24
    145e:	08 95       	ret
    1460:	5a d1       	rcall	.+692    	; 0x1716 <__fp_pscA>
    1462:	58 f0       	brcs	.+22     	; 0x147a <__addsf3x+0xc0>
    1464:	80 e8       	ldi	r24, 0x80	; 128
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	09 f4       	brne	.+2      	; 0x146c <__addsf3x+0xb2>
    146a:	9e ef       	ldi	r25, 0xFE	; 254
    146c:	5b d1       	rcall	.+694    	; 0x1724 <__fp_pscB>
    146e:	28 f0       	brcs	.+10     	; 0x147a <__addsf3x+0xc0>
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	51 e0       	ldi	r21, 0x01	; 1
    1474:	59 f4       	brne	.+22     	; 0x148c <atan2+0xe>
    1476:	5e ef       	ldi	r21, 0xFE	; 254
    1478:	09 c0       	rjmp	.+18     	; 0x148c <atan2+0xe>
    147a:	25 c1       	rjmp	.+586    	; 0x16c6 <__fp_nan>
    147c:	8d c1       	rjmp	.+794    	; 0x1798 <__fp_zero>

0000147e <atan2>:
    147e:	e9 2f       	mov	r30, r25
    1480:	e0 78       	andi	r30, 0x80	; 128
    1482:	68 d1       	rcall	.+720    	; 0x1754 <__fp_split3>
    1484:	68 f3       	brcs	.-38     	; 0x1460 <__addsf3x+0xa6>
    1486:	09 2e       	mov	r0, r25
    1488:	05 2a       	or	r0, r21
    148a:	c1 f3       	breq	.-16     	; 0x147c <__addsf3x+0xc2>
    148c:	26 17       	cp	r18, r22
    148e:	37 07       	cpc	r19, r23
    1490:	48 07       	cpc	r20, r24
    1492:	59 07       	cpc	r21, r25
    1494:	38 f0       	brcs	.+14     	; 0x14a4 <atan2+0x26>
    1496:	0e 2e       	mov	r0, r30
    1498:	07 f8       	bld	r0, 7
    149a:	e0 25       	eor	r30, r0
    149c:	69 f0       	breq	.+26     	; 0x14b8 <atan2+0x3a>
    149e:	e0 25       	eor	r30, r0
    14a0:	e0 64       	ori	r30, 0x40	; 64
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <atan2+0x3a>
    14a4:	ef 63       	ori	r30, 0x3F	; 63
    14a6:	07 f8       	bld	r0, 7
    14a8:	00 94       	com	r0
    14aa:	07 fa       	bst	r0, 7
    14ac:	db 01       	movw	r26, r22
    14ae:	b9 01       	movw	r22, r18
    14b0:	9d 01       	movw	r18, r26
    14b2:	dc 01       	movw	r26, r24
    14b4:	ca 01       	movw	r24, r20
    14b6:	ad 01       	movw	r20, r26
    14b8:	ef 93       	push	r30
    14ba:	45 d0       	rcall	.+138    	; 0x1546 <__divsf3_pse>
    14bc:	3a d1       	rcall	.+628    	; 0x1732 <__fp_round>
    14be:	0a d0       	rcall	.+20     	; 0x14d4 <atan>
    14c0:	5f 91       	pop	r21
    14c2:	55 23       	and	r21, r21
    14c4:	31 f0       	breq	.+12     	; 0x14d2 <atan2+0x54>
    14c6:	2b ed       	ldi	r18, 0xDB	; 219
    14c8:	3f e0       	ldi	r19, 0x0F	; 15
    14ca:	49 e4       	ldi	r20, 0x49	; 73
    14cc:	50 fd       	sbrc	r21, 0
    14ce:	49 ec       	ldi	r20, 0xC9	; 201
    14d0:	63 cf       	rjmp	.-314    	; 0x1398 <__addsf3>
    14d2:	08 95       	ret

000014d4 <atan>:
    14d4:	df 93       	push	r29
    14d6:	dd 27       	eor	r29, r29
    14d8:	b9 2f       	mov	r27, r25
    14da:	bf 77       	andi	r27, 0x7F	; 127
    14dc:	40 e8       	ldi	r20, 0x80	; 128
    14de:	5f e3       	ldi	r21, 0x3F	; 63
    14e0:	16 16       	cp	r1, r22
    14e2:	17 06       	cpc	r1, r23
    14e4:	48 07       	cpc	r20, r24
    14e6:	5b 07       	cpc	r21, r27
    14e8:	10 f4       	brcc	.+4      	; 0x14ee <atan+0x1a>
    14ea:	d9 2f       	mov	r29, r25
    14ec:	60 d1       	rcall	.+704    	; 0x17ae <inverse>
    14ee:	9f 93       	push	r25
    14f0:	8f 93       	push	r24
    14f2:	7f 93       	push	r23
    14f4:	6f 93       	push	r22
    14f6:	07 d2       	rcall	.+1038   	; 0x1906 <square>
    14f8:	e4 ee       	ldi	r30, 0xE4	; 228
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	e7 d0       	rcall	.+462    	; 0x16cc <__fp_powser>
    14fe:	19 d1       	rcall	.+562    	; 0x1732 <__fp_round>
    1500:	2f 91       	pop	r18
    1502:	3f 91       	pop	r19
    1504:	4f 91       	pop	r20
    1506:	5f 91       	pop	r21
    1508:	65 d1       	rcall	.+714    	; 0x17d4 <__mulsf3x>
    150a:	dd 23       	and	r29, r29
    150c:	49 f0       	breq	.+18     	; 0x1520 <atan+0x4c>
    150e:	90 58       	subi	r25, 0x80	; 128
    1510:	a2 ea       	ldi	r26, 0xA2	; 162
    1512:	2a ed       	ldi	r18, 0xDA	; 218
    1514:	3f e0       	ldi	r19, 0x0F	; 15
    1516:	49 ec       	ldi	r20, 0xC9	; 201
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	d0 78       	andi	r29, 0x80	; 128
    151c:	5d 27       	eor	r21, r29
    151e:	4d df       	rcall	.-358    	; 0x13ba <__addsf3x>
    1520:	df 91       	pop	r29
    1522:	07 c1       	rjmp	.+526    	; 0x1732 <__fp_round>

00001524 <__cmpsf2>:
    1524:	a6 d0       	rcall	.+332    	; 0x1672 <__fp_cmp>
    1526:	08 f4       	brcc	.+2      	; 0x152a <__cmpsf2+0x6>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	08 95       	ret
    152c:	fb d0       	rcall	.+502    	; 0x1724 <__fp_pscB>
    152e:	40 f0       	brcs	.+16     	; 0x1540 <__cmpsf2+0x1c>
    1530:	f2 d0       	rcall	.+484    	; 0x1716 <__fp_pscA>
    1532:	30 f0       	brcs	.+12     	; 0x1540 <__cmpsf2+0x1c>
    1534:	21 f4       	brne	.+8      	; 0x153e <__cmpsf2+0x1a>
    1536:	5f 3f       	cpi	r21, 0xFF	; 255
    1538:	19 f0       	breq	.+6      	; 0x1540 <__cmpsf2+0x1c>
    153a:	bf c0       	rjmp	.+382    	; 0x16ba <__fp_inf>
    153c:	51 11       	cpse	r21, r1
    153e:	2d c1       	rjmp	.+602    	; 0x179a <__fp_szero>
    1540:	c2 c0       	rjmp	.+388    	; 0x16c6 <__fp_nan>

00001542 <__divsf3x>:
    1542:	08 d1       	rcall	.+528    	; 0x1754 <__fp_split3>
    1544:	98 f3       	brcs	.-26     	; 0x152c <__cmpsf2+0x8>

00001546 <__divsf3_pse>:
    1546:	99 23       	and	r25, r25
    1548:	c9 f3       	breq	.-14     	; 0x153c <__cmpsf2+0x18>
    154a:	55 23       	and	r21, r21
    154c:	b1 f3       	breq	.-20     	; 0x153a <__cmpsf2+0x16>
    154e:	95 1b       	sub	r25, r21
    1550:	55 0b       	sbc	r21, r21
    1552:	bb 27       	eor	r27, r27
    1554:	aa 27       	eor	r26, r26
    1556:	62 17       	cp	r22, r18
    1558:	73 07       	cpc	r23, r19
    155a:	84 07       	cpc	r24, r20
    155c:	38 f0       	brcs	.+14     	; 0x156c <__divsf3_pse+0x26>
    155e:	9f 5f       	subi	r25, 0xFF	; 255
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	44 1f       	adc	r20, r20
    1568:	aa 1f       	adc	r26, r26
    156a:	a9 f3       	breq	.-22     	; 0x1556 <__divsf3_pse+0x10>
    156c:	33 d0       	rcall	.+102    	; 0x15d4 <__divsf3_pse+0x8e>
    156e:	0e 2e       	mov	r0, r30
    1570:	3a f0       	brmi	.+14     	; 0x1580 <__divsf3_pse+0x3a>
    1572:	e0 e8       	ldi	r30, 0x80	; 128
    1574:	30 d0       	rcall	.+96     	; 0x15d6 <__divsf3_pse+0x90>
    1576:	91 50       	subi	r25, 0x01	; 1
    1578:	50 40       	sbci	r21, 0x00	; 0
    157a:	e6 95       	lsr	r30
    157c:	00 1c       	adc	r0, r0
    157e:	ca f7       	brpl	.-14     	; 0x1572 <__divsf3_pse+0x2c>
    1580:	29 d0       	rcall	.+82     	; 0x15d4 <__divsf3_pse+0x8e>
    1582:	fe 2f       	mov	r31, r30
    1584:	27 d0       	rcall	.+78     	; 0x15d4 <__divsf3_pse+0x8e>
    1586:	66 0f       	add	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	88 1f       	adc	r24, r24
    158c:	bb 1f       	adc	r27, r27
    158e:	26 17       	cp	r18, r22
    1590:	37 07       	cpc	r19, r23
    1592:	48 07       	cpc	r20, r24
    1594:	ab 07       	cpc	r26, r27
    1596:	b0 e8       	ldi	r27, 0x80	; 128
    1598:	09 f0       	breq	.+2      	; 0x159c <__divsf3_pse+0x56>
    159a:	bb 0b       	sbc	r27, r27
    159c:	80 2d       	mov	r24, r0
    159e:	bf 01       	movw	r22, r30
    15a0:	ff 27       	eor	r31, r31
    15a2:	93 58       	subi	r25, 0x83	; 131
    15a4:	5f 4f       	sbci	r21, 0xFF	; 255
    15a6:	2a f0       	brmi	.+10     	; 0x15b2 <__divsf3_pse+0x6c>
    15a8:	9e 3f       	cpi	r25, 0xFE	; 254
    15aa:	51 05       	cpc	r21, r1
    15ac:	68 f0       	brcs	.+26     	; 0x15c8 <__divsf3_pse+0x82>
    15ae:	85 c0       	rjmp	.+266    	; 0x16ba <__fp_inf>
    15b0:	f4 c0       	rjmp	.+488    	; 0x179a <__fp_szero>
    15b2:	5f 3f       	cpi	r21, 0xFF	; 255
    15b4:	ec f3       	brlt	.-6      	; 0x15b0 <__divsf3_pse+0x6a>
    15b6:	98 3e       	cpi	r25, 0xE8	; 232
    15b8:	dc f3       	brlt	.-10     	; 0x15b0 <__divsf3_pse+0x6a>
    15ba:	86 95       	lsr	r24
    15bc:	77 95       	ror	r23
    15be:	67 95       	ror	r22
    15c0:	b7 95       	ror	r27
    15c2:	f7 95       	ror	r31
    15c4:	9f 5f       	subi	r25, 0xFF	; 255
    15c6:	c9 f7       	brne	.-14     	; 0x15ba <__divsf3_pse+0x74>
    15c8:	88 0f       	add	r24, r24
    15ca:	91 1d       	adc	r25, r1
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	97 f9       	bld	r25, 7
    15d2:	08 95       	ret
    15d4:	e1 e0       	ldi	r30, 0x01	; 1
    15d6:	66 0f       	add	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	88 1f       	adc	r24, r24
    15dc:	bb 1f       	adc	r27, r27
    15de:	62 17       	cp	r22, r18
    15e0:	73 07       	cpc	r23, r19
    15e2:	84 07       	cpc	r24, r20
    15e4:	ba 07       	cpc	r27, r26
    15e6:	20 f0       	brcs	.+8      	; 0x15f0 <__divsf3_pse+0xaa>
    15e8:	62 1b       	sub	r22, r18
    15ea:	73 0b       	sbc	r23, r19
    15ec:	84 0b       	sbc	r24, r20
    15ee:	ba 0b       	sbc	r27, r26
    15f0:	ee 1f       	adc	r30, r30
    15f2:	88 f7       	brcc	.-30     	; 0x15d6 <__divsf3_pse+0x90>
    15f4:	e0 95       	com	r30
    15f6:	08 95       	ret

000015f8 <__floatunsisf>:
    15f8:	e8 94       	clt
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <__floatsisf+0x12>

000015fc <__floatsisf>:
    15fc:	97 fb       	bst	r25, 7
    15fe:	3e f4       	brtc	.+14     	; 0x160e <__floatsisf+0x12>
    1600:	90 95       	com	r25
    1602:	80 95       	com	r24
    1604:	70 95       	com	r23
    1606:	61 95       	neg	r22
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	99 23       	and	r25, r25
    1610:	a9 f0       	breq	.+42     	; 0x163c <__floatsisf+0x40>
    1612:	f9 2f       	mov	r31, r25
    1614:	96 e9       	ldi	r25, 0x96	; 150
    1616:	bb 27       	eor	r27, r27
    1618:	93 95       	inc	r25
    161a:	f6 95       	lsr	r31
    161c:	87 95       	ror	r24
    161e:	77 95       	ror	r23
    1620:	67 95       	ror	r22
    1622:	b7 95       	ror	r27
    1624:	f1 11       	cpse	r31, r1
    1626:	f8 cf       	rjmp	.-16     	; 0x1618 <__floatsisf+0x1c>
    1628:	fa f4       	brpl	.+62     	; 0x1668 <__floatsisf+0x6c>
    162a:	bb 0f       	add	r27, r27
    162c:	11 f4       	brne	.+4      	; 0x1632 <__floatsisf+0x36>
    162e:	60 ff       	sbrs	r22, 0
    1630:	1b c0       	rjmp	.+54     	; 0x1668 <__floatsisf+0x6c>
    1632:	6f 5f       	subi	r22, 0xFF	; 255
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	8f 4f       	sbci	r24, 0xFF	; 255
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	16 c0       	rjmp	.+44     	; 0x1668 <__floatsisf+0x6c>
    163c:	88 23       	and	r24, r24
    163e:	11 f0       	breq	.+4      	; 0x1644 <__floatsisf+0x48>
    1640:	96 e9       	ldi	r25, 0x96	; 150
    1642:	11 c0       	rjmp	.+34     	; 0x1666 <__floatsisf+0x6a>
    1644:	77 23       	and	r23, r23
    1646:	21 f0       	breq	.+8      	; 0x1650 <__floatsisf+0x54>
    1648:	9e e8       	ldi	r25, 0x8E	; 142
    164a:	87 2f       	mov	r24, r23
    164c:	76 2f       	mov	r23, r22
    164e:	05 c0       	rjmp	.+10     	; 0x165a <__floatsisf+0x5e>
    1650:	66 23       	and	r22, r22
    1652:	71 f0       	breq	.+28     	; 0x1670 <__floatsisf+0x74>
    1654:	96 e8       	ldi	r25, 0x86	; 134
    1656:	86 2f       	mov	r24, r22
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	2a f0       	brmi	.+10     	; 0x1668 <__floatsisf+0x6c>
    165e:	9a 95       	dec	r25
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	88 1f       	adc	r24, r24
    1666:	da f7       	brpl	.-10     	; 0x165e <__floatsisf+0x62>
    1668:	88 0f       	add	r24, r24
    166a:	96 95       	lsr	r25
    166c:	87 95       	ror	r24
    166e:	97 f9       	bld	r25, 7
    1670:	08 95       	ret

00001672 <__fp_cmp>:
    1672:	99 0f       	add	r25, r25
    1674:	00 08       	sbc	r0, r0
    1676:	55 0f       	add	r21, r21
    1678:	aa 0b       	sbc	r26, r26
    167a:	e0 e8       	ldi	r30, 0x80	; 128
    167c:	fe ef       	ldi	r31, 0xFE	; 254
    167e:	16 16       	cp	r1, r22
    1680:	17 06       	cpc	r1, r23
    1682:	e8 07       	cpc	r30, r24
    1684:	f9 07       	cpc	r31, r25
    1686:	c0 f0       	brcs	.+48     	; 0x16b8 <__fp_cmp+0x46>
    1688:	12 16       	cp	r1, r18
    168a:	13 06       	cpc	r1, r19
    168c:	e4 07       	cpc	r30, r20
    168e:	f5 07       	cpc	r31, r21
    1690:	98 f0       	brcs	.+38     	; 0x16b8 <__fp_cmp+0x46>
    1692:	62 1b       	sub	r22, r18
    1694:	73 0b       	sbc	r23, r19
    1696:	84 0b       	sbc	r24, r20
    1698:	95 0b       	sbc	r25, r21
    169a:	39 f4       	brne	.+14     	; 0x16aa <__fp_cmp+0x38>
    169c:	0a 26       	eor	r0, r26
    169e:	61 f0       	breq	.+24     	; 0x16b8 <__fp_cmp+0x46>
    16a0:	23 2b       	or	r18, r19
    16a2:	24 2b       	or	r18, r20
    16a4:	25 2b       	or	r18, r21
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <__fp_cmp+0x3e>
    16a8:	08 95       	ret
    16aa:	0a 26       	eor	r0, r26
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <__fp_cmp+0x3e>
    16ae:	a1 40       	sbci	r26, 0x01	; 1
    16b0:	a6 95       	lsr	r26
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	81 1d       	adc	r24, r1
    16b6:	81 1d       	adc	r24, r1
    16b8:	08 95       	ret

000016ba <__fp_inf>:
    16ba:	97 f9       	bld	r25, 7
    16bc:	9f 67       	ori	r25, 0x7F	; 127
    16be:	80 e8       	ldi	r24, 0x80	; 128
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	08 95       	ret

000016c6 <__fp_nan>:
    16c6:	9f ef       	ldi	r25, 0xFF	; 255
    16c8:	80 ec       	ldi	r24, 0xC0	; 192
    16ca:	08 95       	ret

000016cc <__fp_powser>:
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	1f 93       	push	r17
    16d2:	0f 93       	push	r16
    16d4:	ff 92       	push	r15
    16d6:	ef 92       	push	r14
    16d8:	df 92       	push	r13
    16da:	7b 01       	movw	r14, r22
    16dc:	8c 01       	movw	r16, r24
    16de:	68 94       	set
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <__fp_powser+0x20>
    16e2:	da 2e       	mov	r13, r26
    16e4:	ef 01       	movw	r28, r30
    16e6:	76 d0       	rcall	.+236    	; 0x17d4 <__mulsf3x>
    16e8:	fe 01       	movw	r30, r28
    16ea:	e8 94       	clt
    16ec:	a5 91       	lpm	r26, Z+
    16ee:	25 91       	lpm	r18, Z+
    16f0:	35 91       	lpm	r19, Z+
    16f2:	45 91       	lpm	r20, Z+
    16f4:	55 91       	lpm	r21, Z+
    16f6:	ae f3       	brts	.-22     	; 0x16e2 <__fp_powser+0x16>
    16f8:	ef 01       	movw	r28, r30
    16fa:	5f de       	rcall	.-834    	; 0x13ba <__addsf3x>
    16fc:	fe 01       	movw	r30, r28
    16fe:	97 01       	movw	r18, r14
    1700:	a8 01       	movw	r20, r16
    1702:	da 94       	dec	r13
    1704:	79 f7       	brne	.-34     	; 0x16e4 <__fp_powser+0x18>
    1706:	df 90       	pop	r13
    1708:	ef 90       	pop	r14
    170a:	ff 90       	pop	r15
    170c:	0f 91       	pop	r16
    170e:	1f 91       	pop	r17
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <__fp_pscA>:
    1716:	00 24       	eor	r0, r0
    1718:	0a 94       	dec	r0
    171a:	16 16       	cp	r1, r22
    171c:	17 06       	cpc	r1, r23
    171e:	18 06       	cpc	r1, r24
    1720:	09 06       	cpc	r0, r25
    1722:	08 95       	ret

00001724 <__fp_pscB>:
    1724:	00 24       	eor	r0, r0
    1726:	0a 94       	dec	r0
    1728:	12 16       	cp	r1, r18
    172a:	13 06       	cpc	r1, r19
    172c:	14 06       	cpc	r1, r20
    172e:	05 06       	cpc	r0, r21
    1730:	08 95       	ret

00001732 <__fp_round>:
    1732:	09 2e       	mov	r0, r25
    1734:	03 94       	inc	r0
    1736:	00 0c       	add	r0, r0
    1738:	11 f4       	brne	.+4      	; 0x173e <__fp_round+0xc>
    173a:	88 23       	and	r24, r24
    173c:	52 f0       	brmi	.+20     	; 0x1752 <__fp_round+0x20>
    173e:	bb 0f       	add	r27, r27
    1740:	40 f4       	brcc	.+16     	; 0x1752 <__fp_round+0x20>
    1742:	bf 2b       	or	r27, r31
    1744:	11 f4       	brne	.+4      	; 0x174a <__fp_round+0x18>
    1746:	60 ff       	sbrs	r22, 0
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__fp_round+0x20>
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__fp_split3>:
    1754:	57 fd       	sbrc	r21, 7
    1756:	90 58       	subi	r25, 0x80	; 128
    1758:	44 0f       	add	r20, r20
    175a:	55 1f       	adc	r21, r21
    175c:	59 f0       	breq	.+22     	; 0x1774 <__fp_splitA+0x10>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	71 f0       	breq	.+28     	; 0x177e <__fp_splitA+0x1a>
    1762:	47 95       	ror	r20

00001764 <__fp_splitA>:
    1764:	88 0f       	add	r24, r24
    1766:	97 fb       	bst	r25, 7
    1768:	99 1f       	adc	r25, r25
    176a:	61 f0       	breq	.+24     	; 0x1784 <__fp_splitA+0x20>
    176c:	9f 3f       	cpi	r25, 0xFF	; 255
    176e:	79 f0       	breq	.+30     	; 0x178e <__fp_splitA+0x2a>
    1770:	87 95       	ror	r24
    1772:	08 95       	ret
    1774:	12 16       	cp	r1, r18
    1776:	13 06       	cpc	r1, r19
    1778:	14 06       	cpc	r1, r20
    177a:	55 1f       	adc	r21, r21
    177c:	f2 cf       	rjmp	.-28     	; 0x1762 <__fp_split3+0xe>
    177e:	46 95       	lsr	r20
    1780:	f1 df       	rcall	.-30     	; 0x1764 <__fp_splitA>
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <__fp_splitA+0x30>
    1784:	16 16       	cp	r1, r22
    1786:	17 06       	cpc	r1, r23
    1788:	18 06       	cpc	r1, r24
    178a:	99 1f       	adc	r25, r25
    178c:	f1 cf       	rjmp	.-30     	; 0x1770 <__fp_splitA+0xc>
    178e:	86 95       	lsr	r24
    1790:	71 05       	cpc	r23, r1
    1792:	61 05       	cpc	r22, r1
    1794:	08 94       	sec
    1796:	08 95       	ret

00001798 <__fp_zero>:
    1798:	e8 94       	clt

0000179a <__fp_szero>:
    179a:	bb 27       	eor	r27, r27
    179c:	66 27       	eor	r22, r22
    179e:	77 27       	eor	r23, r23
    17a0:	cb 01       	movw	r24, r22
    17a2:	97 f9       	bld	r25, 7
    17a4:	08 95       	ret

000017a6 <__gesf2>:
    17a6:	65 df       	rcall	.-310    	; 0x1672 <__fp_cmp>
    17a8:	08 f4       	brcc	.+2      	; 0x17ac <__gesf2+0x6>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	08 95       	ret

000017ae <inverse>:
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	80 e8       	ldi	r24, 0x80	; 128
    17b8:	9f e3       	ldi	r25, 0x3F	; 63
    17ba:	a8 c0       	rjmp	.+336    	; 0x190c <__divsf3>

000017bc <__mulsf3>:
    17bc:	0b d0       	rcall	.+22     	; 0x17d4 <__mulsf3x>
    17be:	b9 cf       	rjmp	.-142    	; 0x1732 <__fp_round>
    17c0:	aa df       	rcall	.-172    	; 0x1716 <__fp_pscA>
    17c2:	28 f0       	brcs	.+10     	; 0x17ce <__mulsf3+0x12>
    17c4:	af df       	rcall	.-162    	; 0x1724 <__fp_pscB>
    17c6:	18 f0       	brcs	.+6      	; 0x17ce <__mulsf3+0x12>
    17c8:	95 23       	and	r25, r21
    17ca:	09 f0       	breq	.+2      	; 0x17ce <__mulsf3+0x12>
    17cc:	76 cf       	rjmp	.-276    	; 0x16ba <__fp_inf>
    17ce:	7b cf       	rjmp	.-266    	; 0x16c6 <__fp_nan>
    17d0:	11 24       	eor	r1, r1
    17d2:	e3 cf       	rjmp	.-58     	; 0x179a <__fp_szero>

000017d4 <__mulsf3x>:
    17d4:	bf df       	rcall	.-130    	; 0x1754 <__fp_split3>
    17d6:	a0 f3       	brcs	.-24     	; 0x17c0 <__mulsf3+0x4>

000017d8 <__mulsf3_pse>:
    17d8:	95 9f       	mul	r25, r21
    17da:	d1 f3       	breq	.-12     	; 0x17d0 <__mulsf3+0x14>
    17dc:	95 0f       	add	r25, r21
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	55 1f       	adc	r21, r21
    17e2:	62 9f       	mul	r22, r18
    17e4:	f0 01       	movw	r30, r0
    17e6:	72 9f       	mul	r23, r18
    17e8:	bb 27       	eor	r27, r27
    17ea:	f0 0d       	add	r31, r0
    17ec:	b1 1d       	adc	r27, r1
    17ee:	63 9f       	mul	r22, r19
    17f0:	aa 27       	eor	r26, r26
    17f2:	f0 0d       	add	r31, r0
    17f4:	b1 1d       	adc	r27, r1
    17f6:	aa 1f       	adc	r26, r26
    17f8:	64 9f       	mul	r22, r20
    17fa:	66 27       	eor	r22, r22
    17fc:	b0 0d       	add	r27, r0
    17fe:	a1 1d       	adc	r26, r1
    1800:	66 1f       	adc	r22, r22
    1802:	82 9f       	mul	r24, r18
    1804:	22 27       	eor	r18, r18
    1806:	b0 0d       	add	r27, r0
    1808:	a1 1d       	adc	r26, r1
    180a:	62 1f       	adc	r22, r18
    180c:	73 9f       	mul	r23, r19
    180e:	b0 0d       	add	r27, r0
    1810:	a1 1d       	adc	r26, r1
    1812:	62 1f       	adc	r22, r18
    1814:	83 9f       	mul	r24, r19
    1816:	a0 0d       	add	r26, r0
    1818:	61 1d       	adc	r22, r1
    181a:	22 1f       	adc	r18, r18
    181c:	74 9f       	mul	r23, r20
    181e:	33 27       	eor	r19, r19
    1820:	a0 0d       	add	r26, r0
    1822:	61 1d       	adc	r22, r1
    1824:	23 1f       	adc	r18, r19
    1826:	84 9f       	mul	r24, r20
    1828:	60 0d       	add	r22, r0
    182a:	21 1d       	adc	r18, r1
    182c:	82 2f       	mov	r24, r18
    182e:	76 2f       	mov	r23, r22
    1830:	6a 2f       	mov	r22, r26
    1832:	11 24       	eor	r1, r1
    1834:	9f 57       	subi	r25, 0x7F	; 127
    1836:	50 40       	sbci	r21, 0x00	; 0
    1838:	8a f0       	brmi	.+34     	; 0x185c <__mulsf3_pse+0x84>
    183a:	e1 f0       	breq	.+56     	; 0x1874 <__mulsf3_pse+0x9c>
    183c:	88 23       	and	r24, r24
    183e:	4a f0       	brmi	.+18     	; 0x1852 <__mulsf3_pse+0x7a>
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	bb 1f       	adc	r27, r27
    1846:	66 1f       	adc	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	91 50       	subi	r25, 0x01	; 1
    184e:	50 40       	sbci	r21, 0x00	; 0
    1850:	a9 f7       	brne	.-22     	; 0x183c <__mulsf3_pse+0x64>
    1852:	9e 3f       	cpi	r25, 0xFE	; 254
    1854:	51 05       	cpc	r21, r1
    1856:	70 f0       	brcs	.+28     	; 0x1874 <__mulsf3_pse+0x9c>
    1858:	30 cf       	rjmp	.-416    	; 0x16ba <__fp_inf>
    185a:	9f cf       	rjmp	.-194    	; 0x179a <__fp_szero>
    185c:	5f 3f       	cpi	r21, 0xFF	; 255
    185e:	ec f3       	brlt	.-6      	; 0x185a <__mulsf3_pse+0x82>
    1860:	98 3e       	cpi	r25, 0xE8	; 232
    1862:	dc f3       	brlt	.-10     	; 0x185a <__mulsf3_pse+0x82>
    1864:	86 95       	lsr	r24
    1866:	77 95       	ror	r23
    1868:	67 95       	ror	r22
    186a:	b7 95       	ror	r27
    186c:	f7 95       	ror	r31
    186e:	e7 95       	ror	r30
    1870:	9f 5f       	subi	r25, 0xFF	; 255
    1872:	c1 f7       	brne	.-16     	; 0x1864 <__mulsf3_pse+0x8c>
    1874:	fe 2b       	or	r31, r30
    1876:	88 0f       	add	r24, r24
    1878:	91 1d       	adc	r25, r1
    187a:	96 95       	lsr	r25
    187c:	87 95       	ror	r24
    187e:	97 f9       	bld	r25, 7
    1880:	08 95       	ret
    1882:	11 f4       	brne	.+4      	; 0x1888 <__mulsf3_pse+0xb0>
    1884:	0e f4       	brtc	.+2      	; 0x1888 <__mulsf3_pse+0xb0>
    1886:	1f cf       	rjmp	.-450    	; 0x16c6 <__fp_nan>
    1888:	43 c0       	rjmp	.+134    	; 0x1910 <__fp_mpack>

0000188a <sqrt>:
    188a:	6c df       	rcall	.-296    	; 0x1764 <__fp_splitA>
    188c:	d0 f3       	brcs	.-12     	; 0x1882 <__mulsf3_pse+0xaa>
    188e:	99 23       	and	r25, r25
    1890:	d9 f3       	breq	.-10     	; 0x1888 <__mulsf3_pse+0xb0>
    1892:	ce f3       	brts	.-14     	; 0x1886 <__mulsf3_pse+0xae>
    1894:	9f 57       	subi	r25, 0x7F	; 127
    1896:	55 0b       	sbc	r21, r21
    1898:	87 ff       	sbrs	r24, 7
    189a:	48 d0       	rcall	.+144    	; 0x192c <__fp_norm2>
    189c:	00 24       	eor	r0, r0
    189e:	a0 e6       	ldi	r26, 0x60	; 96
    18a0:	40 ea       	ldi	r20, 0xA0	; 160
    18a2:	90 01       	movw	r18, r0
    18a4:	80 58       	subi	r24, 0x80	; 128
    18a6:	56 95       	lsr	r21
    18a8:	97 95       	ror	r25
    18aa:	28 f4       	brcc	.+10     	; 0x18b6 <sqrt+0x2c>
    18ac:	80 5c       	subi	r24, 0xC0	; 192
    18ae:	66 0f       	add	r22, r22
    18b0:	77 1f       	adc	r23, r23
    18b2:	88 1f       	adc	r24, r24
    18b4:	20 f0       	brcs	.+8      	; 0x18be <sqrt+0x34>
    18b6:	26 17       	cp	r18, r22
    18b8:	37 07       	cpc	r19, r23
    18ba:	48 07       	cpc	r20, r24
    18bc:	30 f4       	brcc	.+12     	; 0x18ca <sqrt+0x40>
    18be:	62 1b       	sub	r22, r18
    18c0:	73 0b       	sbc	r23, r19
    18c2:	84 0b       	sbc	r24, r20
    18c4:	20 29       	or	r18, r0
    18c6:	31 29       	or	r19, r1
    18c8:	4a 2b       	or	r20, r26
    18ca:	a6 95       	lsr	r26
    18cc:	17 94       	ror	r1
    18ce:	07 94       	ror	r0
    18d0:	20 25       	eor	r18, r0
    18d2:	31 25       	eor	r19, r1
    18d4:	4a 27       	eor	r20, r26
    18d6:	58 f7       	brcc	.-42     	; 0x18ae <sqrt+0x24>
    18d8:	66 0f       	add	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	88 1f       	adc	r24, r24
    18de:	20 f0       	brcs	.+8      	; 0x18e8 <sqrt+0x5e>
    18e0:	26 17       	cp	r18, r22
    18e2:	37 07       	cpc	r19, r23
    18e4:	48 07       	cpc	r20, r24
    18e6:	30 f4       	brcc	.+12     	; 0x18f4 <sqrt+0x6a>
    18e8:	62 0b       	sbc	r22, r18
    18ea:	73 0b       	sbc	r23, r19
    18ec:	84 0b       	sbc	r24, r20
    18ee:	20 0d       	add	r18, r0
    18f0:	31 1d       	adc	r19, r1
    18f2:	41 1d       	adc	r20, r1
    18f4:	a0 95       	com	r26
    18f6:	81 f7       	brne	.-32     	; 0x18d8 <sqrt+0x4e>
    18f8:	b9 01       	movw	r22, r18
    18fa:	84 2f       	mov	r24, r20
    18fc:	91 58       	subi	r25, 0x81	; 129
    18fe:	88 0f       	add	r24, r24
    1900:	96 95       	lsr	r25
    1902:	87 95       	ror	r24
    1904:	08 95       	ret

00001906 <square>:
    1906:	9b 01       	movw	r18, r22
    1908:	ac 01       	movw	r20, r24
    190a:	58 cf       	rjmp	.-336    	; 0x17bc <__mulsf3>

0000190c <__divsf3>:
    190c:	1a de       	rcall	.-972    	; 0x1542 <__divsf3x>
    190e:	11 cf       	rjmp	.-478    	; 0x1732 <__fp_round>

00001910 <__fp_mpack>:
    1910:	9f 3f       	cpi	r25, 0xFF	; 255
    1912:	31 f0       	breq	.+12     	; 0x1920 <__fp_mpack_finite+0xc>

00001914 <__fp_mpack_finite>:
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	20 f4       	brcc	.+8      	; 0x1920 <__fp_mpack_finite+0xc>
    1918:	87 95       	ror	r24
    191a:	77 95       	ror	r23
    191c:	67 95       	ror	r22
    191e:	b7 95       	ror	r27
    1920:	88 0f       	add	r24, r24
    1922:	91 1d       	adc	r25, r1
    1924:	96 95       	lsr	r25
    1926:	87 95       	ror	r24
    1928:	97 f9       	bld	r25, 7
    192a:	08 95       	ret

0000192c <__fp_norm2>:
    192c:	91 50       	subi	r25, 0x01	; 1
    192e:	50 40       	sbci	r21, 0x00	; 0
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	d2 f7       	brpl	.-12     	; 0x192c <__fp_norm2>
    1938:	08 95       	ret

0000193a <dtostrf>:
    193a:	ef 92       	push	r14
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	e8 01       	movw	r28, r16
    1946:	47 fd       	sbrc	r20, 7
    1948:	02 c0       	rjmp	.+4      	; 0x194e <dtostrf+0x14>
    194a:	34 e0       	ldi	r19, 0x04	; 4
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <dtostrf+0x16>
    194e:	34 e1       	ldi	r19, 0x14	; 20
    1950:	04 2e       	mov	r0, r20
    1952:	00 0c       	add	r0, r0
    1954:	55 0b       	sbc	r21, r21
    1956:	57 ff       	sbrs	r21, 7
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <dtostrf+0x26>
    195a:	51 95       	neg	r21
    195c:	41 95       	neg	r20
    195e:	51 09       	sbc	r21, r1
    1960:	e3 2e       	mov	r14, r19
    1962:	02 2f       	mov	r16, r18
    1964:	24 2f       	mov	r18, r20
    1966:	ae 01       	movw	r20, r28
    1968:	07 d0       	rcall	.+14     	; 0x1978 <dtoa_prf>
    196a:	ce 01       	movw	r24, r28
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ef 90       	pop	r14
    1976:	08 95       	ret

00001978 <dtoa_prf>:
    1978:	8f 92       	push	r8
    197a:	9f 92       	push	r9
    197c:	af 92       	push	r10
    197e:	bf 92       	push	r11
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	29 97       	sbiw	r28, 0x09	; 9
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	6a 01       	movw	r12, r20
    19a2:	12 2f       	mov	r17, r18
    19a4:	b0 2e       	mov	r11, r16
    19a6:	2b e3       	ldi	r18, 0x3B	; 59
    19a8:	20 17       	cp	r18, r16
    19aa:	20 f0       	brcs	.+8      	; 0x19b4 <dtoa_prf+0x3c>
    19ac:	ff 24       	eor	r15, r15
    19ae:	f3 94       	inc	r15
    19b0:	f0 0e       	add	r15, r16
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <dtoa_prf+0x40>
    19b4:	2c e3       	ldi	r18, 0x3C	; 60
    19b6:	f2 2e       	mov	r15, r18
    19b8:	0f 2d       	mov	r16, r15
    19ba:	27 e0       	ldi	r18, 0x07	; 7
    19bc:	ae 01       	movw	r20, r28
    19be:	4f 5f       	subi	r20, 0xFF	; 255
    19c0:	5f 4f       	sbci	r21, 0xFF	; 255
    19c2:	50 d1       	rcall	.+672    	; 0x1c64 <__ftoa_engine>
    19c4:	bc 01       	movw	r22, r24
    19c6:	49 81       	ldd	r20, Y+1	; 0x01
    19c8:	84 2f       	mov	r24, r20
    19ca:	89 70       	andi	r24, 0x09	; 9
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	31 f0       	breq	.+12     	; 0x19dc <dtoa_prf+0x64>
    19d0:	e1 fc       	sbrc	r14, 1
    19d2:	06 c0       	rjmp	.+12     	; 0x19e0 <dtoa_prf+0x68>
    19d4:	e0 fe       	sbrs	r14, 0
    19d6:	06 c0       	rjmp	.+12     	; 0x19e4 <dtoa_prf+0x6c>
    19d8:	90 e2       	ldi	r25, 0x20	; 32
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <dtoa_prf+0x6e>
    19dc:	9d e2       	ldi	r25, 0x2D	; 45
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <dtoa_prf+0x6e>
    19e0:	9b e2       	ldi	r25, 0x2B	; 43
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <dtoa_prf+0x6e>
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	5e 2d       	mov	r21, r14
    19e8:	50 71       	andi	r21, 0x10	; 16
    19ea:	43 ff       	sbrs	r20, 3
    19ec:	3c c0       	rjmp	.+120    	; 0x1a66 <dtoa_prf+0xee>
    19ee:	91 11       	cpse	r25, r1
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <dtoa_prf+0x7e>
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <dtoa_prf+0x80>
    19f6:	84 e0       	ldi	r24, 0x04	; 4
    19f8:	81 17       	cp	r24, r17
    19fa:	18 f4       	brcc	.+6      	; 0x1a02 <dtoa_prf+0x8a>
    19fc:	21 2f       	mov	r18, r17
    19fe:	28 1b       	sub	r18, r24
    1a00:	01 c0       	rjmp	.+2      	; 0x1a04 <dtoa_prf+0x8c>
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	51 11       	cpse	r21, r1
    1a06:	0b c0       	rjmp	.+22     	; 0x1a1e <dtoa_prf+0xa6>
    1a08:	f6 01       	movw	r30, r12
    1a0a:	82 2f       	mov	r24, r18
    1a0c:	30 e2       	ldi	r19, 0x20	; 32
    1a0e:	88 23       	and	r24, r24
    1a10:	19 f0       	breq	.+6      	; 0x1a18 <dtoa_prf+0xa0>
    1a12:	31 93       	st	Z+, r19
    1a14:	81 50       	subi	r24, 0x01	; 1
    1a16:	fb cf       	rjmp	.-10     	; 0x1a0e <dtoa_prf+0x96>
    1a18:	c2 0e       	add	r12, r18
    1a1a:	d1 1c       	adc	r13, r1
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	99 23       	and	r25, r25
    1a20:	29 f0       	breq	.+10     	; 0x1a2c <dtoa_prf+0xb4>
    1a22:	d6 01       	movw	r26, r12
    1a24:	9c 93       	st	X, r25
    1a26:	f6 01       	movw	r30, r12
    1a28:	31 96       	adiw	r30, 0x01	; 1
    1a2a:	6f 01       	movw	r12, r30
    1a2c:	c6 01       	movw	r24, r12
    1a2e:	03 96       	adiw	r24, 0x03	; 3
    1a30:	e2 fe       	sbrs	r14, 2
    1a32:	0a c0       	rjmp	.+20     	; 0x1a48 <dtoa_prf+0xd0>
    1a34:	3e e4       	ldi	r19, 0x4E	; 78
    1a36:	d6 01       	movw	r26, r12
    1a38:	3c 93       	st	X, r19
    1a3a:	41 e4       	ldi	r20, 0x41	; 65
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	4c 93       	st	X, r20
    1a40:	11 97       	sbiw	r26, 0x01	; 1
    1a42:	12 96       	adiw	r26, 0x02	; 2
    1a44:	3c 93       	st	X, r19
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <dtoa_prf+0xdc>
    1a48:	3e e6       	ldi	r19, 0x6E	; 110
    1a4a:	f6 01       	movw	r30, r12
    1a4c:	30 83       	st	Z, r19
    1a4e:	41 e6       	ldi	r20, 0x61	; 97
    1a50:	41 83       	std	Z+1, r20	; 0x01
    1a52:	32 83       	std	Z+2, r19	; 0x02
    1a54:	fc 01       	movw	r30, r24
    1a56:	32 2f       	mov	r19, r18
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	33 23       	and	r19, r19
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <dtoa_prf+0xe8>
    1a5e:	42 c0       	rjmp	.+132    	; 0x1ae4 <dtoa_prf+0x16c>
    1a60:	41 93       	st	Z+, r20
    1a62:	31 50       	subi	r19, 0x01	; 1
    1a64:	fa cf       	rjmp	.-12     	; 0x1a5a <dtoa_prf+0xe2>
    1a66:	42 ff       	sbrs	r20, 2
    1a68:	44 c0       	rjmp	.+136    	; 0x1af2 <dtoa_prf+0x17a>
    1a6a:	91 11       	cpse	r25, r1
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <dtoa_prf+0xfa>
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <dtoa_prf+0xfc>
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	81 17       	cp	r24, r17
    1a76:	18 f4       	brcc	.+6      	; 0x1a7e <dtoa_prf+0x106>
    1a78:	21 2f       	mov	r18, r17
    1a7a:	28 1b       	sub	r18, r24
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <dtoa_prf+0x108>
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	51 11       	cpse	r21, r1
    1a82:	0b c0       	rjmp	.+22     	; 0x1a9a <dtoa_prf+0x122>
    1a84:	f6 01       	movw	r30, r12
    1a86:	82 2f       	mov	r24, r18
    1a88:	30 e2       	ldi	r19, 0x20	; 32
    1a8a:	88 23       	and	r24, r24
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <dtoa_prf+0x11c>
    1a8e:	31 93       	st	Z+, r19
    1a90:	81 50       	subi	r24, 0x01	; 1
    1a92:	fb cf       	rjmp	.-10     	; 0x1a8a <dtoa_prf+0x112>
    1a94:	c2 0e       	add	r12, r18
    1a96:	d1 1c       	adc	r13, r1
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	99 23       	and	r25, r25
    1a9c:	29 f0       	breq	.+10     	; 0x1aa8 <dtoa_prf+0x130>
    1a9e:	d6 01       	movw	r26, r12
    1aa0:	9c 93       	st	X, r25
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	31 96       	adiw	r30, 0x01	; 1
    1aa6:	6f 01       	movw	r12, r30
    1aa8:	c6 01       	movw	r24, r12
    1aaa:	03 96       	adiw	r24, 0x03	; 3
    1aac:	e2 fe       	sbrs	r14, 2
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <dtoa_prf+0x14e>
    1ab0:	39 e4       	ldi	r19, 0x49	; 73
    1ab2:	d6 01       	movw	r26, r12
    1ab4:	3c 93       	st	X, r19
    1ab6:	3e e4       	ldi	r19, 0x4E	; 78
    1ab8:	11 96       	adiw	r26, 0x01	; 1
    1aba:	3c 93       	st	X, r19
    1abc:	11 97       	sbiw	r26, 0x01	; 1
    1abe:	36 e4       	ldi	r19, 0x46	; 70
    1ac0:	12 96       	adiw	r26, 0x02	; 2
    1ac2:	3c 93       	st	X, r19
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <dtoa_prf+0x15c>
    1ac6:	39 e6       	ldi	r19, 0x69	; 105
    1ac8:	f6 01       	movw	r30, r12
    1aca:	30 83       	st	Z, r19
    1acc:	3e e6       	ldi	r19, 0x6E	; 110
    1ace:	31 83       	std	Z+1, r19	; 0x01
    1ad0:	36 e6       	ldi	r19, 0x66	; 102
    1ad2:	32 83       	std	Z+2, r19	; 0x02
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	32 2f       	mov	r19, r18
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	33 23       	and	r19, r19
    1adc:	19 f0       	breq	.+6      	; 0x1ae4 <dtoa_prf+0x16c>
    1ade:	41 93       	st	Z+, r20
    1ae0:	31 50       	subi	r19, 0x01	; 1
    1ae2:	fb cf       	rjmp	.-10     	; 0x1ada <dtoa_prf+0x162>
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e2 0f       	add	r30, r18
    1ae8:	f1 1d       	adc	r31, r1
    1aea:	10 82       	st	Z, r1
    1aec:	8e ef       	ldi	r24, 0xFE	; 254
    1aee:	9f ef       	ldi	r25, 0xFF	; 255
    1af0:	a6 c0       	rjmp	.+332    	; 0x1c3e <dtoa_prf+0x2c6>
    1af2:	21 e0       	ldi	r18, 0x01	; 1
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	91 11       	cpse	r25, r1
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <dtoa_prf+0x186>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	16 16       	cp	r1, r22
    1b00:	17 06       	cpc	r1, r23
    1b02:	1c f4       	brge	.+6      	; 0x1b0a <dtoa_prf+0x192>
    1b04:	fb 01       	movw	r30, r22
    1b06:	31 96       	adiw	r30, 0x01	; 1
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <dtoa_prf+0x196>
    1b0a:	e1 e0       	ldi	r30, 0x01	; 1
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	2e 0f       	add	r18, r30
    1b10:	3f 1f       	adc	r19, r31
    1b12:	bb 20       	and	r11, r11
    1b14:	21 f0       	breq	.+8      	; 0x1b1e <dtoa_prf+0x1a6>
    1b16:	eb 2d       	mov	r30, r11
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	31 96       	adiw	r30, 0x01	; 1
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <dtoa_prf+0x1aa>
    1b1e:	e0 e0       	ldi	r30, 0x00	; 0
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	2e 0f       	add	r18, r30
    1b24:	3f 1f       	adc	r19, r31
    1b26:	e1 2f       	mov	r30, r17
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	2e 17       	cp	r18, r30
    1b2c:	3f 07       	cpc	r19, r31
    1b2e:	1c f4       	brge	.+6      	; 0x1b36 <dtoa_prf+0x1be>
    1b30:	12 1b       	sub	r17, r18
    1b32:	21 2f       	mov	r18, r17
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <dtoa_prf+0x1c0>
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	8e 2d       	mov	r24, r14
    1b3a:	88 71       	andi	r24, 0x18	; 24
    1b3c:	59 f4       	brne	.+22     	; 0x1b54 <dtoa_prf+0x1dc>
    1b3e:	f6 01       	movw	r30, r12
    1b40:	82 2f       	mov	r24, r18
    1b42:	30 e2       	ldi	r19, 0x20	; 32
    1b44:	88 23       	and	r24, r24
    1b46:	19 f0       	breq	.+6      	; 0x1b4e <dtoa_prf+0x1d6>
    1b48:	31 93       	st	Z+, r19
    1b4a:	81 50       	subi	r24, 0x01	; 1
    1b4c:	fb cf       	rjmp	.-10     	; 0x1b44 <dtoa_prf+0x1cc>
    1b4e:	c2 0e       	add	r12, r18
    1b50:	d1 1c       	adc	r13, r1
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	99 23       	and	r25, r25
    1b56:	29 f0       	breq	.+10     	; 0x1b62 <dtoa_prf+0x1ea>
    1b58:	d6 01       	movw	r26, r12
    1b5a:	9c 93       	st	X, r25
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	31 96       	adiw	r30, 0x01	; 1
    1b60:	6f 01       	movw	r12, r30
    1b62:	51 11       	cpse	r21, r1
    1b64:	0b c0       	rjmp	.+22     	; 0x1b7c <dtoa_prf+0x204>
    1b66:	f6 01       	movw	r30, r12
    1b68:	82 2f       	mov	r24, r18
    1b6a:	90 e3       	ldi	r25, 0x30	; 48
    1b6c:	88 23       	and	r24, r24
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <dtoa_prf+0x1fe>
    1b70:	91 93       	st	Z+, r25
    1b72:	81 50       	subi	r24, 0x01	; 1
    1b74:	fb cf       	rjmp	.-10     	; 0x1b6c <dtoa_prf+0x1f4>
    1b76:	c2 0e       	add	r12, r18
    1b78:	d1 1c       	adc	r13, r1
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	0f 2d       	mov	r16, r15
    1b7e:	06 0f       	add	r16, r22
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	34 2f       	mov	r19, r20
    1b84:	30 71       	andi	r19, 0x10	; 16
    1b86:	44 ff       	sbrs	r20, 4
    1b88:	03 c0       	rjmp	.+6      	; 0x1b90 <dtoa_prf+0x218>
    1b8a:	91 33       	cpi	r25, 0x31	; 49
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <dtoa_prf+0x218>
    1b8e:	01 50       	subi	r16, 0x01	; 1
    1b90:	10 16       	cp	r1, r16
    1b92:	24 f4       	brge	.+8      	; 0x1b9c <dtoa_prf+0x224>
    1b94:	09 30       	cpi	r16, 0x09	; 9
    1b96:	18 f0       	brcs	.+6      	; 0x1b9e <dtoa_prf+0x226>
    1b98:	08 e0       	ldi	r16, 0x08	; 8
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <dtoa_prf+0x226>
    1b9c:	01 e0       	ldi	r16, 0x01	; 1
    1b9e:	ab 01       	movw	r20, r22
    1ba0:	77 ff       	sbrs	r23, 7
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <dtoa_prf+0x230>
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	fb 01       	movw	r30, r22
    1baa:	e4 1b       	sub	r30, r20
    1bac:	f5 0b       	sbc	r31, r21
    1bae:	a1 e0       	ldi	r26, 0x01	; 1
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	ac 0f       	add	r26, r28
    1bb4:	bd 1f       	adc	r27, r29
    1bb6:	ea 0f       	add	r30, r26
    1bb8:	fb 1f       	adc	r31, r27
    1bba:	8e e2       	ldi	r24, 0x2E	; 46
    1bbc:	a8 2e       	mov	r10, r24
    1bbe:	4b 01       	movw	r8, r22
    1bc0:	80 1a       	sub	r8, r16
    1bc2:	91 08       	sbc	r9, r1
    1bc4:	0b 2d       	mov	r16, r11
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	11 95       	neg	r17
    1bca:	01 95       	neg	r16
    1bcc:	11 09       	sbc	r17, r1
    1bce:	4f 3f       	cpi	r20, 0xFF	; 255
    1bd0:	bf ef       	ldi	r27, 0xFF	; 255
    1bd2:	5b 07       	cpc	r21, r27
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <dtoa_prf+0x266>
    1bd6:	d6 01       	movw	r26, r12
    1bd8:	ac 92       	st	X, r10
    1bda:	11 96       	adiw	r26, 0x01	; 1
    1bdc:	6d 01       	movw	r12, r26
    1bde:	64 17       	cp	r22, r20
    1be0:	75 07       	cpc	r23, r21
    1be2:	2c f0       	brlt	.+10     	; 0x1bee <dtoa_prf+0x276>
    1be4:	84 16       	cp	r8, r20
    1be6:	95 06       	cpc	r9, r21
    1be8:	14 f4       	brge	.+4      	; 0x1bee <dtoa_prf+0x276>
    1bea:	81 81       	ldd	r24, Z+1	; 0x01
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <dtoa_prf+0x278>
    1bee:	80 e3       	ldi	r24, 0x30	; 48
    1bf0:	41 50       	subi	r20, 0x01	; 1
    1bf2:	51 09       	sbc	r21, r1
    1bf4:	31 96       	adiw	r30, 0x01	; 1
    1bf6:	d6 01       	movw	r26, r12
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	7d 01       	movw	r14, r26
    1bfc:	40 17       	cp	r20, r16
    1bfe:	51 07       	cpc	r21, r17
    1c00:	24 f0       	brlt	.+8      	; 0x1c0a <dtoa_prf+0x292>
    1c02:	d6 01       	movw	r26, r12
    1c04:	8c 93       	st	X, r24
    1c06:	67 01       	movw	r12, r14
    1c08:	e2 cf       	rjmp	.-60     	; 0x1bce <dtoa_prf+0x256>
    1c0a:	64 17       	cp	r22, r20
    1c0c:	75 07       	cpc	r23, r21
    1c0e:	39 f4       	brne	.+14     	; 0x1c1e <dtoa_prf+0x2a6>
    1c10:	96 33       	cpi	r25, 0x36	; 54
    1c12:	20 f4       	brcc	.+8      	; 0x1c1c <dtoa_prf+0x2a4>
    1c14:	95 33       	cpi	r25, 0x35	; 53
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <dtoa_prf+0x2a6>
    1c18:	31 11       	cpse	r19, r1
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <dtoa_prf+0x2a6>
    1c1c:	81 e3       	ldi	r24, 0x31	; 49
    1c1e:	f6 01       	movw	r30, r12
    1c20:	80 83       	st	Z, r24
    1c22:	f7 01       	movw	r30, r14
    1c24:	82 2f       	mov	r24, r18
    1c26:	90 e2       	ldi	r25, 0x20	; 32
    1c28:	88 23       	and	r24, r24
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <dtoa_prf+0x2ba>
    1c2c:	91 93       	st	Z+, r25
    1c2e:	81 50       	subi	r24, 0x01	; 1
    1c30:	fb cf       	rjmp	.-10     	; 0x1c28 <dtoa_prf+0x2b0>
    1c32:	f7 01       	movw	r30, r14
    1c34:	e2 0f       	add	r30, r18
    1c36:	f1 1d       	adc	r31, r1
    1c38:	10 82       	st	Z, r1
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	29 96       	adiw	r28, 0x09	; 9
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	9f 90       	pop	r9
    1c60:	8f 90       	pop	r8
    1c62:	08 95       	ret

00001c64 <__ftoa_engine>:
    1c64:	28 30       	cpi	r18, 0x08	; 8
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <__ftoa_engine+0x6>
    1c68:	27 e0       	ldi	r18, 0x07	; 7
    1c6a:	33 27       	eor	r19, r19
    1c6c:	da 01       	movw	r26, r20
    1c6e:	99 0f       	add	r25, r25
    1c70:	31 1d       	adc	r19, r1
    1c72:	87 fd       	sbrc	r24, 7
    1c74:	91 60       	ori	r25, 0x01	; 1
    1c76:	00 96       	adiw	r24, 0x00	; 0
    1c78:	61 05       	cpc	r22, r1
    1c7a:	71 05       	cpc	r23, r1
    1c7c:	39 f4       	brne	.+14     	; 0x1c8c <__ftoa_engine+0x28>
    1c7e:	32 60       	ori	r19, 0x02	; 2
    1c80:	2e 5f       	subi	r18, 0xFE	; 254
    1c82:	3d 93       	st	X+, r19
    1c84:	30 e3       	ldi	r19, 0x30	; 48
    1c86:	2a 95       	dec	r18
    1c88:	e1 f7       	brne	.-8      	; 0x1c82 <__ftoa_engine+0x1e>
    1c8a:	08 95       	ret
    1c8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c8e:	30 f0       	brcs	.+12     	; 0x1c9c <__ftoa_engine+0x38>
    1c90:	80 38       	cpi	r24, 0x80	; 128
    1c92:	71 05       	cpc	r23, r1
    1c94:	61 05       	cpc	r22, r1
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <__ftoa_engine+0x36>
    1c98:	3c 5f       	subi	r19, 0xFC	; 252
    1c9a:	3c 5f       	subi	r19, 0xFC	; 252
    1c9c:	3d 93       	st	X+, r19
    1c9e:	91 30       	cpi	r25, 0x01	; 1
    1ca0:	08 f0       	brcs	.+2      	; 0x1ca4 <__ftoa_engine+0x40>
    1ca2:	80 68       	ori	r24, 0x80	; 128
    1ca4:	91 1d       	adc	r25, r1
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	1f 93       	push	r17
    1cac:	0f 93       	push	r16
    1cae:	ff 92       	push	r15
    1cb0:	ef 92       	push	r14
    1cb2:	19 2f       	mov	r17, r25
    1cb4:	98 7f       	andi	r25, 0xF8	; 248
    1cb6:	96 95       	lsr	r25
    1cb8:	e9 2f       	mov	r30, r25
    1cba:	96 95       	lsr	r25
    1cbc:	96 95       	lsr	r25
    1cbe:	e9 0f       	add	r30, r25
    1cc0:	ff 27       	eor	r31, r31
    1cc2:	e4 59       	subi	r30, 0x94	; 148
    1cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc6:	99 27       	eor	r25, r25
    1cc8:	33 27       	eor	r19, r19
    1cca:	ee 24       	eor	r14, r14
    1ccc:	ff 24       	eor	r15, r15
    1cce:	a7 01       	movw	r20, r14
    1cd0:	e7 01       	movw	r28, r14
    1cd2:	05 90       	lpm	r0, Z+
    1cd4:	08 94       	sec
    1cd6:	07 94       	ror	r0
    1cd8:	28 f4       	brcc	.+10     	; 0x1ce4 <__ftoa_engine+0x80>
    1cda:	36 0f       	add	r19, r22
    1cdc:	e7 1e       	adc	r14, r23
    1cde:	f8 1e       	adc	r15, r24
    1ce0:	49 1f       	adc	r20, r25
    1ce2:	51 1d       	adc	r21, r1
    1ce4:	66 0f       	add	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	88 1f       	adc	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	06 94       	lsr	r0
    1cee:	a1 f7       	brne	.-24     	; 0x1cd8 <__ftoa_engine+0x74>
    1cf0:	05 90       	lpm	r0, Z+
    1cf2:	07 94       	ror	r0
    1cf4:	28 f4       	brcc	.+10     	; 0x1d00 <__ftoa_engine+0x9c>
    1cf6:	e7 0e       	add	r14, r23
    1cf8:	f8 1e       	adc	r15, r24
    1cfa:	49 1f       	adc	r20, r25
    1cfc:	56 1f       	adc	r21, r22
    1cfe:	c1 1d       	adc	r28, r1
    1d00:	77 0f       	add	r23, r23
    1d02:	88 1f       	adc	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	66 1f       	adc	r22, r22
    1d08:	06 94       	lsr	r0
    1d0a:	a1 f7       	brne	.-24     	; 0x1cf4 <__ftoa_engine+0x90>
    1d0c:	05 90       	lpm	r0, Z+
    1d0e:	07 94       	ror	r0
    1d10:	28 f4       	brcc	.+10     	; 0x1d1c <__ftoa_engine+0xb8>
    1d12:	f8 0e       	add	r15, r24
    1d14:	49 1f       	adc	r20, r25
    1d16:	56 1f       	adc	r21, r22
    1d18:	c7 1f       	adc	r28, r23
    1d1a:	d1 1d       	adc	r29, r1
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	66 1f       	adc	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	06 94       	lsr	r0
    1d26:	a1 f7       	brne	.-24     	; 0x1d10 <__ftoa_engine+0xac>
    1d28:	05 90       	lpm	r0, Z+
    1d2a:	07 94       	ror	r0
    1d2c:	20 f4       	brcc	.+8      	; 0x1d36 <__ftoa_engine+0xd2>
    1d2e:	49 0f       	add	r20, r25
    1d30:	56 1f       	adc	r21, r22
    1d32:	c7 1f       	adc	r28, r23
    1d34:	d8 1f       	adc	r29, r24
    1d36:	99 0f       	add	r25, r25
    1d38:	66 1f       	adc	r22, r22
    1d3a:	77 1f       	adc	r23, r23
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	06 94       	lsr	r0
    1d40:	a9 f7       	brne	.-22     	; 0x1d2c <__ftoa_engine+0xc8>
    1d42:	84 91       	lpm	r24, Z
    1d44:	10 95       	com	r17
    1d46:	17 70       	andi	r17, 0x07	; 7
    1d48:	41 f0       	breq	.+16     	; 0x1d5a <__ftoa_engine+0xf6>
    1d4a:	d6 95       	lsr	r29
    1d4c:	c7 95       	ror	r28
    1d4e:	57 95       	ror	r21
    1d50:	47 95       	ror	r20
    1d52:	f7 94       	ror	r15
    1d54:	e7 94       	ror	r14
    1d56:	1a 95       	dec	r17
    1d58:	c1 f7       	brne	.-16     	; 0x1d4a <__ftoa_engine+0xe6>
    1d5a:	e2 e1       	ldi	r30, 0x12	; 18
    1d5c:	f1 e0       	ldi	r31, 0x01	; 1
    1d5e:	68 94       	set
    1d60:	15 90       	lpm	r1, Z+
    1d62:	15 91       	lpm	r17, Z+
    1d64:	35 91       	lpm	r19, Z+
    1d66:	65 91       	lpm	r22, Z+
    1d68:	95 91       	lpm	r25, Z+
    1d6a:	05 90       	lpm	r0, Z+
    1d6c:	7f e2       	ldi	r23, 0x2F	; 47
    1d6e:	73 95       	inc	r23
    1d70:	e1 18       	sub	r14, r1
    1d72:	f1 0a       	sbc	r15, r17
    1d74:	43 0b       	sbc	r20, r19
    1d76:	56 0b       	sbc	r21, r22
    1d78:	c9 0b       	sbc	r28, r25
    1d7a:	d0 09       	sbc	r29, r0
    1d7c:	c0 f7       	brcc	.-16     	; 0x1d6e <__ftoa_engine+0x10a>
    1d7e:	e1 0c       	add	r14, r1
    1d80:	f1 1e       	adc	r15, r17
    1d82:	43 1f       	adc	r20, r19
    1d84:	56 1f       	adc	r21, r22
    1d86:	c9 1f       	adc	r28, r25
    1d88:	d0 1d       	adc	r29, r0
    1d8a:	7e f4       	brtc	.+30     	; 0x1daa <__ftoa_engine+0x146>
    1d8c:	70 33       	cpi	r23, 0x30	; 48
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <__ftoa_engine+0x130>
    1d90:	8a 95       	dec	r24
    1d92:	e6 cf       	rjmp	.-52     	; 0x1d60 <__ftoa_engine+0xfc>
    1d94:	e8 94       	clt
    1d96:	01 50       	subi	r16, 0x01	; 1
    1d98:	30 f0       	brcs	.+12     	; 0x1da6 <__ftoa_engine+0x142>
    1d9a:	08 0f       	add	r16, r24
    1d9c:	0a f4       	brpl	.+2      	; 0x1da0 <__ftoa_engine+0x13c>
    1d9e:	00 27       	eor	r16, r16
    1da0:	02 17       	cp	r16, r18
    1da2:	08 f4       	brcc	.+2      	; 0x1da6 <__ftoa_engine+0x142>
    1da4:	20 2f       	mov	r18, r16
    1da6:	23 95       	inc	r18
    1da8:	02 2f       	mov	r16, r18
    1daa:	7a 33       	cpi	r23, 0x3A	; 58
    1dac:	28 f0       	brcs	.+10     	; 0x1db8 <__ftoa_engine+0x154>
    1dae:	79 e3       	ldi	r23, 0x39	; 57
    1db0:	7d 93       	st	X+, r23
    1db2:	2a 95       	dec	r18
    1db4:	e9 f7       	brne	.-6      	; 0x1db0 <__ftoa_engine+0x14c>
    1db6:	10 c0       	rjmp	.+32     	; 0x1dd8 <__ftoa_engine+0x174>
    1db8:	7d 93       	st	X+, r23
    1dba:	2a 95       	dec	r18
    1dbc:	89 f6       	brne	.-94     	; 0x1d60 <__ftoa_engine+0xfc>
    1dbe:	06 94       	lsr	r0
    1dc0:	97 95       	ror	r25
    1dc2:	67 95       	ror	r22
    1dc4:	37 95       	ror	r19
    1dc6:	17 95       	ror	r17
    1dc8:	17 94       	ror	r1
    1dca:	e1 18       	sub	r14, r1
    1dcc:	f1 0a       	sbc	r15, r17
    1dce:	43 0b       	sbc	r20, r19
    1dd0:	56 0b       	sbc	r21, r22
    1dd2:	c9 0b       	sbc	r28, r25
    1dd4:	d0 09       	sbc	r29, r0
    1dd6:	98 f0       	brcs	.+38     	; 0x1dfe <__ftoa_engine+0x19a>
    1dd8:	23 95       	inc	r18
    1dda:	7e 91       	ld	r23, -X
    1ddc:	73 95       	inc	r23
    1dde:	7a 33       	cpi	r23, 0x3A	; 58
    1de0:	08 f0       	brcs	.+2      	; 0x1de4 <__ftoa_engine+0x180>
    1de2:	70 e3       	ldi	r23, 0x30	; 48
    1de4:	7c 93       	st	X, r23
    1de6:	20 13       	cpse	r18, r16
    1de8:	b8 f7       	brcc	.-18     	; 0x1dd8 <__ftoa_engine+0x174>
    1dea:	7e 91       	ld	r23, -X
    1dec:	70 61       	ori	r23, 0x10	; 16
    1dee:	7d 93       	st	X+, r23
    1df0:	30 f0       	brcs	.+12     	; 0x1dfe <__ftoa_engine+0x19a>
    1df2:	83 95       	inc	r24
    1df4:	71 e3       	ldi	r23, 0x31	; 49
    1df6:	7d 93       	st	X+, r23
    1df8:	70 e3       	ldi	r23, 0x30	; 48
    1dfa:	2a 95       	dec	r18
    1dfc:	e1 f7       	brne	.-8      	; 0x1df6 <__ftoa_engine+0x192>
    1dfe:	11 24       	eor	r1, r1
    1e00:	ef 90       	pop	r14
    1e02:	ff 90       	pop	r15
    1e04:	0f 91       	pop	r16
    1e06:	1f 91       	pop	r17
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	99 27       	eor	r25, r25
    1e0e:	87 fd       	sbrc	r24, 7
    1e10:	90 95       	com	r25
    1e12:	08 95       	ret

00001e14 <_exit>:
    1e14:	f8 94       	cli

00001e16 <__stop_program>:
    1e16:	ff cf       	rjmp	.-2      	; 0x1e16 <__stop_program>
