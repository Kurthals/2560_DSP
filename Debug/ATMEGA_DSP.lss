
ATMEGA_DSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800200  00001f2a  00001fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001da  008003dc  008003dc  0000219a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e8e  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000128b  00000000  00000000  00005302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000185f  00000000  00000000  0000658d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  00007dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c28  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a8b  00000000  00000000  00009164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000abef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c2       	rjmp	.+1290   	; 0x50c <__ctors_end>
       2:	00 00       	nop
       4:	a3 c2       	rjmp	.+1350   	; 0x54c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c2       	rjmp	.+1346   	; 0x54c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c2       	rjmp	.+1342   	; 0x54c <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_4>
      14:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_5>
      18:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_6>
      1c:	97 c2       	rjmp	.+1326   	; 0x54c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c2       	rjmp	.+1322   	; 0x54c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c2       	rjmp	.+1318   	; 0x54c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c2       	rjmp	.+1314   	; 0x54c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c2       	rjmp	.+1310   	; 0x54c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c2       	rjmp	.+1306   	; 0x54c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c2       	rjmp	.+1302   	; 0x54c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c2       	rjmp	.+1298   	; 0x54c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c2       	rjmp	.+1294   	; 0x54c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c2       	rjmp	.+1290   	; 0x54c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c2       	rjmp	.+1286   	; 0x54c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c2       	rjmp	.+1282   	; 0x54c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c2       	rjmp	.+1278   	; 0x54c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c2       	rjmp	.+1274   	; 0x54c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_21>
      58:	79 c2       	rjmp	.+1266   	; 0x54c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	77 c2       	rjmp	.+1262   	; 0x54c <__bad_interrupt>
      5e:	00 00       	nop
      60:	75 c2       	rjmp	.+1258   	; 0x54c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c2       	rjmp	.+1254   	; 0x54c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c2       	rjmp	.+1250   	; 0x54c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c2       	rjmp	.+1246   	; 0x54c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c2       	rjmp	.+1242   	; 0x54c <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__vector_29>
      78:	69 c2       	rjmp	.+1234   	; 0x54c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c2       	rjmp	.+1230   	; 0x54c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c2       	rjmp	.+1226   	; 0x54c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c2       	rjmp	.+1222   	; 0x54c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c2       	rjmp	.+1218   	; 0x54c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c2       	rjmp	.+1214   	; 0x54c <__bad_interrupt>
      8e:	00 00       	nop
      90:	5d c2       	rjmp	.+1210   	; 0x54c <__bad_interrupt>
      92:	00 00       	nop
      94:	5b c2       	rjmp	.+1206   	; 0x54c <__bad_interrupt>
      96:	00 00       	nop
      98:	59 c2       	rjmp	.+1202   	; 0x54c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	57 c2       	rjmp	.+1198   	; 0x54c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	55 c2       	rjmp	.+1194   	; 0x54c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c2       	rjmp	.+1190   	; 0x54c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c2       	rjmp	.+1186   	; 0x54c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4f c2       	rjmp	.+1182   	; 0x54c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4d c2       	rjmp	.+1178   	; 0x54c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4b c2       	rjmp	.+1174   	; 0x54c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	49 c2       	rjmp	.+1170   	; 0x54c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	47 c2       	rjmp	.+1166   	; 0x54c <__bad_interrupt>
      be:	00 00       	nop
      c0:	45 c2       	rjmp	.+1162   	; 0x54c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	43 c2       	rjmp	.+1158   	; 0x54c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	41 c2       	rjmp	.+1154   	; 0x54c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3f c2       	rjmp	.+1150   	; 0x54c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3d c2       	rjmp	.+1146   	; 0x54c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3b c2       	rjmp	.+1142   	; 0x54c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	39 c2       	rjmp	.+1138   	; 0x54c <__bad_interrupt>
      da:	00 00       	nop
      dc:	37 c2       	rjmp	.+1134   	; 0x54c <__bad_interrupt>
      de:	00 00       	nop
      e0:	35 c2       	rjmp	.+1130   	; 0x54c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__trampolines_end>:
     112:	00 40       	sbci	r16, 0x00	; 0
     114:	7a 10       	cpse	r7, r10
     116:	f3 5a       	subi	r31, 0xA3	; 163
     118:	00 a0       	ldd	r0, Z+32	; 0x20
     11a:	72 4e       	sbci	r23, 0xE2	; 226
     11c:	18 09       	sbc	r17, r8
     11e:	00 10       	cpse	r0, r0
     120:	a5 d4       	rcall	.+2378   	; 0xa6c <printMaterial+0x38>
     122:	e8 00       	.word	0x00e8	; ????
     124:	00 e8       	ldi	r16, 0x80	; 128
     126:	76 48       	sbci	r23, 0x86	; 134
     128:	17 00       	.word	0x0017	; ????
     12a:	00 e4       	ldi	r16, 0x40	; 64
     12c:	0b 54       	subi	r16, 0x4B	; 75
     12e:	02 00       	.word	0x0002	; ????
     130:	00 ca       	rjmp	.-3072   	; 0xfffff532 <__eeprom_end+0xff7ef532>
     132:	9a 3b       	cpi	r25, 0xBA	; 186
     134:	00 00       	nop
     136:	00 e1       	ldi	r16, 0x10	; 16
     138:	f5 05       	cpc	r31, r5
     13a:	00 00       	nop
     13c:	80 96       	adiw	r24, 0x20	; 32
     13e:	98 00       	.word	0x0098	; ????
     140:	00 00       	nop
     142:	40 42       	sbci	r20, 0x20	; 32
     144:	0f 00       	.word	0x000f	; ????
     146:	00 00       	nop
     148:	a0 86       	std	Z+8, r10	; 0x08
     14a:	01 00       	.word	0x0001	; ????
     14c:	00 00       	nop
     14e:	10 27       	eor	r17, r16
     150:	00 00       	nop
     152:	00 00       	nop
     154:	e8 03       	fmulsu	r22, r16
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	64 00       	.word	0x0064	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	0a 00       	.word	0x000a	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	01 00       	.word	0x0001	; ????
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	2c 76       	andi	r18, 0x6C	; 108
     16e:	d8 88       	ldd	r13, Y+16	; 0x10
     170:	dc 67       	ori	r29, 0x7C	; 124
     172:	4f 08       	sbc	r4, r15
     174:	23 df       	rcall	.-442    	; 0xffffffbc <__eeprom_end+0xff7effbc>
     176:	c1 df       	rcall	.-126    	; 0xfa <__SREG__+0xbb>
     178:	ae 59       	subi	r26, 0x9E	; 158
     17a:	e1 b1       	in	r30, 0x01	; 1
     17c:	b7 96       	adiw	r30, 0x27	; 39
     17e:	e5 e3       	ldi	r30, 0x35	; 53
     180:	e4 53       	subi	r30, 0x34	; 52
     182:	c6 3a       	cpi	r28, 0xA6	; 166
     184:	e6 51       	subi	r30, 0x16	; 22
     186:	99 76       	andi	r25, 0x69	; 105
     188:	96 e8       	ldi	r25, 0x86	; 134
     18a:	e6 c2       	rjmp	.+1484   	; 0x758 <loadMaterials+0x4e>
     18c:	84 26       	eor	r8, r20
     18e:	eb 89       	ldd	r30, Y+19	; 0x13
     190:	8c 9b       	sbis	0x11, 4	; 17
     192:	62 ed       	ldi	r22, 0xD2	; 210
     194:	40 7c       	andi	r20, 0xC0	; 192
     196:	6f fc       	.word	0xfc6f	; ????
     198:	ef bc       	out	0x2f, r14	; 47
     19a:	9c 9f       	mul	r25, r28
     19c:	40 f2       	brcs	.-112    	; 0x12e <__trampolines_end+0x1c>
     19e:	ba a5       	ldd	r27, Y+42	; 0x2a
     1a0:	6f a5       	ldd	r22, Y+47	; 0x2f
     1a2:	f4 90       	lpm	r15, Z
     1a4:	05 5a       	subi	r16, 0xA5	; 165
     1a6:	2a f7       	brpl	.-54     	; 0x172 <__trampolines_end+0x60>
     1a8:	5c 93       	st	X, r21
     1aa:	6b 6c       	ori	r22, 0xCB	; 203
     1ac:	f9 67       	ori	r31, 0x79	; 121
     1ae:	6d c1       	rjmp	.+730    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     1b0:	1b fc       	.word	0xfc1b	; ????
     1b2:	e0 e4       	ldi	r30, 0x40	; 64
     1b4:	0d 47       	sbci	r16, 0x7D	; 125
     1b6:	fe f5       	brtc	.+126    	; 0x236 <myFont+0x2a>
     1b8:	20 e6       	ldi	r18, 0x60	; 96
     1ba:	b5 00       	.word	0x00b5	; ????
     1bc:	d0 ed       	ldi	r29, 0xD0	; 208
     1be:	90 2e       	mov	r9, r16
     1c0:	03 00       	.word	0x0003	; ????
     1c2:	94 35       	cpi	r25, 0x54	; 84
     1c4:	77 05       	cpc	r23, r7
     1c6:	00 80       	ld	r0, Z
     1c8:	84 1e       	adc	r8, r20
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	00 20       	and	r0, r0
     1ce:	4e 0a       	sbc	r4, r30
     1d0:	00 00       	nop
     1d2:	00 c8       	rjmp	.-4096   	; 0xfffff1d4 <__eeprom_end+0xff7ef1d4>
     1d4:	0c 33       	cpi	r16, 0x3C	; 60
     1d6:	33 33       	cpi	r19, 0x33	; 51
     1d8:	33 0f       	add	r19, r19
     1da:	98 6e       	ori	r25, 0xE8	; 232
     1dc:	12 83       	std	Z+2, r17	; 0x02
     1de:	11 41       	sbci	r17, 0x11	; 17
     1e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1e2:	21 14       	cp	r2, r1
     1e4:	89 3b       	cpi	r24, 0xB9	; 185
     1e6:	e6 55       	subi	r30, 0x56	; 86
     1e8:	16 cf       	rjmp	.-468    	; 0x16 <__FUSE_REGION_LENGTH__+0x13>
     1ea:	fe e6       	ldi	r31, 0x6E	; 110
     1ec:	db 18       	sub	r13, r11
     1ee:	d1 84       	ldd	r13, Z+9	; 0x09
     1f0:	4b 38       	cpi	r20, 0x8B	; 139
     1f2:	1b f7       	brvc	.-58     	; 0x1ba <__trampolines_end+0xa8>
     1f4:	7c 1d       	adc	r23, r12
     1f6:	90 1d       	adc	r25, r0
     1f8:	a4 bb       	out	0x14, r26	; 20
     1fa:	e4 24       	eor	r14, r4
     1fc:	20 32       	cpi	r18, 0x20	; 32
     1fe:	84 72       	andi	r24, 0x24	; 36
     200:	5e 22       	and	r5, r30
     202:	81 00       	.word	0x0081	; ????
     204:	c9 f1       	breq	.+114    	; 0x278 <myFont+0x6c>
     206:	24 ec       	ldi	r18, 0xC4	; 196
     208:	a1 e5       	ldi	r26, 0x51	; 81
     20a:	3d 27       	eor	r19, r29

0000020c <myFont>:
	...
     214:	00 00 5f 00 00 00 00 00 00 00 07 00 07 00 00 00     .._.............
     224:	00 14 7f 14 7f 14 00 00 00 24 2a 7f 2a 12 00 00     .........$*.*...
     234:	00 23 13 08 64 62 00 00 00 36 49 55 22 50 00 00     .#..db...6IU"P..
     244:	00 00 05 03 00 00 00 00 00 1c 22 41 00 00 00 00     .........."A....
     254:	00 41 22 1c 00 00 00 00 00 08 2a 1c 2a 08 00 00     .A".......*.*...
     264:	00 08 08 3e 08 08 00 00 00 a0 60 00 00 00 00 00     ...>......`.....
     274:	00 08 08 08 08 08 00 00 00 60 60 00 00 00 00 00     .........``.....
     284:	00 20 10 08 04 02 00 00 00 3e 51 49 45 3e 00 00     . .......>QIE>..
     294:	00 00 42 7f 40 00 00 00 00 62 51 49 49 46 00 00     ..B.@....bQIIF..
     2a4:	00 22 41 49 49 36 00 00 00 18 14 12 7f 10 00 00     ."AII6..........
     2b4:	00 27 45 45 45 39 00 00 00 3c 4a 49 49 30 00 00     .'EEE9...<JII0..
     2c4:	00 01 71 09 05 03 00 00 00 36 49 49 49 36 00 00     ..q......6III6..
     2d4:	00 06 49 49 29 1e 00 00 00 00 36 36 00 00 00 00     ..II).....66....
     2e4:	00 00 ac 6c 00 00 00 00 00 08 14 22 41 00 00 00     ...l......."A...
     2f4:	00 14 14 14 14 14 00 00 00 41 22 14 08 00 00 00     .........A".....
     304:	00 02 01 51 09 06 00 00 00 32 49 79 41 3e 00 00     ...Q.....2IyA>..
     314:	00 7e 09 09 09 7e 00 00 00 7f 49 49 49 36 00 00     .~...~....III6..
     324:	00 3e 41 41 41 22 00 00 00 7f 41 41 22 1c 00 00     .>AAA"....AA"...
     334:	00 7f 49 49 49 41 00 00 00 7f 09 09 09 01 00 00     ..IIIA..........
     344:	00 3e 41 41 51 72 00 00 00 7f 08 08 08 7f 00 00     .>AAQr..........
     354:	00 41 7f 41 00 00 00 00 00 20 40 41 3f 01 00 00     .A.A..... @A?...
     364:	00 7f 08 14 22 41 00 00 00 7f 40 40 40 40 00 00     ...."A....@@@@..
     374:	00 7f 02 0c 02 7f 00 00 00 7f 04 08 10 7f 00 00     ................
     384:	00 3e 41 41 41 3e 00 00 00 7f 09 09 09 06 00 00     .>AAA>..........
     394:	00 3e 41 51 21 5e 00 00 00 7f 09 19 29 46 00 00     .>AQ!^......)F..
     3a4:	00 26 49 49 49 32 00 00 00 01 01 7f 01 01 00 00     .&III2..........
     3b4:	00 3f 40 40 40 3f 00 00 00 1f 20 40 20 1f 00 00     .?@@@?.... @ ...
     3c4:	00 3f 40 38 40 3f 00 00 00 63 14 08 14 63 00 00     .?@8@?...c...c..
     3d4:	00 03 04 78 04 03 00 00 00 61 51 49 45 43 00 00     ...x.....aQIEC..
     3e4:	00 7f 41 41 00 00 00 00 00 02 04 08 10 20 00 00     ..AA......... ..
     3f4:	00 41 41 7f 00 00 00 00 00 04 02 01 02 04 00 00     .AA.............
     404:	00 80 80 80 80 80 00 00 00 01 02 04 00 00 00 00     ................
     414:	00 20 54 54 54 78 00 00 00 7f 48 44 44 38 00 00     . TTTx....HDD8..
     424:	00 38 44 44 28 00 00 00 00 38 44 44 48 7f 00 00     .8DD(....8DDH...
     434:	00 38 54 54 54 18 00 00 00 08 7e 09 02 00 00 00     .8TTT.....~.....
     444:	00 18 a4 a4 a4 7c 00 00 00 7f 08 04 04 78 00 00     .....|.......x..
     454:	00 00 7d 00 00 00 00 00 00 80 84 7d 00 00 00 00     ..}........}....
     464:	00 7f 10 28 44 00 00 00 00 41 7f 40 00 00 00 00     ...(D....A.@....
     474:	00 7c 04 18 04 78 00 00 00 7c 08 04 7c 00 00 00     .|...x...|..|...
     484:	00 38 44 44 38 00 00 00 00 fc 24 24 18 00 00 00     .8DD8.....$$....
     494:	00 18 24 24 fc 00 00 00 00 00 7c 08 04 00 00 00     ..$$......|.....
     4a4:	00 48 54 54 24 00 00 00 00 04 7f 44 00 00 00 00     .HTT$......D....
     4b4:	00 3c 40 40 7c 00 00 00 00 1c 20 40 20 1c 00 00     .<@@|..... @ ...
     4c4:	00 3c 40 30 40 3c 00 00 00 44 28 10 28 44 00 00     .<@0@<...D(.(D..
     4d4:	00 1c a0 a0 7c 00 00 00 00 44 64 54 4c 44 00 00     ....|....DdTLD..
     4e4:	00 08 36 41 00 00 00 00 00 00 7f 00 00 00 00 00     ..6A............
     4f4:	00 41 36 08 00 00 00 00 00 02 01 01 02 01 00 00     .A6.............
     504:	00 02 05 05 02 00 00 00                             ........

0000050c <__ctors_end>:
     50c:	11 24       	eor	r1, r1
     50e:	1f be       	out	0x3f, r1	; 63
     510:	cf ef       	ldi	r28, 0xFF	; 255
     512:	d1 e2       	ldi	r29, 0x21	; 33
     514:	de bf       	out	0x3e, r29	; 62
     516:	cd bf       	out	0x3d, r28	; 61
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	0c bf       	out	0x3c, r16	; 60

0000051c <__do_copy_data>:
     51c:	13 e0       	ldi	r17, 0x03	; 3
     51e:	a0 e0       	ldi	r26, 0x00	; 0
     520:	b2 e0       	ldi	r27, 0x02	; 2
     522:	ea e2       	ldi	r30, 0x2A	; 42
     524:	ff e1       	ldi	r31, 0x1F	; 31
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0b bf       	out	0x3b, r16	; 59
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__do_copy_data+0x14>
     52c:	07 90       	elpm	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	ac 3d       	cpi	r26, 0xDC	; 220
     532:	b1 07       	cpc	r27, r17
     534:	d9 f7       	brne	.-10     	; 0x52c <__do_copy_data+0x10>

00000536 <__do_clear_bss>:
     536:	25 e0       	ldi	r18, 0x05	; 5
     538:	ac ed       	ldi	r26, 0xDC	; 220
     53a:	b3 e0       	ldi	r27, 0x03	; 3
     53c:	01 c0       	rjmp	.+2      	; 0x540 <.do_clear_bss_start>

0000053e <.do_clear_bss_loop>:
     53e:	1d 92       	st	X+, r1

00000540 <.do_clear_bss_start>:
     540:	a6 3b       	cpi	r26, 0xB6	; 182
     542:	b2 07       	cpc	r27, r18
     544:	e1 f7       	brne	.-8      	; 0x53e <.do_clear_bss_loop>
     546:	3c d5       	rcall	.+2680   	; 0xfc0 <main>
     548:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <_exit>

0000054c <__bad_interrupt>:
     54c:	59 cd       	rjmp	.-1358   	; 0x0 <__vectors>

0000054e <init_adc>:
     54e:	ea e7       	ldi	r30, 0x7A	; 122
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	90 81       	ld	r25, Z
     554:	94 60       	ori	r25, 0x04	; 4
     556:	90 83       	st	Z, r25
     558:	ac e7       	ldi	r26, 0x7C	; 124
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	9c 91       	ld	r25, X
     55e:	90 62       	ori	r25, 0x20	; 32
     560:	9c 93       	st	X, r25
     562:	ae e7       	ldi	r26, 0x7E	; 126
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	9c 91       	ld	r25, X
     568:	91 60       	ori	r25, 0x01	; 1
     56a:	9c 93       	st	X, r25
     56c:	ab e7       	ldi	r26, 0x7B	; 123
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	9c 91       	ld	r25, X
     572:	93 60       	ori	r25, 0x03	; 3
     574:	9c 93       	st	X, r25
     576:	90 81       	ld	r25, Z
     578:	90 62       	ori	r25, 0x20	; 32
     57a:	90 83       	st	Z, r25
     57c:	90 81       	ld	r25, Z
     57e:	90 68       	ori	r25, 0x80	; 128
     580:	90 83       	st	Z, r25
     582:	88 23       	and	r24, r24
     584:	19 f0       	breq	.+6      	; 0x58c <init_adc+0x3e>
     586:	80 81       	ld	r24, Z
     588:	88 60       	ori	r24, 0x08	; 8
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret

0000058e <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
     58e:	81 b1       	in	r24, 0x01	; 1
     590:	81 60       	ori	r24, 0x01	; 1
     592:	81 b9       	out	0x01, r24	; 1
     594:	82 b1       	in	r24, 0x02	; 2
     596:	81 60       	ori	r24, 0x01	; 1
     598:	82 b9       	out	0x02, r24	; 2
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	83 ed       	ldi	r24, 0xD3	; 211
     59e:	90 e3       	ldi	r25, 0x30	; 48
     5a0:	21 50       	subi	r18, 0x01	; 1
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	90 40       	sbci	r25, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <I2C_Init+0x12>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <I2C_Init+0x1c>
     5aa:	00 00       	nop
     5ac:	82 e1       	ldi	r24, 0x12	; 18
     5ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     5b2:	e9 eb       	ldi	r30, 0xB9	; 185
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	8c 7f       	andi	r24, 0xFC	; 252
     5ba:	80 83       	st	Z, r24
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5c2:	08 95       	ret

000005c4 <I2C_Start>:
     5c4:	94 ea       	ldi	r25, 0xA4	; 164
     5c6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ce:	99 23       	and	r25, r25
     5d0:	e4 f7       	brge	.-8      	; 0x5ca <I2C_Start+0x6>
     5d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     5d6:	98 7f       	andi	r25, 0xF8	; 248
     5d8:	98 30       	cpi	r25, 0x08	; 8
     5da:	91 f4       	brne	.+36     	; 0x600 <I2C_Start+0x3c>
     5dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     5e0:	84 e8       	ldi	r24, 0x84	; 132
     5e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     5ea:	88 23       	and	r24, r24
     5ec:	e4 f7       	brge	.-8      	; 0x5e6 <I2C_Start+0x22>
     5ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     5f2:	88 7f       	andi	r24, 0xF8	; 248
     5f4:	88 31       	cpi	r24, 0x18	; 24
     5f6:	31 f0       	breq	.+12     	; 0x604 <I2C_Start+0x40>
     5f8:	80 32       	cpi	r24, 0x20	; 32
     5fa:	31 f4       	brne	.+12     	; 0x608 <I2C_Start+0x44>
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	08 95       	ret
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	08 95       	ret
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	08 95       	ret
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	08 95       	ret

0000060c <I2C_Write>:
     60c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     610:	84 e8       	ldi	r24, 0x84	; 132
     612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     616:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     61a:	88 23       	and	r24, r24
     61c:	e4 f7       	brge	.-8      	; 0x616 <I2C_Write+0xa>
     61e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     622:	88 7f       	andi	r24, 0xF8	; 248
     624:	88 32       	cpi	r24, 0x28	; 40
     626:	21 f0       	breq	.+8      	; 0x630 <I2C_Write+0x24>
     628:	80 33       	cpi	r24, 0x30	; 48
     62a:	21 f4       	brne	.+8      	; 0x634 <I2C_Write+0x28>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	08 95       	ret
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	08 95       	ret
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	08 95       	ret

00000638 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     638:	84 e9       	ldi	r24, 0x94	; 148
     63a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     63e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     642:	84 fd       	sbrc	r24, 4
     644:	fc cf       	rjmp	.-8      	; 0x63e <I2C_Stop+0x6>
     646:	08 95       	ret

00000648 <nextState>:
 }
 
 
  //Set next state in state machine
  void nextState(char input){
	  tilstand = input;
     648:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <tilstand>
     64c:	08 95       	ret

0000064e <init_trigonometry>:
 // DFT
 // ================================================
 
 //Pre-load Trigonometric values into buffers:
 void init_trigonometry(){
	 for(int i = 0; i<NUM_SAMPLES; i++){
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	56 c0       	rjmp	.+172    	; 0x700 <init_trigonometry+0xb2>
		switch(trig_count){
     654:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <trig_count>
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	c9 f0       	breq	.+50     	; 0x68e <init_trigonometry+0x40>
     65c:	28 f0       	brcs	.+10     	; 0x668 <init_trigonometry+0x1a>
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	49 f1       	breq	.+82     	; 0x6b4 <init_trigonometry+0x66>
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	d1 f1       	breq	.+116    	; 0x6da <init_trigonometry+0x8c>
     666:	4a c0       	rjmp	.+148    	; 0x6fc <init_trigonometry+0xae>
			case 0:
			ReTrig[i]=1;
     668:	a9 01       	movw	r20, r18
     66a:	44 0f       	add	r20, r20
     66c:	55 1f       	adc	r21, r21
     66e:	fa 01       	movw	r30, r20
     670:	e8 5e       	subi	r30, 0xE8	; 232
     672:	fa 4f       	sbci	r31, 0xFA	; 250
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	71 83       	std	Z+1, r23	; 0x01
     67a:	60 83       	st	Z, r22
			ImTrig[i]=0;
     67c:	fa 01       	movw	r30, r20
     67e:	e8 56       	subi	r30, 0x68	; 104
     680:	fb 4f       	sbci	r31, 0xFB	; 251
     682:	11 82       	std	Z+1, r1	; 0x01
     684:	10 82       	st	Z, r1
			trig_count++;
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     68c:	37 c0       	rjmp	.+110    	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 1:
			ReTrig[i]=0;
     68e:	a9 01       	movw	r20, r18
     690:	44 0f       	add	r20, r20
     692:	55 1f       	adc	r21, r21
     694:	fa 01       	movw	r30, r20
     696:	e8 5e       	subi	r30, 0xE8	; 232
     698:	fa 4f       	sbci	r31, 0xFA	; 250
     69a:	11 82       	std	Z+1, r1	; 0x01
     69c:	10 82       	st	Z, r1
			ImTrig[i]=1;
     69e:	fa 01       	movw	r30, r20
     6a0:	e8 56       	subi	r30, 0x68	; 104
     6a2:	fb 4f       	sbci	r31, 0xFB	; 251
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	71 83       	std	Z+1, r23	; 0x01
     6aa:	60 83       	st	Z, r22
			trig_count++;
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     6b2:	24 c0       	rjmp	.+72     	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 2:
			ReTrig[i]=-1;
     6b4:	a9 01       	movw	r20, r18
     6b6:	44 0f       	add	r20, r20
     6b8:	55 1f       	adc	r21, r21
     6ba:	fa 01       	movw	r30, r20
     6bc:	e8 5e       	subi	r30, 0xE8	; 232
     6be:	fa 4f       	sbci	r31, 0xFA	; 250
     6c0:	6f ef       	ldi	r22, 0xFF	; 255
     6c2:	7f ef       	ldi	r23, 0xFF	; 255
     6c4:	71 83       	std	Z+1, r23	; 0x01
     6c6:	60 83       	st	Z, r22
			ImTrig[i]=0;
     6c8:	fa 01       	movw	r30, r20
     6ca:	e8 56       	subi	r30, 0x68	; 104
     6cc:	fb 4f       	sbci	r31, 0xFB	; 251
     6ce:	11 82       	std	Z+1, r1	; 0x01
     6d0:	10 82       	st	Z, r1
			trig_count++;
     6d2:	8f 5f       	subi	r24, 0xFF	; 255
     6d4:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <trig_count>
			break;
     6d8:	11 c0       	rjmp	.+34     	; 0x6fc <init_trigonometry+0xae>
			 		 
			case 3:
			ReTrig[i]=0;
     6da:	c9 01       	movw	r24, r18
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	fc 01       	movw	r30, r24
     6e2:	e8 5e       	subi	r30, 0xE8	; 232
     6e4:	fa 4f       	sbci	r31, 0xFA	; 250
     6e6:	11 82       	std	Z+1, r1	; 0x01
     6e8:	10 82       	st	Z, r1
			ImTrig[i]=-1;
     6ea:	fc 01       	movw	r30, r24
     6ec:	e8 56       	subi	r30, 0x68	; 104
     6ee:	fb 4f       	sbci	r31, 0xFB	; 251
     6f0:	4f ef       	ldi	r20, 0xFF	; 255
     6f2:	5f ef       	ldi	r21, 0xFF	; 255
     6f4:	51 83       	std	Z+1, r21	; 0x01
     6f6:	40 83       	st	Z, r20
			trig_count = 0;
     6f8:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <trig_count>
 // DFT
 // ================================================
 
 //Pre-load Trigonometric values into buffers:
 void init_trigonometry(){
	 for(int i = 0; i<NUM_SAMPLES; i++){
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	20 34       	cpi	r18, 0x40	; 64
     702:	31 05       	cpc	r19, r1
     704:	0c f4       	brge	.+2      	; 0x708 <init_trigonometry+0xba>
     706:	a6 cf       	rjmp	.-180    	; 0x654 <init_trigonometry+0x6>
			ImTrig[i]=-1;
			trig_count = 0;
			break;
		}
	 }
 }
     708:	08 95       	ret

0000070a <loadMaterials>:
}

//Pre-load default material phases
void loadMaterials(){
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	10 c0       	rjmp	.+32     	; 0x730 <loadMaterials+0x26>
		materials[iron][i] = IRON_PHASE;
     710:	fc 01       	movw	r30, r24
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e0 50       	subi	r30, 0x00	; 0
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	60 e2       	ldi	r22, 0x20	; 32
     724:	71 e4       	ldi	r23, 0x41	; 65
     726:	40 83       	st	Z, r20
     728:	51 83       	std	Z+1, r21	; 0x01
     72a:	62 83       	std	Z+2, r22	; 0x02
     72c:	73 83       	std	Z+3, r23	; 0x03
}

//Pre-load default material phases
void loadMaterials(){
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	84 31       	cpi	r24, 0x14	; 20
     732:	91 05       	cpc	r25, r1
     734:	6c f3       	brlt	.-38     	; 0x710 <loadMaterials+0x6>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	11 c0       	rjmp	.+34     	; 0x75e <loadMaterials+0x54>
		materials[iron][i] = IRON_PHASE;
	}
	//Copper
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[copper][i] = COPPER_PHASE; 
     73c:	fc 01       	movw	r30, r24
     73e:	74 96       	adiw	r30, 0x14	; 20
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	e0 50       	subi	r30, 0x00	; 0
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	60 e2       	ldi	r22, 0x20	; 32
     752:	72 ec       	ldi	r23, 0xC2	; 194
     754:	40 83       	st	Z, r20
     756:	51 83       	std	Z+1, r21	; 0x01
     758:	62 83       	std	Z+2, r22	; 0x02
     75a:	73 83       	std	Z+3, r23	; 0x03
	//Iron
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[iron][i] = IRON_PHASE;
	}
	//Copper
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	84 31       	cpi	r24, 0x14	; 20
     760:	91 05       	cpc	r25, r1
     762:	64 f3       	brlt	.-40     	; 0x73c <loadMaterials+0x32>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	11 c0       	rjmp	.+34     	; 0x78c <loadMaterials+0x82>
		materials[copper][i] = COPPER_PHASE; 
	}

	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[brass][i] = BRASS_PHASE;
     76a:	fc 01       	movw	r30, r24
     76c:	b8 96       	adiw	r30, 0x28	; 40
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e0 50       	subi	r30, 0x00	; 0
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	60 e2       	ldi	r22, 0x20	; 32
     780:	71 e4       	ldi	r23, 0x41	; 65
     782:	40 83       	st	Z, r20
     784:	51 83       	std	Z+1, r21	; 0x01
     786:	62 83       	std	Z+2, r22	; 0x02
     788:	73 83       	std	Z+3, r23	; 0x03
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[copper][i] = COPPER_PHASE; 
	}

	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	84 31       	cpi	r24, 0x14	; 20
     78e:	91 05       	cpc	r25, r1
     790:	64 f3       	brlt	.-40     	; 0x76a <loadMaterials+0x60>
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	11 c0       	rjmp	.+34     	; 0x7ba <loadMaterials+0xb0>
		materials[brass][i] = BRASS_PHASE;
	}
	//Aluminum
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[aluminum][i] = ALUMINUM_PHASE;
     798:	fc 01       	movw	r30, r24
     79a:	fc 96       	adiw	r30, 0x3c	; 60
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e0 50       	subi	r30, 0x00	; 0
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	64 e7       	ldi	r22, 0x74	; 116
     7ae:	72 ec       	ldi	r23, 0xC2	; 194
     7b0:	40 83       	st	Z, r20
     7b2:	51 83       	std	Z+1, r21	; 0x01
     7b4:	62 83       	std	Z+2, r22	; 0x02
     7b6:	73 83       	std	Z+3, r23	; 0x03
	//Brass
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
		materials[brass][i] = BRASS_PHASE;
	}
	//Aluminum
	for(int i = 0; i< NUM_MATERIAL_SAMPLES; i++){
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	84 31       	cpi	r24, 0x14	; 20
     7bc:	91 05       	cpc	r25, r1
     7be:	64 f3       	brlt	.-40     	; 0x798 <loadMaterials+0x8e>
		materials[aluminum][i] = ALUMINUM_PHASE;
	}
}
     7c0:	08 95       	ret

000007c2 <checkPhaseStability>:


//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
     7c2:	8f 92       	push	r8
     7c4:	9f 92       	push	r9
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	d0 e0       	ldi	r29, 0x00	; 0
     7da:	31 c0       	rjmp	.+98     	; 0x83e <checkPhaseStability+0x7c>
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
     7dc:	fe 01       	movw	r30, r28
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	e2 5a       	subi	r30, 0xA2	; 162
     7e8:	fb 4f       	sbci	r31, 0xFB	; 251
     7ea:	c0 80       	ld	r12, Z
     7ec:	d1 80       	ldd	r13, Z+1	; 0x01
     7ee:	e2 80       	ldd	r14, Z+2	; 0x02
     7f0:	f3 80       	ldd	r15, Z+3	; 0x03
     7f2:	80 90 8a 04 	lds	r8, 0x048A	; 0x80048a <angle>
     7f6:	90 90 8b 04 	lds	r9, 0x048B	; 0x80048b <angle+0x1>
     7fa:	a0 90 8c 04 	lds	r10, 0x048C	; 0x80048c <angle+0x2>
     7fe:	b0 90 8d 04 	lds	r11, 0x048D	; 0x80048d <angle+0x3>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 ea       	ldi	r20, 0xA0	; 160
     808:	50 e4       	ldi	r21, 0x40	; 64
     80a:	c5 01       	movw	r24, r10
     80c:	b4 01       	movw	r22, r8
     80e:	4d d6       	rcall	.+3226   	; 0x14aa <__addsf3>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	c7 01       	movw	r24, r14
     816:	b6 01       	movw	r22, r12
     818:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     81c:	18 16       	cp	r1, r24
     81e:	a4 f0       	brlt	.+40     	; 0x848 <checkPhaseStability+0x86>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 ea       	ldi	r20, 0xA0	; 160
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	c5 01       	movw	r24, r10
     82a:	b4 01       	movw	r22, r8
     82c:	3d d6       	rcall	.+3194   	; 0x14a8 <__subsf3>
     82e:	9b 01       	movw	r18, r22
     830:	ac 01       	movw	r20, r24
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	ff d6       	rcall	.+3582   	; 0x1636 <__cmpsf2>
     838:	88 23       	and	r24, r24
     83a:	44 f0       	brlt	.+16     	; 0x84c <checkPhaseStability+0x8a>


//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	ca 30       	cpi	r28, 0x0A	; 10
     840:	d1 05       	cpc	r29, r1
     842:	64 f2       	brlt	.-104    	; 0x7dc <checkPhaseStability+0x1a>
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
	}
	return true;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	03 c0       	rjmp	.+6      	; 0x84e <checkPhaseStability+0x8c>

//Check if phase from latest X samples is stable(within threshold)
//Returns TRUE if phase is stable. FALSE otherwise
char checkPhaseStability(){
	for(int i = 0; i<NUM_PHASE_STABILITY_SAMPLES; i++){
		 if(angleThres[i] > angle+PHASE_TOLERANCE || angleThres[i] < angle-PHASE_TOLERANCE) return false;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	01 c0       	rjmp	.+2      	; 0x84e <checkPhaseStability+0x8c>
     84c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	9f 90       	pop	r9
     860:	8f 90       	pop	r8
     862:	08 95       	ret

00000864 <detectPhase>:
// Main functionality
// ================================================

//Detect material from signal phase
//Returns material ID if phase is matched. 0xFF otherwise
char detectPhase(){
     864:	4f 92       	push	r4
     866:	5f 92       	push	r5
     868:	6f 92       	push	r6
     86a:	7f 92       	push	r7
     86c:	8f 92       	push	r8
     86e:	9f 92       	push	r9
     870:	af 92       	push	r10
     872:	bf 92       	push	r11
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
	
	//Check if signal amplitude is above threshold
	if(modulus>AMP_THRESHOLD){
     882:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     886:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     88a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     88e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e4       	ldi	r21, 0x40	; 64
     89a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     89e:	18 16       	cp	r1, r24
     8a0:	0c f0       	brlt	.+2      	; 0x8a4 <detectPhase+0x40>
     8a2:	56 c0       	rjmp	.+172    	; 0x950 <detectPhase+0xec>
		//Check stability of phase
		if(checkPhaseStability()){
     8a4:	8e df       	rcall	.-228    	; 0x7c2 <checkPhaseStability>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <detectPhase+0x48>
     8aa:	54 c0       	rjmp	.+168    	; 0x954 <detectPhase+0xf0>
			
			//Detect material from phase
			char result[2] = {0,undefined};
     8ac:	e1 2c       	mov	r14, r1
     8ae:	68 94       	set
     8b0:	dd 24       	eor	r13, r13
     8b2:	d2 f8       	bld	r13, 2
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
     8b4:	00 e0       	ldi	r16, 0x00	; 0
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	46 c0       	rjmp	.+140    	; 0x946 <detectPhase+0xe2>
				hits = 0;
				for(int j = 0; j<NUM_MATERIAL_SAMPLES; j++){
					if(materials[i][j] < (angle+MATERIAL_DEVIATION) && materials[i][j] > (angle-MATERIAL_DEVIATION)){
     8ba:	84 e1       	ldi	r24, 0x14	; 20
     8bc:	80 9f       	mul	r24, r16
     8be:	f0 01       	movw	r30, r0
     8c0:	81 9f       	mul	r24, r17
     8c2:	f0 0d       	add	r31, r0
     8c4:	11 24       	eor	r1, r1
     8c6:	ec 0f       	add	r30, r28
     8c8:	fd 1f       	adc	r31, r29
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ee 0f       	add	r30, r30
     8d0:	ff 1f       	adc	r31, r31
     8d2:	e0 50       	subi	r30, 0x00	; 0
     8d4:	fe 4f       	sbci	r31, 0xFE	; 254
     8d6:	80 80       	ld	r8, Z
     8d8:	91 80       	ldd	r9, Z+1	; 0x01
     8da:	a2 80       	ldd	r10, Z+2	; 0x02
     8dc:	b3 80       	ldd	r11, Z+3	; 0x03
     8de:	40 90 8a 04 	lds	r4, 0x048A	; 0x80048a <angle>
     8e2:	50 90 8b 04 	lds	r5, 0x048B	; 0x80048b <angle+0x1>
     8e6:	60 90 8c 04 	lds	r6, 0x048C	; 0x80048c <angle+0x2>
     8ea:	70 90 8d 04 	lds	r7, 0x048D	; 0x80048d <angle+0x3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e4       	ldi	r21, 0x40	; 64
     8f6:	c3 01       	movw	r24, r6
     8f8:	b2 01       	movw	r22, r4
     8fa:	d7 d5       	rcall	.+2990   	; 0x14aa <__addsf3>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	c5 01       	movw	r24, r10
     902:	b4 01       	movw	r22, r8
     904:	98 d6       	rcall	.+3376   	; 0x1636 <__cmpsf2>
     906:	88 23       	and	r24, r24
     908:	7c f4       	brge	.+30     	; 0x928 <detectPhase+0xc4>
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e4       	ldi	r21, 0x40	; 64
     912:	c3 01       	movw	r24, r6
     914:	b2 01       	movw	r22, r4
     916:	c8 d5       	rcall	.+2960   	; 0x14a8 <__subsf3>
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	c5 01       	movw	r24, r10
     91e:	b4 01       	movw	r22, r8
     920:	cb d7       	rcall	.+3990   	; 0x18b8 <__gesf2>
     922:	18 16       	cp	r1, r24
     924:	0c f4       	brge	.+2      	; 0x928 <detectPhase+0xc4>
						hits ++; 
     926:	f3 94       	inc	r15
					}
					if(hits>result[0]){
     928:	ef 14       	cp	r14, r15
     92a:	10 f4       	brcc	.+4      	; 0x930 <detectPhase+0xcc>
						 result[0]=hits;
     92c:	ef 2c       	mov	r14, r15
						 result[1]=i;	//Save material with most hits
     92e:	d0 2e       	mov	r13, r16
			//Detect material from phase
			char result[2] = {0,undefined};
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
				hits = 0;
				for(int j = 0; j<NUM_MATERIAL_SAMPLES; j++){
     930:	21 96       	adiw	r28, 0x01	; 1
     932:	03 c0       	rjmp	.+6      	; 0x93a <detectPhase+0xd6>
     934:	c0 e0       	ldi	r28, 0x00	; 0
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	f1 2c       	mov	r15, r1
     93a:	c4 31       	cpi	r28, 0x14	; 20
     93c:	d1 05       	cpc	r29, r1
     93e:	0c f4       	brge	.+2      	; 0x942 <detectPhase+0xde>
     940:	bc cf       	rjmp	.-136    	; 0x8ba <detectPhase+0x56>
		if(checkPhaseStability()){
			
			//Detect material from phase
			char result[2] = {0,undefined};
			char hits = 0;
			for(int i = 0; i<NUM_MATERIALS-1; i++){
     942:	0f 5f       	subi	r16, 0xFF	; 255
     944:	1f 4f       	sbci	r17, 0xFF	; 255
     946:	04 30       	cpi	r16, 0x04	; 4
     948:	11 05       	cpc	r17, r1
     94a:	a4 f3       	brlt	.-24     	; 0x934 <detectPhase+0xd0>
						 result[1]=i;	//Save material with most hits
					}
				}
			}
			//Return material with most matched phase "hits"
			return result[1];
     94c:	8d 2d       	mov	r24, r13
     94e:	03 c0       	rjmp	.+6      	; 0x956 <detectPhase+0xf2>
		}
	}
	return undefined;
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	01 c0       	rjmp	.+2      	; 0x956 <detectPhase+0xf2>
     954:	84 e0       	ldi	r24, 0x04	; 4
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	9f 90       	pop	r9
     96a:	8f 90       	pop	r8
     96c:	7f 90       	pop	r7
     96e:	6f 90       	pop	r6
     970:	5f 90       	pop	r5
     972:	4f 90       	pop	r4
     974:	08 95       	ret

00000976 <defaultDisplay>:
 void(* resetFunc) (void) = 0;


//Print default text on display
void defaultDisplay(){
	clear_display();
     976:	03 d5       	rcall	.+2566   	; 0x137e <clear_display>
	sendStrXY("Mode:",1,0);
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	83 e9       	ldi	r24, 0x93	; 147
     982:	93 e0       	ldi	r25, 0x03	; 3
     984:	10 d5       	rcall	.+2592   	; 0x13a6 <sendStrXY>
	sendStrXY("AMP",2,0);
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	62 e0       	ldi	r22, 0x02	; 2
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	89 e9       	ldi	r24, 0x99	; 153
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	09 d5       	rcall	.+2578   	; 0x13a6 <sendStrXY>
	sendStrXY("Angle:",3,0);
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	63 e0       	ldi	r22, 0x03	; 3
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	8d e9       	ldi	r24, 0x9D	; 157
     99e:	93 e0       	ldi	r25, 0x03	; 3
     9a0:	02 d5       	rcall	.+2564   	; 0x13a6 <sendStrXY>
	sendStrXY("Material:",5,0);
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	65 e0       	ldi	r22, 0x05	; 5
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	84 ea       	ldi	r24, 0xA4	; 164
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	fb c4       	rjmp	.+2550   	; 0x13a6 <sendStrXY>
     9b0:	08 95       	ret

000009b2 <setup>:
// ================================================

 void setup(){
	 
	 //Setup ADC PORT
	 SETBIT(DDRB,6);
     9b2:	84 b1       	in	r24, 0x04	; 4
     9b4:	80 64       	ori	r24, 0x40	; 64
     9b6:	84 b9       	out	0x04, r24	; 4
	 CLRBIT(PORTB,6);
     9b8:	85 b1       	in	r24, 0x05	; 5
     9ba:	8f 7b       	andi	r24, 0xBF	; 191
     9bc:	85 b9       	out	0x05, r24	; 5
	 
	 //Setup PINS for buttons
	 CLRBIT(DDRE,5); //PE5 int5 pin3
     9be:	8d b1       	in	r24, 0x0d	; 13
     9c0:	8f 7d       	andi	r24, 0xDF	; 223
     9c2:	8d b9       	out	0x0d, r24	; 13
	 CLRBIT(DDRE,4); //PE4 int4 pin2
     9c4:	8d b1       	in	r24, 0x0d	; 13
     9c6:	8f 7e       	andi	r24, 0xEF	; 239
     9c8:	8d b9       	out	0x0d, r24	; 13
	 CLRBIT(DDRD,3); //PD3 int3 pin18
     9ca:	8a b1       	in	r24, 0x0a	; 10
     9cc:	87 7f       	andi	r24, 0xF7	; 247
     9ce:	8a b9       	out	0x0a, r24	; 10
	 //Internal Pull-up on inputs
	 SETBIT(PORTE,5); 
     9d0:	8e b1       	in	r24, 0x0e	; 14
     9d2:	80 62       	ori	r24, 0x20	; 32
     9d4:	8e b9       	out	0x0e, r24	; 14
	 SETBIT(PORTE,4);
     9d6:	8e b1       	in	r24, 0x0e	; 14
     9d8:	80 61       	ori	r24, 0x10	; 16
     9da:	8e b9       	out	0x0e, r24	; 14
	 SETBIT(PORTD,3);
     9dc:	8b b1       	in	r24, 0x0b	; 11
     9de:	88 60       	ori	r24, 0x08	; 8
     9e0:	8b b9       	out	0x0b, r24	; 11
	 
	 //Configure falling edge detection on pins:
	 EICRA |= (1<<ISC31);
     9e2:	e9 e6       	ldi	r30, 0x69	; 105
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	80 68       	ori	r24, 0x80	; 128
     9ea:	80 83       	st	Z, r24
	 EICRB |= (1<<ISC41) | (1<<ISC51) ;	
     9ec:	ea e6       	ldi	r30, 0x6A	; 106
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	8a 60       	ori	r24, 0x0A	; 10
     9f4:	80 83       	st	Z, r24
	 
	 //Enable interrupts with EIMSK:
	 EIMSK |= (1<<INT5) | (1<<INT4) | (1<<INT3);
     9f6:	8d b3       	in	r24, 0x1d	; 29
     9f8:	88 63       	ori	r24, 0x38	; 56
     9fa:	8d bb       	out	0x1d, r24	; 29
	 
	 //Enable global interrupt
	 sei();
     9fc:	78 94       	sei
	 
	 //OLED-display
	 _i2c_address = 0X78;
     9fe:	88 e7       	ldi	r24, 0x78	; 120
     a00:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <_i2c_address>
	 I2C_Init();
     a04:	c4 dd       	rcall	.-1144   	; 0x58e <I2C_Init>
	 InitializeDisplay();
     a06:	69 d4       	rcall	.+2258   	; 0x12da <InitializeDisplay>
	 print_fonts();
     a08:	fc d4       	rcall	.+2552   	; 0x1402 <print_fonts>
	defaultDisplay();
     a0a:	b5 df       	rcall	.-150    	; 0x976 <defaultDisplay>
	
	 //init_timer0();
	 init_timer0();
     a0c:	3b d5       	rcall	.+2678   	; 0x1484 <init_timer0>
     a0e:	1f de       	rcall	.-962    	; 0x64e <init_trigonometry>
	 
	 //Fill Trigonometric array
	 init_trigonometry();
     a10:	7c ce       	rjmp	.-776    	; 0x70a <loadMaterials>
     a12:	08 95       	ret

00000a14 <calibrateDisplay>:
	 
	 loadMaterials();
     a14:	b4 d4       	rcall	.+2408   	; 0x137e <clear_display>
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
	sendStrXY("Material:",5,0);
}

void calibrateDisplay(){
	clear_display();
	sendStrXY("Select material",1,0);
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	8e ea       	ldi	r24, 0xAE	; 174
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	c1 d4       	rcall	.+2434   	; 0x13a6 <sendStrXY>
	sendStrXY("Material:",5,0);
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	65 e0       	ldi	r22, 0x05	; 5
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	84 ea       	ldi	r24, 0xA4	; 164
     a2e:	93 e0       	ldi	r25, 0x03	; 3
     a30:	ba c4       	rjmp	.+2420   	; 0x13a6 <sendStrXY>
     a32:	08 95       	ret

00000a34 <printMaterial>:
}

//Prints material to display
//INPUT: material ID
void printMaterial(char materialID){
	switch(materialID){
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	d9 f0       	breq	.+54     	; 0xa6e <printMaterial+0x3a>
     a38:	28 f4       	brcc	.+10     	; 0xa44 <printMaterial+0x10>
     a3a:	88 23       	and	r24, r24
     a3c:	41 f0       	breq	.+16     	; 0xa4e <printMaterial+0x1a>
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	71 f0       	breq	.+28     	; 0xa5e <printMaterial+0x2a>
     a42:	08 95       	ret
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	d9 f0       	breq	.+54     	; 0xa7e <printMaterial+0x4a>
     a48:	84 30       	cpi	r24, 0x04	; 4
     a4a:	09 f1       	breq	.+66     	; 0xa8e <printMaterial+0x5a>
     a4c:	08 95       	ret
		case iron:
			sendStrXY("IRO",5,10);
     a4e:	4a e0       	ldi	r20, 0x0A	; 10
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	65 e0       	ldi	r22, 0x05	; 5
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	8e eb       	ldi	r24, 0xBE	; 190
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	a5 c4       	rjmp	.+2378   	; 0x13a6 <sendStrXY>
			break;
     a5c:	08 95       	ret
		case copper:
			sendStrXY("COP",5,10);
     a5e:	4a e0       	ldi	r20, 0x0A	; 10
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	65 e0       	ldi	r22, 0x05	; 5
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	82 ec       	ldi	r24, 0xC2	; 194
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	9d c4       	rjmp	.+2362   	; 0x13a6 <sendStrXY>
			break;
     a6c:	08 95       	ret
		case brass:
			sendStrXY("BRA",5,10);
     a6e:	4a e0       	ldi	r20, 0x0A	; 10
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	65 e0       	ldi	r22, 0x05	; 5
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	86 ec       	ldi	r24, 0xC6	; 198
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	95 c4       	rjmp	.+2346   	; 0x13a6 <sendStrXY>
			break;
     a7c:	08 95       	ret
		case aluminum:
			sendStrXY("ALU",5,10);
     a7e:	4a e0       	ldi	r20, 0x0A	; 10
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	65 e0       	ldi	r22, 0x05	; 5
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	8a ec       	ldi	r24, 0xCA	; 202
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	8d c4       	rjmp	.+2330   	; 0x13a6 <sendStrXY>
			break;
     a8c:	08 95       	ret
		case undefined:
			sendStrXY("UND",5,10);
     a8e:	4a e0       	ldi	r20, 0x0A	; 10
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	65 e0       	ldi	r22, 0x05	; 5
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	8e ec       	ldi	r24, 0xCE	; 206
     a98:	93 e0       	ldi	r25, 0x03	; 3
     a9a:	85 c4       	rjmp	.+2314   	; 0x13a6 <sendStrXY>
     a9c:	08 95       	ret

00000a9e <debug_print_float>:
			break;
	}
}


void debug_print_float(float input,char x, char y){
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	c4 56       	subi	r28, 0x64	; 100
     ab4:	d1 09       	sbc	r29, r1
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	d4 2e       	mov	r13, r20
     ac2:	c2 2e       	mov	r12, r18
	char temp[100] = {0};
     ac4:	9e 01       	movw	r18, r28
     ac6:	2f 5f       	subi	r18, 0xFF	; 255
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	79 01       	movw	r14, r18
     acc:	24 e6       	ldi	r18, 0x64	; 100
     ace:	f7 01       	movw	r30, r14
     ad0:	11 92       	st	Z+, r1
     ad2:	2a 95       	dec	r18
     ad4:	e9 f7       	brne	.-6      	; 0xad0 <debug_print_float+0x32>
	dtostrf(input,5,2,temp);
     ad6:	87 01       	movw	r16, r14
     ad8:	22 e0       	ldi	r18, 0x02	; 2
     ada:	45 e0       	ldi	r20, 0x05	; 5
     adc:	b7 d7       	rcall	.+3950   	; 0x1a4c <dtostrf>
	//sprintf(temp,"%d",input);
	sendStrXY(temp, x,y);
     ade:	4c 2d       	mov	r20, r12
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	6d 2d       	mov	r22, r13
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	c7 01       	movw	r24, r14
     ae8:	5e d4       	rcall	.+2236   	; 0x13a6 <sendStrXY>
}
     aea:	cc 59       	subi	r28, 0x9C	; 156
     aec:	df 4f       	sbci	r29, 0xFF	; 255
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	08 95       	ret

00000b0a <computeDFT>:
 }


//Compute DFT for latest sample
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
     b0a:	4f 92       	push	r4
     b0c:	5f 92       	push	r5
     b0e:	6f 92       	push	r6
     b10:	7f 92       	push	r7
     b12:	8f 92       	push	r8
     b14:	9f 92       	push	r9
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
	 if(DFT_ready == 1){
     b28:	10 91 8e 04 	lds	r17, 0x048E	; 0x80048e <DFT_ready>
     b2c:	11 30       	cpi	r17, 0x01	; 1
     b2e:	09 f4       	brne	.+2      	; 0xb32 <computeDFT+0x28>
     b30:	9e c0       	rjmp	.+316    	; 0xc6e <computeDFT+0x164>
		 Re = 0;
		 Im = 0;
		 DFT_ready = 0;
		 return 1; 
	 }
	 return 0;
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	c7 c1       	rjmp	.+910    	; 0xec4 <computeDFT+0x3ba>
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
	 if(DFT_ready == 1){
		 
		 for(int i = 0; i<NUM_SAMPLES; i++){
			 Re += ReTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
     b36:	fe 01       	movw	r30, r28
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	e8 5e       	subi	r30, 0xE8	; 232
     b3e:	fa 4f       	sbci	r31, 0xFA	; 250
     b40:	40 81       	ld	r20, Z
     b42:	51 81       	ldd	r21, Z+1	; 0x01
     b44:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <active_write>
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	22 23       	and	r18, r18
     b4e:	11 f0       	breq	.+4      	; 0xb54 <computeDFT+0x4a>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	fc 01       	movw	r30, r24
     b56:	00 24       	eor	r0, r0
     b58:	f6 95       	lsr	r31
     b5a:	e7 95       	ror	r30
     b5c:	07 94       	ror	r0
     b5e:	f6 95       	lsr	r31
     b60:	e7 95       	ror	r30
     b62:	07 94       	ror	r0
     b64:	fe 2f       	mov	r31, r30
     b66:	e0 2d       	mov	r30, r0
     b68:	e3 52       	subi	r30, 0x23	; 35
     b6a:	fc 4f       	sbci	r31, 0xFC	; 252
     b6c:	ec 0f       	add	r30, r28
     b6e:	fd 1f       	adc	r31, r29
     b70:	80 81       	ld	r24, Z
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	9c 01       	movw	r18, r24
     b76:	22 0f       	add	r18, r18
     b78:	33 1f       	adc	r19, r19
     b7a:	22 0f       	add	r18, r18
     b7c:	33 1f       	adc	r19, r19
     b7e:	82 0f       	add	r24, r18
     b80:	93 1f       	adc	r25, r19
     b82:	48 9f       	mul	r20, r24
     b84:	90 01       	movw	r18, r0
     b86:	49 9f       	mul	r20, r25
     b88:	30 0d       	add	r19, r0
     b8a:	58 9f       	mul	r21, r24
     b8c:	30 0d       	add	r19, r0
     b8e:	11 24       	eor	r1, r1
     b90:	33 23       	and	r19, r19
     b92:	14 f4       	brge	.+4      	; 0xb98 <computeDFT+0x8e>
     b94:	21 50       	subi	r18, 0x01	; 1
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	63 2f       	mov	r22, r19
     b9a:	73 2f       	mov	r23, r19
     b9c:	77 0f       	add	r23, r23
     b9e:	77 0b       	sbc	r23, r23
     ba0:	07 2e       	mov	r0, r23
     ba2:	00 0c       	add	r0, r0
     ba4:	88 0b       	sbc	r24, r24
     ba6:	99 0b       	sbc	r25, r25
     ba8:	b2 d5       	rcall	.+2916   	; 0x170e <__floatsisf>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
     bae:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     bb2:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     bb6:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     bba:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     bbe:	75 d4       	rcall	.+2282   	; 0x14aa <__addsf3>
     bc0:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <Re>
     bc4:	70 93 95 04 	sts	0x0495, r23	; 0x800495 <Re+0x1>
     bc8:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <Re+0x2>
     bcc:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <Re+0x3>
			 Im += ImTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
     bd0:	fe 01       	movw	r30, r28
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	e8 56       	subi	r30, 0x68	; 104
     bd8:	fb 4f       	sbci	r31, 0xFB	; 251
     bda:	40 81       	ld	r20, Z
     bdc:	51 81       	ldd	r21, Z+1	; 0x01
     bde:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <active_write>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	22 23       	and	r18, r18
     be8:	11 f0       	breq	.+4      	; 0xbee <computeDFT+0xe4>
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	fc 01       	movw	r30, r24
     bf0:	00 24       	eor	r0, r0
     bf2:	f6 95       	lsr	r31
     bf4:	e7 95       	ror	r30
     bf6:	07 94       	ror	r0
     bf8:	f6 95       	lsr	r31
     bfa:	e7 95       	ror	r30
     bfc:	07 94       	ror	r0
     bfe:	fe 2f       	mov	r31, r30
     c00:	e0 2d       	mov	r30, r0
     c02:	e3 52       	subi	r30, 0x23	; 35
     c04:	fc 4f       	sbci	r31, 0xFC	; 252
     c06:	ec 0f       	add	r30, r28
     c08:	fd 1f       	adc	r31, r29
     c0a:	80 81       	ld	r24, Z
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9c 01       	movw	r18, r24
     c10:	22 0f       	add	r18, r18
     c12:	33 1f       	adc	r19, r19
     c14:	22 0f       	add	r18, r18
     c16:	33 1f       	adc	r19, r19
     c18:	82 0f       	add	r24, r18
     c1a:	93 1f       	adc	r25, r19
     c1c:	48 9f       	mul	r20, r24
     c1e:	90 01       	movw	r18, r0
     c20:	49 9f       	mul	r20, r25
     c22:	30 0d       	add	r19, r0
     c24:	58 9f       	mul	r21, r24
     c26:	30 0d       	add	r19, r0
     c28:	11 24       	eor	r1, r1
     c2a:	33 23       	and	r19, r19
     c2c:	14 f4       	brge	.+4      	; 0xc32 <computeDFT+0x128>
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	63 2f       	mov	r22, r19
     c34:	73 2f       	mov	r23, r19
     c36:	77 0f       	add	r23, r23
     c38:	77 0b       	sbc	r23, r23
     c3a:	07 2e       	mov	r0, r23
     c3c:	00 0c       	add	r0, r0
     c3e:	88 0b       	sbc	r24, r24
     c40:	99 0b       	sbc	r25, r25
     c42:	65 d5       	rcall	.+2762   	; 0x170e <__floatsisf>
     c44:	9b 01       	movw	r18, r22
     c46:	ac 01       	movw	r20, r24
     c48:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <Im>
     c4c:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <Im+0x1>
     c50:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <Im+0x2>
     c54:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <Im+0x3>
     c58:	28 d4       	rcall	.+2128   	; 0x14aa <__addsf3>
     c5a:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <Im>
     c5e:	70 93 91 04 	sts	0x0491, r23	; 0x800491 <Im+0x1>
     c62:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <Im+0x2>
     c66:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <Im+0x3>
//Compute DFT for latest sample
//Returns true if DFT was succesfully calculated, false otherwise
 char computeDFT(){
	 if(DFT_ready == 1){
		 
		 for(int i = 0; i<NUM_SAMPLES; i++){
     c6a:	21 96       	adiw	r28, 0x01	; 1
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <computeDFT+0x168>
     c6e:	c0 e0       	ldi	r28, 0x00	; 0
     c70:	d0 e0       	ldi	r29, 0x00	; 0
     c72:	c0 34       	cpi	r28, 0x40	; 64
     c74:	d1 05       	cpc	r29, r1
     c76:	0c f4       	brge	.+2      	; 0xc7a <computeDFT+0x170>
     c78:	5e cf       	rjmp	.-324    	; 0xb36 <computeDFT+0x2c>
			 Re += ReTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
			 Im += ImTrig[i]*(DFTBuffer[!active_write][i]*5)/BIT_DIV;
		 }
		 Im = -Im;
     c7a:	c0 90 90 04 	lds	r12, 0x0490	; 0x800490 <Im>
     c7e:	d0 90 91 04 	lds	r13, 0x0491	; 0x800491 <Im+0x1>
     c82:	e0 90 92 04 	lds	r14, 0x0492	; 0x800492 <Im+0x2>
     c86:	f0 90 93 04 	lds	r15, 0x0493	; 0x800493 <Im+0x3>
     c8a:	f7 fa       	bst	r15, 7
     c8c:	f0 94       	com	r15
     c8e:	f7 f8       	bld	r15, 7
     c90:	f0 94       	com	r15
     c92:	c0 92 90 04 	sts	0x0490, r12	; 0x800490 <Im>
     c96:	d0 92 91 04 	sts	0x0491, r13	; 0x800491 <Im+0x1>
     c9a:	e0 92 92 04 	sts	0x0492, r14	; 0x800492 <Im+0x2>
     c9e:	f0 92 93 04 	sts	0x0493, r15	; 0x800493 <Im+0x3>

		 modulus =(0.6*modulus)+(0.4*sqrtf((Im*Im) + (Re*Re))/16);
     ca2:	2a e9       	ldi	r18, 0x9A	; 154
     ca4:	39 e9       	ldi	r19, 0x99	; 153
     ca6:	49 e1       	ldi	r20, 0x19	; 25
     ca8:	5f e3       	ldi	r21, 0x3F	; 63
     caa:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     cae:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     cb2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     cb6:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     cba:	09 d6       	rcall	.+3090   	; 0x18ce <__mulsf3>
     cbc:	4b 01       	movw	r8, r22
     cbe:	5c 01       	movw	r10, r24
     cc0:	a7 01       	movw	r20, r14
     cc2:	96 01       	movw	r18, r12
     cc4:	c7 01       	movw	r24, r14
     cc6:	b6 01       	movw	r22, r12
     cc8:	02 d6       	rcall	.+3076   	; 0x18ce <__mulsf3>
     cca:	6b 01       	movw	r12, r22
     ccc:	7c 01       	movw	r14, r24
     cce:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     cd2:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     cd6:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     cda:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
     ce2:	f5 d5       	rcall	.+3050   	; 0x18ce <__mulsf3>
     ce4:	2b 01       	movw	r4, r22
     ce6:	3c 01       	movw	r6, r24
     ce8:	a3 01       	movw	r20, r6
     cea:	92 01       	movw	r18, r4
     cec:	c7 01       	movw	r24, r14
     cee:	b6 01       	movw	r22, r12
     cf0:	dc d3       	rcall	.+1976   	; 0x14aa <__addsf3>
     cf2:	54 d6       	rcall	.+3240   	; 0x199c <sqrt>
     cf4:	2d ec       	ldi	r18, 0xCD	; 205
     cf6:	3c ec       	ldi	r19, 0xCC	; 204
     cf8:	4c ec       	ldi	r20, 0xCC	; 204
     cfa:	5e e3       	ldi	r21, 0x3E	; 62
     cfc:	e8 d5       	rcall	.+3024   	; 0x18ce <__mulsf3>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e8       	ldi	r20, 0x80	; 128
     d04:	5d e3       	ldi	r21, 0x3D	; 61
     d06:	e3 d5       	rcall	.+3014   	; 0x18ce <__mulsf3>
     d08:	9b 01       	movw	r18, r22
     d0a:	ac 01       	movw	r20, r24
     d0c:	c5 01       	movw	r24, r10
     d0e:	b4 01       	movw	r22, r8
     d10:	cc d3       	rcall	.+1944   	; 0x14aa <__addsf3>
     d12:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <modulus>
     d16:	70 93 87 04 	sts	0x0487, r23	; 0x800487 <modulus+0x1>
     d1a:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <modulus+0x2>
     d1e:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <modulus+0x3>
		 debug_print_float(modulus,2,7);
     d22:	27 e0       	ldi	r18, 0x07	; 7
     d24:	42 e0       	ldi	r20, 0x02	; 2

		 modulus = (0.6*modulus)+(0.4*sqrtf((Im*Im) + (Re*Re))/16);
     d26:	bb de       	rcall	.-650    	; 0xa9e <debug_print_float>
     d28:	2a e9       	ldi	r18, 0x9A	; 154
     d2a:	39 e9       	ldi	r19, 0x99	; 153
     d2c:	49 e1       	ldi	r20, 0x19	; 25
     d2e:	5f e3       	ldi	r21, 0x3F	; 63
     d30:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     d34:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     d38:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     d3c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     d40:	c6 d5       	rcall	.+2956   	; 0x18ce <__mulsf3>
     d42:	2b 01       	movw	r4, r22
     d44:	3c 01       	movw	r6, r24
     d46:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <Im>
     d4a:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <Im+0x1>
     d4e:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <Im+0x2>
     d52:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <Im+0x3>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	b9 d5       	rcall	.+2930   	; 0x18ce <__mulsf3>
     d5c:	6b 01       	movw	r12, r22
     d5e:	7c 01       	movw	r14, r24
     d60:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     d64:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     d68:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     d6c:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     d70:	9b 01       	movw	r18, r22
     d72:	ac 01       	movw	r20, r24
     d74:	ac d5       	rcall	.+2904   	; 0x18ce <__mulsf3>
     d76:	4b 01       	movw	r8, r22
     d78:	5c 01       	movw	r10, r24
     d7a:	a5 01       	movw	r20, r10
     d7c:	94 01       	movw	r18, r8
     d7e:	c7 01       	movw	r24, r14
     d80:	b6 01       	movw	r22, r12
     d82:	93 d3       	rcall	.+1830   	; 0x14aa <__addsf3>
     d84:	0b d6       	rcall	.+3094   	; 0x199c <sqrt>
     d86:	2d ec       	ldi	r18, 0xCD	; 205
     d88:	3c ec       	ldi	r19, 0xCC	; 204
     d8a:	4c ec       	ldi	r20, 0xCC	; 204
     d8c:	5e e3       	ldi	r21, 0x3E	; 62
     d8e:	9f d5       	rcall	.+2878   	; 0x18ce <__mulsf3>
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5d e3       	ldi	r21, 0x3D	; 61
     d98:	9a d5       	rcall	.+2868   	; 0x18ce <__mulsf3>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	c3 01       	movw	r24, r6
     da0:	b2 01       	movw	r22, r4
     da2:	83 d3       	rcall	.+1798   	; 0x14aa <__addsf3>
     da4:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <modulus>
     da8:	70 93 87 04 	sts	0x0487, r23	; 0x800487 <modulus+0x1>
     dac:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <modulus+0x2>
     db0:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <modulus+0x3>
		 debug_print_float(modulus,2,7);
     db4:	27 e0       	ldi	r18, 0x07	; 7
     db6:	42 e0       	ldi	r20, 0x02	; 2
     db8:	72 de       	rcall	.-796    	; 0xa9e <debug_print_float>

		
		 if(Im == 0 && Re == 0){
     dba:	c0 90 90 04 	lds	r12, 0x0490	; 0x800490 <Im>
     dbe:	d0 90 91 04 	lds	r13, 0x0491	; 0x800491 <Im+0x1>
     dc2:	e0 90 92 04 	lds	r14, 0x0492	; 0x800492 <Im+0x2>
     dc6:	f0 90 93 04 	lds	r15, 0x0493	; 0x800493 <Im+0x3>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	c7 01       	movw	r24, r14
     dd2:	b6 01       	movw	r22, r12
     dd4:	30 d4       	rcall	.+2144   	; 0x1636 <__cmpsf2>
     dd6:	81 11       	cpse	r24, r1
     dd8:	17 c0       	rjmp	.+46     	; 0xe08 <computeDFT+0x2fe>
     dda:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <Re>
     dde:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <Re+0x1>
     de2:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <Re+0x2>
     de6:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <Re+0x3>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	a9 01       	movw	r20, r18
     df0:	22 d4       	rcall	.+2116   	; 0x1636 <__cmpsf2>
     df2:	81 11       	cpse	r24, r1
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <computeDFT+0x2fe>
			 angle = 0;
     df6:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <angle>
     dfa:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <angle+0x1>
     dfe:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <angle+0x2>
     e02:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <angle+0x3>
     e06:	2c c0       	rjmp	.+88     	; 0xe60 <computeDFT+0x356>
		 }
		 else{
		     angle = (0.6*angle)+((0.4*(180/M_PI)*atan2((double)Im, (double)Re)));
     e08:	2a e9       	ldi	r18, 0x9A	; 154
     e0a:	39 e9       	ldi	r19, 0x99	; 153
     e0c:	49 e1       	ldi	r20, 0x19	; 25
     e0e:	5f e3       	ldi	r21, 0x3F	; 63
     e10:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <angle>
     e14:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <angle+0x1>
     e18:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <angle+0x2>
     e1c:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <angle+0x3>
     e20:	56 d5       	rcall	.+2732   	; 0x18ce <__mulsf3>
     e22:	4b 01       	movw	r8, r22
     e24:	5c 01       	movw	r10, r24
     e26:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <Re>
     e2a:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <Re+0x1>
     e2e:	40 91 96 04 	lds	r20, 0x0496	; 0x800496 <Re+0x2>
     e32:	50 91 97 04 	lds	r21, 0x0497	; 0x800497 <Re+0x3>
     e36:	c7 01       	movw	r24, r14
     e38:	b6 01       	movw	r22, r12
     e3a:	aa d3       	rcall	.+1876   	; 0x1590 <atan2>
     e3c:	23 eb       	ldi	r18, 0xB3	; 179
     e3e:	38 e5       	ldi	r19, 0x58	; 88
     e40:	47 eb       	ldi	r20, 0xB7	; 183
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	44 d5       	rcall	.+2696   	; 0x18ce <__mulsf3>
     e46:	9b 01       	movw	r18, r22
     e48:	ac 01       	movw	r20, r24
     e4a:	c5 01       	movw	r24, r10
     e4c:	b4 01       	movw	r22, r8
     e4e:	2d d3       	rcall	.+1626   	; 0x14aa <__addsf3>
     e50:	60 93 8a 04 	sts	0x048A, r22	; 0x80048a <angle>
     e54:	70 93 8b 04 	sts	0x048B, r23	; 0x80048b <angle+0x1>
     e58:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <angle+0x2>
     e5c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <angle+0x3>
     e60:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <angleCnt>
		 }	
		 //Save to phase history  
		 angleThres[angleCnt] = angle;
     e64:	e2 2f       	mov	r30, r18
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <angle>
     e6c:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <angle+0x1>
     e70:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <angle+0x2>
     e74:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <angle+0x3>
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	ee 0f       	add	r30, r30
     e7e:	ff 1f       	adc	r31, r31
     e80:	e2 5a       	subi	r30, 0xA2	; 162
     e82:	fb 4f       	sbci	r31, 0xFB	; 251
     e84:	60 83       	st	Z, r22
     e86:	71 83       	std	Z+1, r23	; 0x01
     e88:	82 83       	std	Z+2, r24	; 0x02
     e8a:	93 83       	std	Z+3, r25	; 0x03
		 angleCnt ++; 
     e8c:	2f 5f       	subi	r18, 0xFF	; 255
     e8e:	20 93 5d 04 	sts	0x045D, r18	; 0x80045d <angleCnt>
		 if(angleCnt >= 10) angleCnt = 0; 
     e92:	2a 30       	cpi	r18, 0x0A	; 10
     e94:	10 f0       	brcs	.+4      	; 0xe9a <computeDFT+0x390>
     e96:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <angleCnt>
		 
		 debug_print_float(angle,3,7);
     e9a:	27 e0       	ldi	r18, 0x07	; 7
     e9c:	43 e0       	ldi	r20, 0x03	; 3
     e9e:	ff dd       	rcall	.-1026   	; 0xa9e <debug_print_float>
     ea0:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <Re>
		 Re = 0;
     ea4:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <Re+0x1>
     ea8:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <Re+0x2>
     eac:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <Re+0x3>
     eb0:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <Im>
		 Im = 0;
     eb4:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <Im+0x1>
     eb8:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <Im+0x2>
     ebc:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <Im+0x3>
     ec0:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <DFT_ready>
		 DFT_ready = 0;
     ec4:	81 2f       	mov	r24, r17
		 return 1; 
	 }
	 return 0;
 }
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	bf 90       	pop	r11
     ed6:	af 90       	pop	r10
     ed8:	9f 90       	pop	r9
     eda:	8f 90       	pop	r8
     edc:	7f 90       	pop	r7
     ede:	6f 90       	pop	r6
     ee0:	5f 90       	pop	r5
     ee2:	4f 90       	pop	r4
     ee4:	08 95       	ret

00000ee6 <calibratePhase>:
     ee6:	0f 93       	push	r16
}


//Calibrates phase detection by saving samples to memory. User specifies material in menu
//INPUT: material ID to sample
void calibratePhase(char materialID){	
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	08 2f       	mov	r16, r24
	char numAttempts = 0; 
	//Normal materials
	if(materialID < 4){
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	b8 f1       	brcs	.+110    	; 0xf62 <calibratePhase+0x7c>
     ef4:	c0 e0       	ldi	r28, 0x00	; 0
     ef6:	d0 e0       	ldi	r29, 0x00	; 0
     ef8:	10 e0       	ldi	r17, 0x00	; 0
     efa:	5a c0       	rjmp	.+180    	; 0xfb0 <calibratePhase+0xca>
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
			if(computeDFT()){	
     efc:	06 de       	rcall	.-1012   	; 0xb0a <computeDFT>
     efe:	88 23       	and	r24, r24
     f00:	99 f1       	breq	.+102    	; 0xf68 <calibratePhase+0x82>
				if(modulus>AMP_THRESHOLD){
     f02:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <modulus>
     f06:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <modulus+0x1>
     f0a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <modulus+0x2>
     f0e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <modulus+0x3>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	50 e4       	ldi	r21, 0x40	; 64
     f1a:	ce d4       	rcall	.+2460   	; 0x18b8 <__gesf2>
     f1c:	18 16       	cp	r1, r24
					//Check stability of phase
					if(checkPhaseStability()){
     f1e:	ec f4       	brge	.+58     	; 0xf5a <calibratePhase+0x74>
     f20:	50 dc       	rcall	.-1888   	; 0x7c2 <checkPhaseStability>
     f22:	88 23       	and	r24, r24
     f24:	d1 f0       	breq	.+52     	; 0xf5a <calibratePhase+0x74>
						materials[materialID][i] = angle;
     f26:	fe 01       	movw	r30, r28
     f28:	84 e1       	ldi	r24, 0x14	; 20
     f2a:	08 9f       	mul	r16, r24
     f2c:	e0 0d       	add	r30, r0
     f2e:	f1 1d       	adc	r31, r1
     f30:	11 24       	eor	r1, r1
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	e0 50       	subi	r30, 0x00	; 0
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <angle>
     f42:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <angle+0x1>
     f46:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <angle+0x2>
     f4a:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <angle+0x3>
     f4e:	80 83       	st	Z, r24
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	a2 83       	std	Z+2, r26	; 0x02
     f54:	b3 83       	std	Z+3, r27	; 0x03
						i++;
     f56:	21 96       	adiw	r28, 0x01	; 1
						continue;
     f58:	07 c0       	rjmp	.+14     	; 0xf68 <calibratePhase+0x82>
					}
				}
				//Error handling
				numAttempts ++;
     f5a:	1f 5f       	subi	r17, 0xFF	; 255
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
     f5c:	15 31       	cpi	r17, 0x15	; 21
     f5e:	20 f0       	brcs	.+8      	; 0xf68 <calibratePhase+0x82>
     f60:	2a c0       	rjmp	.+84     	; 0xfb6 <calibratePhase+0xd0>
     f62:	c0 e0       	ldi	r28, 0x00	; 0
     f64:	d0 e0       	ldi	r29, 0x00	; 0
     f66:	10 e0       	ldi	r17, 0x00	; 0
//INPUT: material ID to sample
void calibratePhase(char materialID){	
	char numAttempts = 0; 
	//Normal materials
	if(materialID < 4){
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
     f68:	c4 31       	cpi	r28, 0x14	; 20
     f6a:	d1 05       	cpc	r29, r1
     f6c:	3c f2       	brlt	.-114    	; 0xefc <calibratePhase+0x16>
		}
	}
	//Background noise (should be 0)
	else{
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
			if(computeDFT()){
     f6e:	23 c0       	rjmp	.+70     	; 0xfb6 <calibratePhase+0xd0>
     f70:	cc dd       	rcall	.-1128   	; 0xb0a <computeDFT>
     f72:	88 23       	and	r24, r24
				//Check stability of phase
				if(checkPhaseStability()){
     f74:	e9 f0       	breq	.+58     	; 0xfb0 <calibratePhase+0xca>
     f76:	25 dc       	rcall	.-1974   	; 0x7c2 <checkPhaseStability>
     f78:	88 23       	and	r24, r24
     f7a:	b9 f0       	breq	.+46     	; 0xfaa <calibratePhase+0xc4>
					materials[undefined][i] = angle;
     f7c:	fe 01       	movw	r30, r28
     f7e:	e0 5b       	subi	r30, 0xB0	; 176
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	e0 50       	subi	r30, 0x00	; 0
     f8c:	fe 4f       	sbci	r31, 0xFE	; 254
     f8e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <angle>
     f92:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <angle+0x1>
     f96:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <angle+0x2>
     f9a:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <angle+0x3>
     f9e:	80 83       	st	Z, r24
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	a2 83       	std	Z+2, r26	; 0x02
     fa4:	b3 83       	std	Z+3, r27	; 0x03
					i++;
     fa6:	21 96       	adiw	r28, 0x01	; 1
					continue;
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <calibratePhase+0xca>
				}
				//Error handling
				numAttempts ++;
     faa:	1f 5f       	subi	r17, 0xFF	; 255
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
     fac:	15 31       	cpi	r17, 0x15	; 21
     fae:	18 f4       	brcc	.+6      	; 0xfb6 <calibratePhase+0xd0>
			}
		}
	}
	//Background noise (should be 0)
	else{
		for(int i = 0; i<NUM_MATERIAL_SAMPLES;){
     fb0:	c4 31       	cpi	r28, 0x14	; 20
     fb2:	d1 05       	cpc	r29, r1
     fb4:	ec f2       	brlt	.-70     	; 0xf70 <calibratePhase+0x8a>
				numAttempts ++;
				if(numAttempts>NUM_MATERIAL_SAMPLES) return;
			}
		}
	}
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	08 95       	ret

00000fc0 <main>:
	};



 int main(void){
	setup();
     fc0:	f8 dc       	rcall	.-1552   	; 0x9b2 <setup>
	
//Main loop	
	while(1){
		switch(tilstand){
     fc2:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <tilstand>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	09 f4       	brne	.+2      	; 0xfcc <main+0xc>
     fca:	45 c0       	rjmp	.+138    	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
     fcc:	30 f4       	brcc	.+12     	; 0xfda <main+0x1a>
     fce:	88 23       	and	r24, r24
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <main+0x14>
     fd2:	84 c0       	rjmp	.+264    	; 0x10dc <__EEPROM_REGION_LENGTH__+0xdc>
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <main+0x28>
     fd8:	f4 cf       	rjmp	.-24     	; 0xfc2 <main+0x2>
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <main+0x20>
     fde:	42 c0       	rjmp	.+132    	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <main+0x26>
     fe4:	43 c0       	rjmp	.+134    	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
     fe6:	ed cf       	rjmp	.-38     	; 0xfc2 <main+0x2>
			
			case run:
				sendStrXY("Running  ",1,7);
     fe8:	47 e0       	ldi	r20, 0x07	; 7
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	82 ed       	ldi	r24, 0xD2	; 210
     ff2:	93 e0       	ldi	r25, 0x03	; 3
				
				computeDFT();
     ff4:	d8 d1       	rcall	.+944    	; 0x13a6 <sendStrXY>
				printMaterial(detectPhase());
     ff6:	89 dd       	rcall	.-1262   	; 0xb0a <computeDFT>
     ff8:	35 dc       	rcall	.-1942   	; 0x864 <detectPhase>
     ffa:	1c dd       	rcall	.-1480   	; 0xa34 <printMaterial>
     ffc:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <BTN3_flag>
				
				//Calibration button
				if(BTN3_flag == 1){
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 f4       	brne	.+36     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1004:	8d b3       	in	r24, 0x1d	; 29
					CLRBIT(EIMSK,INT3);
    1006:	87 7f       	andi	r24, 0xF7	; 247
    1008:	8d bb       	out	0x1d, r24	; 29
    100a:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    100c:	9c e9       	ldi	r25, 0x9C	; 156
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    1014:	00 00       	nop
					_delay_ms(DEBOUNCE);
					if(!CHKBIT(PIND,3)){
    1016:	4b 99       	sbic	0x09, 3	; 9
    1018:	02 c0       	rjmp	.+4      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
						nextState(select);
    101a:	83 e0       	ldi	r24, 0x03	; 3
    101c:	15 db       	rcall	.-2518   	; 0x648 <nextState>
    101e:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <BTN3_flag>
					}
 					BTN3_flag = 0;
    1022:	8d b3       	in	r24, 0x1d	; 29
					SETBIT(EIMSK,INT3);
    1024:	88 60       	ori	r24, 0x08	; 8
    1026:	8d bb       	out	0x1d, r24	; 29
    1028:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <BTN5_flag>
				}

				if(BTN5_flag == 1){
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	49 f6       	brne	.-110    	; 0xfc2 <main+0x2>
    1030:	8d b3       	in	r24, 0x1d	; 29
					CLRBIT(EIMSK,INT5);
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	8d bb       	out	0x1d, r24	; 29
    1036:	8f e3       	ldi	r24, 0x3F	; 63
    1038:	9c e9       	ldi	r25, 0x9C	; 156
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <__EEPROM_REGION_LENGTH__+0x40>
    1040:	00 00       	nop
					_delay_ms(DEBOUNCE);
					if(!CHKBIT(PINE,5)){
    1042:	65 99       	sbic	0x0c, 5	; 12
    1044:	02 c0       	rjmp	.+4      	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
						nextState(reset);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	ff da       	rcall	.-2562   	; 0x648 <nextState>
    104a:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <BTN5_flag>
					}
					BTN5_flag =0;
					SETBIT(EIMSK,INT5);
    104e:	8d b3       	in	r24, 0x1d	; 29
    1050:	80 62       	ori	r24, 0x20	; 32
				}
				break;	
			
			case calibrate:
				calibratePhase(materialSelctor);
    1052:	8d bb       	out	0x1d, r24	; 29
    1054:	b6 cf       	rjmp	.-148    	; 0xfc2 <main+0x2>
				defaultDisplay();
    1056:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
				nextState(run);
    105a:	45 df       	rcall	.-374    	; 0xee6 <calibratePhase>
    105c:	8c dc       	rcall	.-1768   	; 0x976 <defaultDisplay>
    105e:	81 e0       	ldi	r24, 0x01	; 1
				break; 
    1060:	f3 da       	rcall	.-2586   	; 0x648 <nextState>
			
			case select:
				calibrateDisplay();
    1062:	af cf       	rjmp	.-162    	; 0xfc2 <main+0x2>
    1064:	d7 dc       	rcall	.-1618   	; 0xa14 <calibrateDisplay>
				nextState(store);				
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	ef da       	rcall	.-2594   	; 0x648 <nextState>
    106a:	ab cf       	rjmp	.-170    	; 0xfc2 <main+0x2>
				break;
    106c:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <BTN4_flag>
			
			case store:
				//Select material
				if(BTN4_flag == 1){
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	e1 f4       	brne	.+56     	; 0x10ac <__EEPROM_REGION_LENGTH__+0xac>
    1074:	8d b3       	in	r24, 0x1d	; 29
					CLRBIT(EIMSK,INT4);
    1076:	8f 7e       	andi	r24, 0xEF	; 239
    1078:	8d bb       	out	0x1d, r24	; 29
    107a:	8f e3       	ldi	r24, 0x3F	; 63
    107c:	9c e9       	ldi	r25, 0x9C	; 156
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1084:	00 00       	nop
    1086:	64 99       	sbic	0x0c, 4	; 12
					_delay_ms(DEBOUNCE);
					if(!CHKBIT(PINE,4)){
    1088:	0c c0       	rjmp	.+24     	; 0x10a2 <__EEPROM_REGION_LENGTH__+0xa2>
						materialSelctor ++;
    108a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
    108e:	8f 5f       	subi	r24, 0xFF	; 255
    1090:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <materialSelctor>
						if(materialSelctor>=NUM_MATERIALS) materialSelctor = 0;
    1094:	85 30       	cpi	r24, 0x05	; 5
    1096:	10 f0       	brcs	.+4      	; 0x109c <__EEPROM_REGION_LENGTH__+0x9c>
    1098:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <materialSelctor>
						printMaterial(materialSelctor);
    109c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <materialSelctor>
    10a0:	c9 dc       	rcall	.-1646   	; 0xa34 <printMaterial>
    10a2:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <BTN4_flag>
					}
					BTN4_flag = 0;
    10a6:	8d b3       	in	r24, 0x1d	; 29
					SETBIT(EIMSK,INT4);
    10a8:	80 61       	ori	r24, 0x10	; 16
    10aa:	8d bb       	out	0x1d, r24	; 29
    10ac:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <BTN3_flag>
				}
				
				//Perform calibration when desired material has been selected
				if(BTN3_flag == 1){
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
    10b4:	86 cf       	rjmp	.-244    	; 0xfc2 <main+0x2>
					CLRBIT(EIMSK,INT3);
    10b6:	8d b3       	in	r24, 0x1d	; 29
    10b8:	87 7f       	andi	r24, 0xF7	; 247
    10ba:	8d bb       	out	0x1d, r24	; 29
    10bc:	8f e3       	ldi	r24, 0x3F	; 63
    10be:	9c e9       	ldi	r25, 0x9C	; 156
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <__EEPROM_REGION_LENGTH__+0xc0>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <__EEPROM_REGION_LENGTH__+0xc6>
    10c6:	00 00       	nop
					_delay_ms(DEBOUNCE);
					if(!CHKBIT(PINE,3)){
    10c8:	63 99       	sbic	0x0c, 3	; 12
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
						nextState(calibrate);
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	bc da       	rcall	.-2696   	; 0x648 <nextState>
    10d0:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <BTN3_flag>
					}
					BTN3_flag = 0;
    10d4:	8d b3       	in	r24, 0x1d	; 29
					SETBIT(EIMSK,INT3);
    10d6:	88 60       	ori	r24, 0x08	; 8
    10d8:	8d bb       	out	0x1d, r24	; 29
    10da:	73 cf       	rjmp	.-282    	; 0xfc2 <main+0x2>
    10dc:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <resetFunc>
				}
				break;
			
			case reset:
				resetFunc();
    10e0:	f0 91 9e 05 	lds	r31, 0x059E	; 0x80059e <resetFunc+0x1>
    10e4:	19 95       	eicall
    10e6:	6d cf       	rjmp	.-294    	; 0xfc2 <main+0x2>

000010e8 <__vector_21>:
				//nextState(run);
			
				break; 
    10e8:	1f 92       	push	r1
// ================================================
// Service Routines
// ================================================

//Service routine for Timer1 Compare B
ISR(TIMER0_COMPA_vect){
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	0b b6       	in	r0, 0x3b	; 59
    10f4:	0f 92       	push	r0
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
//	TOGGLEBIT(PORTB,5);
 	if(timercount != 1){
    110e:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <timercount>
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	21 f0       	breq	.+8      	; 0x111e <__vector_21+0x36>
 		timercount++;		
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <timercount>
    111c:	10 c0       	rjmp	.+32     	; 0x113e <__vector_21+0x56>
 	}
 	else{
 		timercount = 0;
    111e:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <timercount>
 		TOGGLEBIT(PORTB,6);	
    1122:	95 b1       	in	r25, 0x05	; 5
    1124:	80 e4       	ldi	r24, 0x40	; 64
    1126:	89 27       	eor	r24, r25
    1128:	85 b9       	out	0x05, r24	; 5
		//Start ADC sampling
		if(CHKBIT(PORTB,6) == 0 && ADC_start_flag == 0){
    112a:	2e 99       	sbic	0x05, 6	; 5
    112c:	08 c0       	rjmp	.+16     	; 0x113e <__vector_21+0x56>
    112e:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <ADC_start_flag>
    1132:	81 11       	cpse	r24, r1
    1134:	04 c0       	rjmp	.+8      	; 0x113e <__vector_21+0x56>
			ADC_start_flag = 1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <ADC_start_flag>
			init_adc(1);
    113c:	08 da       	rcall	.-3056   	; 0x54e <init_adc>
			}
		}
}
    113e:	ff 91       	pop	r31
    1140:	ef 91       	pop	r30
    1142:	bf 91       	pop	r27
    1144:	af 91       	pop	r26
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	7f 91       	pop	r23
    114c:	6f 91       	pop	r22
    114e:	5f 91       	pop	r21
    1150:	4f 91       	pop	r20
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	0f 90       	pop	r0
    1158:	0b be       	out	0x3b, r0	; 59
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <__vector_29>:



//Service routine for ADC sample ready
ISR(ADC_vect){
    1164:	1f 92       	push	r1
    1166:	0f 92       	push	r0
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	0f 92       	push	r0
    116c:	11 24       	eor	r1, r1
    116e:	0b b6       	in	r0, 0x3b	; 59
    1170:	0f 92       	push	r0
    1172:	2f 93       	push	r18
    1174:	3f 93       	push	r19
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
	if(buffercounter < NUM_SAMPLES){
    117e:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <buffercounter>
    1182:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <buffercounter+0x1>
    1186:	80 34       	cpi	r24, 0x40	; 64
    1188:	91 05       	cpc	r25, r1
    118a:	9c f4       	brge	.+38     	; 0x11b2 <__vector_29+0x4e>
		DFTBuffer[active_write][buffercounter] = ADCH;
    118c:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    1190:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1194:	30 e4       	ldi	r19, 0x40	; 64
    1196:	e3 9f       	mul	r30, r19
    1198:	f0 01       	movw	r30, r0
    119a:	11 24       	eor	r1, r1
    119c:	e3 52       	subi	r30, 0x23	; 35
    119e:	fc 4f       	sbci	r31, 0xFC	; 252
    11a0:	e8 0f       	add	r30, r24
    11a2:	f9 1f       	adc	r31, r25
    11a4:	20 83       	st	Z, r18
		buffercounter++;
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    11ac:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
    11b0:	39 c0       	rjmp	.+114    	; 0x1224 <__vector_29+0xc0>
	}
	else if(DFT_ready){
    11b2:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <DFT_ready>
    11b6:	88 23       	and	r24, r24
    11b8:	b1 f0       	breq	.+44     	; 0x11e6 <__vector_29+0x82>
		buffercounter = 0;
    11ba:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <buffercounter+0x1>
    11be:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <buffercounter>
		DFTBuffer[active_write][buffercounter] = ADCH; 
    11c2:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    11c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    11ca:	90 e4       	ldi	r25, 0x40	; 64
    11cc:	e9 9f       	mul	r30, r25
    11ce:	f0 01       	movw	r30, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	e3 52       	subi	r30, 0x23	; 35
    11d4:	fc 4f       	sbci	r31, 0xFC	; 252
    11d6:	80 83       	st	Z, r24
		buffercounter++;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    11e0:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
    11e4:	1f c0       	rjmp	.+62     	; 0x1224 <__vector_29+0xc0>
	}
	else{
		active_write = !active_write;
    11e6:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <active_write>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	91 11       	cpse	r25, r1
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <active_write>
		DFT_ready = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <DFT_ready>
		buffercounter = 0;
    11fa:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <buffercounter+0x1>
    11fe:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <buffercounter>
		DFTBuffer[active_write][buffercounter] = ADCH;	//Save remaining first sample 
    1202:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <active_write>
    1206:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    120a:	30 e4       	ldi	r19, 0x40	; 64
    120c:	e3 9f       	mul	r30, r19
    120e:	f0 01       	movw	r30, r0
    1210:	11 24       	eor	r1, r1
    1212:	e3 52       	subi	r30, 0x23	; 35
    1214:	fc 4f       	sbci	r31, 0xFC	; 252
    1216:	80 83       	st	Z, r24
		buffercounter++;  
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <buffercounter+0x1>
    1220:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <buffercounter>
	}
}
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0b be       	out	0x3b, r0	; 59
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <__vector_4>:


//Service routines for external interrupts (buttons)
ISR(INT3_vect){
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	8f 93       	push	r24
	if(init_flag == 1){
    124a:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	19 f4       	brne	.+6      	; 0x1258 <__vector_4+0x1a>
		init_flag = 0;
    1252:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    1256:	03 c0       	rjmp	.+6      	; 0x125e <__vector_4+0x20>
	}
	else{
	BTN3_flag = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <BTN3_flag>
	}
}
    125e:	8f 91       	pop	r24
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <__vector_5>:

ISR(INT4_vect){
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	0f 92       	push	r0
    1272:	11 24       	eor	r1, r1
    1274:	8f 93       	push	r24
	if(init_flag == 1){
    1276:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	19 f4       	brne	.+6      	; 0x1284 <__vector_5+0x1a>
		init_flag = 0;
    127e:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    1282:	03 c0       	rjmp	.+6      	; 0x128a <__vector_5+0x20>
	}
	else{
		BTN4_flag = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <BTN4_flag>
	}
}
    128a:	8f 91       	pop	r24
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <__vector_6>:

ISR(INT5_vect){
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	8f 93       	push	r24
	if(init_flag == 1){
    12a2:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	19 f4       	brne	.+6      	; 0x12b0 <__vector_6+0x1a>
		init_flag = 0;
    12aa:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <__vector_6+0x20>
	}
	else{
		BTN5_flag = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <BTN5_flag>
	}
    12b6:	8f 91       	pop	r24
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <ssd1306_command>:

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
    12c2:	cf 93       	push	r28
    12c4:	c8 2f       	mov	r28, r24
    12c6:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_i2c_address>
    12ca:	7c d9       	rcall	.-3336   	; 0x5c4 <I2C_Start>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	9e d9       	rcall	.-3268   	; 0x60c <I2C_Write>
    12d0:	8c 2f       	mov	r24, r28
    12d2:	9c d9       	rcall	.-3272   	; 0x60c <I2C_Write>
    12d4:	b1 d9       	rcall	.-3230   	; 0x638 <I2C_Stop>
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <InitializeDisplay>:
    12da:	8e ea       	ldi	r24, 0xAE	; 174
    12dc:	f2 df       	rcall	.-28     	; 0x12c2 <ssd1306_command>
    12de:	85 ed       	ldi	r24, 0xD5	; 213
    12e0:	f0 df       	rcall	.-32     	; 0x12c2 <ssd1306_command>
    12e2:	80 e8       	ldi	r24, 0x80	; 128
    12e4:	ee df       	rcall	.-36     	; 0x12c2 <ssd1306_command>
    12e6:	88 ea       	ldi	r24, 0xA8	; 168
    12e8:	ec df       	rcall	.-40     	; 0x12c2 <ssd1306_command>
    12ea:	8f e3       	ldi	r24, 0x3F	; 63
    12ec:	ea df       	rcall	.-44     	; 0x12c2 <ssd1306_command>
    12ee:	83 ed       	ldi	r24, 0xD3	; 211
    12f0:	e8 df       	rcall	.-48     	; 0x12c2 <ssd1306_command>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	e6 df       	rcall	.-52     	; 0x12c2 <ssd1306_command>
    12f6:	80 e4       	ldi	r24, 0x40	; 64
    12f8:	e4 df       	rcall	.-56     	; 0x12c2 <ssd1306_command>
    12fa:	8d e8       	ldi	r24, 0x8D	; 141
    12fc:	e2 df       	rcall	.-60     	; 0x12c2 <ssd1306_command>
    12fe:	84 e1       	ldi	r24, 0x14	; 20
    1300:	e0 df       	rcall	.-64     	; 0x12c2 <ssd1306_command>
    1302:	80 e2       	ldi	r24, 0x20	; 32
    1304:	de df       	rcall	.-68     	; 0x12c2 <ssd1306_command>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	dc df       	rcall	.-72     	; 0x12c2 <ssd1306_command>
    130a:	81 ea       	ldi	r24, 0xA1	; 161
    130c:	da df       	rcall	.-76     	; 0x12c2 <ssd1306_command>
    130e:	88 ec       	ldi	r24, 0xC8	; 200
    1310:	d8 df       	rcall	.-80     	; 0x12c2 <ssd1306_command>
    1312:	8a ed       	ldi	r24, 0xDA	; 218
    1314:	d6 df       	rcall	.-84     	; 0x12c2 <ssd1306_command>
    1316:	82 e1       	ldi	r24, 0x12	; 18
    1318:	d4 df       	rcall	.-88     	; 0x12c2 <ssd1306_command>
    131a:	81 e8       	ldi	r24, 0x81	; 129
    131c:	d2 df       	rcall	.-92     	; 0x12c2 <ssd1306_command>
    131e:	8f ec       	ldi	r24, 0xCF	; 207
    1320:	d0 df       	rcall	.-96     	; 0x12c2 <ssd1306_command>
    1322:	89 ed       	ldi	r24, 0xD9	; 217
    1324:	ce df       	rcall	.-100    	; 0x12c2 <ssd1306_command>
    1326:	81 ef       	ldi	r24, 0xF1	; 241
    1328:	cc df       	rcall	.-104    	; 0x12c2 <ssd1306_command>
    132a:	8b ed       	ldi	r24, 0xDB	; 219
    132c:	ca df       	rcall	.-108    	; 0x12c2 <ssd1306_command>
    132e:	80 e4       	ldi	r24, 0x40	; 64
    1330:	c8 df       	rcall	.-112    	; 0x12c2 <ssd1306_command>
    1332:	84 ea       	ldi	r24, 0xA4	; 164
    1334:	c6 df       	rcall	.-116    	; 0x12c2 <ssd1306_command>
    1336:	86 ea       	ldi	r24, 0xA6	; 166
    1338:	c4 df       	rcall	.-120    	; 0x12c2 <ssd1306_command>
    133a:	8f ea       	ldi	r24, 0xAF	; 175
    133c:	c2 cf       	rjmp	.-124    	; 0x12c2 <ssd1306_command>
    133e:	08 95       	ret

00001340 <SendChar>:
    1340:	cf 93       	push	r28
    1342:	c8 2f       	mov	r28, r24
    1344:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_i2c_address>
    1348:	3d d9       	rcall	.-3462   	; 0x5c4 <I2C_Start>
    134a:	80 e4       	ldi	r24, 0x40	; 64
    134c:	5f d9       	rcall	.-3394   	; 0x60c <I2C_Write>
    134e:	8c 2f       	mov	r24, r28
    1350:	5d d9       	rcall	.-3398   	; 0x60c <I2C_Write>
    1352:	72 d9       	rcall	.-3356   	; 0x638 <I2C_Stop>
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <setXY>:
    1358:	cf 93       	push	r28
    135a:	c6 2f       	mov	r28, r22
    135c:	80 55       	subi	r24, 0x50	; 80
    135e:	b1 df       	rcall	.-158    	; 0x12c2 <ssd1306_command>
    1360:	8c 2f       	mov	r24, r28
    1362:	88 0f       	add	r24, r24
    1364:	88 0f       	add	r24, r24
    1366:	88 0f       	add	r24, r24
    1368:	88 70       	andi	r24, 0x08	; 8
    136a:	ab df       	rcall	.-170    	; 0x12c2 <ssd1306_command>
    136c:	8c 2f       	mov	r24, r28
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	96 95       	lsr	r25
    1372:	87 95       	ror	r24
    1374:	8f 70       	andi	r24, 0x0F	; 15
    1376:	80 5f       	subi	r24, 0xF0	; 240
    1378:	a4 df       	rcall	.-184    	; 0x12c2 <ssd1306_command>
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <clear_display>:
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	d0 e0       	ldi	r29, 0x00	; 0
    1384:	0b c0       	rjmp	.+22     	; 0x139c <clear_display+0x1e>
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	8d 2f       	mov	r24, r29
    138a:	e6 df       	rcall	.-52     	; 0x1358 <setXY>
    138c:	c0 e0       	ldi	r28, 0x00	; 0
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <clear_display+0x18>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	d6 df       	rcall	.-84     	; 0x1340 <SendChar>
    1394:	cf 5f       	subi	r28, 0xFF	; 255
    1396:	cc 23       	and	r28, r28
    1398:	dc f7       	brge	.-10     	; 0x1390 <clear_display+0x12>
    139a:	df 5f       	subi	r29, 0xFF	; 255
    139c:	d8 30       	cpi	r29, 0x08	; 8
    139e:	98 f3       	brcs	.-26     	; 0x1386 <clear_display+0x8>
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <sendStrXY>:
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	ec 01       	movw	r28, r24
    13b0:	86 2f       	mov	r24, r22
    13b2:	06 2f       	mov	r16, r22
    13b4:	64 2f       	mov	r22, r20
    13b6:	d0 df       	rcall	.-96     	; 0x1358 <setXY>
    13b8:	1c c0       	rjmp	.+56     	; 0x13f2 <sendStrXY+0x4c>
    13ba:	8a 30       	cpi	r24, 0x0A	; 10
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <sendStrXY+0x22>
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 0f       	add	r24, r16
    13c4:	c9 df       	rcall	.-110    	; 0x1358 <setXY>
    13c6:	21 96       	adiw	r28, 0x01	; 1
    13c8:	10 e0       	ldi	r17, 0x00	; 0
    13ca:	10 c0       	rjmp	.+32     	; 0x13ec <sendStrXY+0x46>
    13cc:	e8 81       	ld	r30, Y
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	b0 97       	sbiw	r30, 0x20	; 32
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	e4 5f       	subi	r30, 0xF4	; 244
    13e0:	fd 4f       	sbci	r31, 0xFD	; 253
    13e2:	e1 0f       	add	r30, r17
    13e4:	f1 1d       	adc	r31, r1
    13e6:	84 91       	lpm	r24, Z
    13e8:	ab df       	rcall	.-170    	; 0x1340 <SendChar>
    13ea:	1f 5f       	subi	r17, 0xFF	; 255
    13ec:	18 30       	cpi	r17, 0x08	; 8
    13ee:	70 f3       	brcs	.-36     	; 0x13cc <sendStrXY+0x26>
    13f0:	21 96       	adiw	r28, 0x01	; 1
    13f2:	88 81       	ld	r24, Y
    13f4:	81 11       	cpse	r24, r1
    13f6:	e1 cf       	rjmp	.-62     	; 0x13ba <sendStrXY+0x14>
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	08 95       	ret

00001402 <print_fonts>:
void print_fonts(){
    1402:	df 92       	push	r13
    1404:	ef 92       	push	r14
    1406:	ff 92       	push	r15
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
	clear_display();
    1410:	b6 df       	rcall	.-148    	; 0x137e <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
    1412:	e1 2c       	mov	r14, r1
    1414:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
    1416:	68 94       	set
    1418:	dd 24       	eor	r13, r13
    141a:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
    141c:	27 c0       	rjmp	.+78     	; 0x146c <print_fonts+0x6a>
		setXY(k,0);
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	8e 2d       	mov	r24, r14
    1422:	9a df       	rcall	.-204    	; 0x1358 <setXY>

		for (int j=0;j<16;j++)
    1424:	00 e0       	ldi	r16, 0x00	; 0
    1426:	10 e0       	ldi	r17, 0x00	; 0
    1428:	19 c0       	rjmp	.+50     	; 0x145c <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
    142a:	f8 01       	movw	r30, r16
    142c:	ed 0d       	add	r30, r13
    142e:	f1 1d       	adc	r31, r1
    1430:	b0 97       	sbiw	r30, 0x20	; 32
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	e4 5f       	subi	r30, 0xF4	; 244
    1440:	fd 4f       	sbci	r31, 0xFD	; 253
    1442:	ec 0f       	add	r30, r28
    1444:	fd 1f       	adc	r31, r29
    1446:	84 91       	lpm	r24, Z
    1448:	7b df       	rcall	.-266    	; 0x1340 <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
    144a:	21 96       	adiw	r28, 0x01	; 1
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <print_fonts+0x50>
    144e:	c0 e0       	ldi	r28, 0x00	; 0
    1450:	d0 e0       	ldi	r29, 0x00	; 0
    1452:	c8 30       	cpi	r28, 0x08	; 8
    1454:	d1 05       	cpc	r29, r1
    1456:	4c f3       	brlt	.-46     	; 0x142a <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
    1458:	0f 5f       	subi	r16, 0xFF	; 255
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	00 31       	cpi	r16, 0x10	; 16
    145e:	11 05       	cpc	r17, r1
    1460:	b4 f3       	brlt	.-20     	; 0x144e <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
    1462:	80 e1       	ldi	r24, 0x10	; 16
    1464:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	e8 1a       	sub	r14, r24
    146a:	f8 0a       	sbc	r15, r24
    146c:	86 e0       	ldi	r24, 0x06	; 6
    146e:	e8 16       	cp	r14, r24
    1470:	f1 04       	cpc	r15, r1
    1472:	ac f2       	brlt	.-86     	; 0x141e <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	df 90       	pop	r13
    1482:	08 95       	ret

00001484 <init_timer0>:
	TIMSK1 |= (1<<OCIE1B);				//Interrupt when TCNT1 = OCR3B
}
	
//Initialize hardware timer 0
void init_timer0(){
	DDRB |= (1<<DDB7);					// Set OC0A as output
    1484:	84 b1       	in	r24, 0x04	; 4
    1486:	80 68       	ori	r24, 0x80	; 128
    1488:	84 b9       	out	0x04, r24	; 4
	TCCR0A |= (1<<COM0A0) | (1<<WGM01); //Toggle OC0A CTC-mode
    148a:	84 b5       	in	r24, 0x24	; 36
    148c:	82 64       	ori	r24, 0x42	; 66
    148e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);				//Prescaler 8
    1490:	85 b5       	in	r24, 0x25	; 37
    1492:	82 60       	ori	r24, 0x02	; 2
    1494:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;							//Count from 0
    1496:	16 bc       	out	0x26, r1	; 38
	OCR0A = 249;						//Compare value
    1498:	89 ef       	ldi	r24, 0xF9	; 249
    149a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);				//Interrupt when TCNT1 = OCR0A
    149c:	ee e6       	ldi	r30, 0x6E	; 110
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	82 60       	ori	r24, 0x02	; 2
    14a4:	80 83       	st	Z, r24
    14a6:	08 95       	ret

000014a8 <__subsf3>:
    14a8:	50 58       	subi	r21, 0x80	; 128

000014aa <__addsf3>:
    14aa:	bb 27       	eor	r27, r27
    14ac:	aa 27       	eor	r26, r26
    14ae:	0e d0       	rcall	.+28     	; 0x14cc <__addsf3x>
    14b0:	c9 c1       	rjmp	.+914    	; 0x1844 <__fp_round>
    14b2:	ba d1       	rcall	.+884    	; 0x1828 <__fp_pscA>
    14b4:	30 f0       	brcs	.+12     	; 0x14c2 <__addsf3+0x18>
    14b6:	bf d1       	rcall	.+894    	; 0x1836 <__fp_pscB>
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__addsf3+0x18>
    14ba:	31 f4       	brne	.+12     	; 0x14c8 <__addsf3+0x1e>
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	11 f4       	brne	.+4      	; 0x14c4 <__addsf3+0x1a>
    14c0:	1e f4       	brtc	.+6      	; 0x14c8 <__addsf3+0x1e>
    14c2:	8a c1       	rjmp	.+788    	; 0x17d8 <__fp_nan>
    14c4:	0e f4       	brtc	.+2      	; 0x14c8 <__addsf3+0x1e>
    14c6:	e0 95       	com	r30
    14c8:	e7 fb       	bst	r30, 7
    14ca:	80 c1       	rjmp	.+768    	; 0x17cc <__fp_inf>

000014cc <__addsf3x>:
    14cc:	e9 2f       	mov	r30, r25
    14ce:	cb d1       	rcall	.+918    	; 0x1866 <__fp_split3>
    14d0:	80 f3       	brcs	.-32     	; 0x14b2 <__addsf3+0x8>
    14d2:	ba 17       	cp	r27, r26
    14d4:	62 07       	cpc	r22, r18
    14d6:	73 07       	cpc	r23, r19
    14d8:	84 07       	cpc	r24, r20
    14da:	95 07       	cpc	r25, r21
    14dc:	18 f0       	brcs	.+6      	; 0x14e4 <__addsf3x+0x18>
    14de:	71 f4       	brne	.+28     	; 0x14fc <__addsf3x+0x30>
    14e0:	9e f5       	brtc	.+102    	; 0x1548 <__addsf3x+0x7c>
    14e2:	e3 c1       	rjmp	.+966    	; 0x18aa <__fp_zero>
    14e4:	0e f4       	brtc	.+2      	; 0x14e8 <__addsf3x+0x1c>
    14e6:	e0 95       	com	r30
    14e8:	0b 2e       	mov	r0, r27
    14ea:	ba 2f       	mov	r27, r26
    14ec:	a0 2d       	mov	r26, r0
    14ee:	0b 01       	movw	r0, r22
    14f0:	b9 01       	movw	r22, r18
    14f2:	90 01       	movw	r18, r0
    14f4:	0c 01       	movw	r0, r24
    14f6:	ca 01       	movw	r24, r20
    14f8:	a0 01       	movw	r20, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	ff 27       	eor	r31, r31
    14fe:	59 1b       	sub	r21, r25
    1500:	99 f0       	breq	.+38     	; 0x1528 <__addsf3x+0x5c>
    1502:	59 3f       	cpi	r21, 0xF9	; 249
    1504:	50 f4       	brcc	.+20     	; 0x151a <__addsf3x+0x4e>
    1506:	50 3e       	cpi	r21, 0xE0	; 224
    1508:	68 f1       	brcs	.+90     	; 0x1564 <__addsf3x+0x98>
    150a:	1a 16       	cp	r1, r26
    150c:	f0 40       	sbci	r31, 0x00	; 0
    150e:	a2 2f       	mov	r26, r18
    1510:	23 2f       	mov	r18, r19
    1512:	34 2f       	mov	r19, r20
    1514:	44 27       	eor	r20, r20
    1516:	58 5f       	subi	r21, 0xF8	; 248
    1518:	f3 cf       	rjmp	.-26     	; 0x1500 <__addsf3x+0x34>
    151a:	46 95       	lsr	r20
    151c:	37 95       	ror	r19
    151e:	27 95       	ror	r18
    1520:	a7 95       	ror	r26
    1522:	f0 40       	sbci	r31, 0x00	; 0
    1524:	53 95       	inc	r21
    1526:	c9 f7       	brne	.-14     	; 0x151a <__addsf3x+0x4e>
    1528:	7e f4       	brtc	.+30     	; 0x1548 <__addsf3x+0x7c>
    152a:	1f 16       	cp	r1, r31
    152c:	ba 0b       	sbc	r27, r26
    152e:	62 0b       	sbc	r22, r18
    1530:	73 0b       	sbc	r23, r19
    1532:	84 0b       	sbc	r24, r20
    1534:	ba f0       	brmi	.+46     	; 0x1564 <__addsf3x+0x98>
    1536:	91 50       	subi	r25, 0x01	; 1
    1538:	a1 f0       	breq	.+40     	; 0x1562 <__addsf3x+0x96>
    153a:	ff 0f       	add	r31, r31
    153c:	bb 1f       	adc	r27, r27
    153e:	66 1f       	adc	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	88 1f       	adc	r24, r24
    1544:	c2 f7       	brpl	.-16     	; 0x1536 <__addsf3x+0x6a>
    1546:	0e c0       	rjmp	.+28     	; 0x1564 <__addsf3x+0x98>
    1548:	ba 0f       	add	r27, r26
    154a:	62 1f       	adc	r22, r18
    154c:	73 1f       	adc	r23, r19
    154e:	84 1f       	adc	r24, r20
    1550:	48 f4       	brcc	.+18     	; 0x1564 <__addsf3x+0x98>
    1552:	87 95       	ror	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	b7 95       	ror	r27
    155a:	f7 95       	ror	r31
    155c:	9e 3f       	cpi	r25, 0xFE	; 254
    155e:	08 f0       	brcs	.+2      	; 0x1562 <__addsf3x+0x96>
    1560:	b3 cf       	rjmp	.-154    	; 0x14c8 <__addsf3+0x1e>
    1562:	93 95       	inc	r25
    1564:	88 0f       	add	r24, r24
    1566:	08 f0       	brcs	.+2      	; 0x156a <__addsf3x+0x9e>
    1568:	99 27       	eor	r25, r25
    156a:	ee 0f       	add	r30, r30
    156c:	97 95       	ror	r25
    156e:	87 95       	ror	r24
    1570:	08 95       	ret
    1572:	5a d1       	rcall	.+692    	; 0x1828 <__fp_pscA>
    1574:	58 f0       	brcs	.+22     	; 0x158c <__addsf3x+0xc0>
    1576:	80 e8       	ldi	r24, 0x80	; 128
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	09 f4       	brne	.+2      	; 0x157e <__addsf3x+0xb2>
    157c:	9e ef       	ldi	r25, 0xFE	; 254
    157e:	5b d1       	rcall	.+694    	; 0x1836 <__fp_pscB>
    1580:	28 f0       	brcs	.+10     	; 0x158c <__addsf3x+0xc0>
    1582:	40 e8       	ldi	r20, 0x80	; 128
    1584:	51 e0       	ldi	r21, 0x01	; 1
    1586:	59 f4       	brne	.+22     	; 0x159e <atan2+0xe>
    1588:	5e ef       	ldi	r21, 0xFE	; 254
    158a:	09 c0       	rjmp	.+18     	; 0x159e <atan2+0xe>
    158c:	25 c1       	rjmp	.+586    	; 0x17d8 <__fp_nan>
    158e:	8d c1       	rjmp	.+794    	; 0x18aa <__fp_zero>

00001590 <atan2>:
    1590:	e9 2f       	mov	r30, r25
    1592:	e0 78       	andi	r30, 0x80	; 128
    1594:	68 d1       	rcall	.+720    	; 0x1866 <__fp_split3>
    1596:	68 f3       	brcs	.-38     	; 0x1572 <__addsf3x+0xa6>
    1598:	09 2e       	mov	r0, r25
    159a:	05 2a       	or	r0, r21
    159c:	c1 f3       	breq	.-16     	; 0x158e <__addsf3x+0xc2>
    159e:	26 17       	cp	r18, r22
    15a0:	37 07       	cpc	r19, r23
    15a2:	48 07       	cpc	r20, r24
    15a4:	59 07       	cpc	r21, r25
    15a6:	38 f0       	brcs	.+14     	; 0x15b6 <atan2+0x26>
    15a8:	0e 2e       	mov	r0, r30
    15aa:	07 f8       	bld	r0, 7
    15ac:	e0 25       	eor	r30, r0
    15ae:	69 f0       	breq	.+26     	; 0x15ca <atan2+0x3a>
    15b0:	e0 25       	eor	r30, r0
    15b2:	e0 64       	ori	r30, 0x40	; 64
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <atan2+0x3a>
    15b6:	ef 63       	ori	r30, 0x3F	; 63
    15b8:	07 f8       	bld	r0, 7
    15ba:	00 94       	com	r0
    15bc:	07 fa       	bst	r0, 7
    15be:	db 01       	movw	r26, r22
    15c0:	b9 01       	movw	r22, r18
    15c2:	9d 01       	movw	r18, r26
    15c4:	dc 01       	movw	r26, r24
    15c6:	ca 01       	movw	r24, r20
    15c8:	ad 01       	movw	r20, r26
    15ca:	ef 93       	push	r30
    15cc:	45 d0       	rcall	.+138    	; 0x1658 <__divsf3_pse>
    15ce:	3a d1       	rcall	.+628    	; 0x1844 <__fp_round>
    15d0:	0a d0       	rcall	.+20     	; 0x15e6 <atan>
    15d2:	5f 91       	pop	r21
    15d4:	55 23       	and	r21, r21
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <atan2+0x54>
    15d8:	2b ed       	ldi	r18, 0xDB	; 219
    15da:	3f e0       	ldi	r19, 0x0F	; 15
    15dc:	49 e4       	ldi	r20, 0x49	; 73
    15de:	50 fd       	sbrc	r21, 0
    15e0:	49 ec       	ldi	r20, 0xC9	; 201
    15e2:	63 cf       	rjmp	.-314    	; 0x14aa <__addsf3>
    15e4:	08 95       	ret

000015e6 <atan>:
    15e6:	df 93       	push	r29
    15e8:	dd 27       	eor	r29, r29
    15ea:	b9 2f       	mov	r27, r25
    15ec:	bf 77       	andi	r27, 0x7F	; 127
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	16 16       	cp	r1, r22
    15f4:	17 06       	cpc	r1, r23
    15f6:	48 07       	cpc	r20, r24
    15f8:	5b 07       	cpc	r21, r27
    15fa:	10 f4       	brcc	.+4      	; 0x1600 <atan+0x1a>
    15fc:	d9 2f       	mov	r29, r25
    15fe:	60 d1       	rcall	.+704    	; 0x18c0 <inverse>
    1600:	9f 93       	push	r25
    1602:	8f 93       	push	r24
    1604:	7f 93       	push	r23
    1606:	6f 93       	push	r22
    1608:	07 d2       	rcall	.+1038   	; 0x1a18 <square>
    160a:	e4 ee       	ldi	r30, 0xE4	; 228
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	e7 d0       	rcall	.+462    	; 0x17de <__fp_powser>
    1610:	19 d1       	rcall	.+562    	; 0x1844 <__fp_round>
    1612:	2f 91       	pop	r18
    1614:	3f 91       	pop	r19
    1616:	4f 91       	pop	r20
    1618:	5f 91       	pop	r21
    161a:	65 d1       	rcall	.+714    	; 0x18e6 <__mulsf3x>
    161c:	dd 23       	and	r29, r29
    161e:	49 f0       	breq	.+18     	; 0x1632 <atan+0x4c>
    1620:	90 58       	subi	r25, 0x80	; 128
    1622:	a2 ea       	ldi	r26, 0xA2	; 162
    1624:	2a ed       	ldi	r18, 0xDA	; 218
    1626:	3f e0       	ldi	r19, 0x0F	; 15
    1628:	49 ec       	ldi	r20, 0xC9	; 201
    162a:	5f e3       	ldi	r21, 0x3F	; 63
    162c:	d0 78       	andi	r29, 0x80	; 128
    162e:	5d 27       	eor	r21, r29
    1630:	4d df       	rcall	.-358    	; 0x14cc <__addsf3x>
    1632:	df 91       	pop	r29
    1634:	07 c1       	rjmp	.+526    	; 0x1844 <__fp_round>

00001636 <__cmpsf2>:
    1636:	a6 d0       	rcall	.+332    	; 0x1784 <__fp_cmp>
    1638:	08 f4       	brcc	.+2      	; 0x163c <__cmpsf2+0x6>
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	08 95       	ret
    163e:	fb d0       	rcall	.+502    	; 0x1836 <__fp_pscB>
    1640:	40 f0       	brcs	.+16     	; 0x1652 <__cmpsf2+0x1c>
    1642:	f2 d0       	rcall	.+484    	; 0x1828 <__fp_pscA>
    1644:	30 f0       	brcs	.+12     	; 0x1652 <__cmpsf2+0x1c>
    1646:	21 f4       	brne	.+8      	; 0x1650 <__cmpsf2+0x1a>
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	19 f0       	breq	.+6      	; 0x1652 <__cmpsf2+0x1c>
    164c:	bf c0       	rjmp	.+382    	; 0x17cc <__fp_inf>
    164e:	51 11       	cpse	r21, r1
    1650:	2d c1       	rjmp	.+602    	; 0x18ac <__fp_szero>
    1652:	c2 c0       	rjmp	.+388    	; 0x17d8 <__fp_nan>

00001654 <__divsf3x>:
    1654:	08 d1       	rcall	.+528    	; 0x1866 <__fp_split3>
    1656:	98 f3       	brcs	.-26     	; 0x163e <__cmpsf2+0x8>

00001658 <__divsf3_pse>:
    1658:	99 23       	and	r25, r25
    165a:	c9 f3       	breq	.-14     	; 0x164e <__cmpsf2+0x18>
    165c:	55 23       	and	r21, r21
    165e:	b1 f3       	breq	.-20     	; 0x164c <__cmpsf2+0x16>
    1660:	95 1b       	sub	r25, r21
    1662:	55 0b       	sbc	r21, r21
    1664:	bb 27       	eor	r27, r27
    1666:	aa 27       	eor	r26, r26
    1668:	62 17       	cp	r22, r18
    166a:	73 07       	cpc	r23, r19
    166c:	84 07       	cpc	r24, r20
    166e:	38 f0       	brcs	.+14     	; 0x167e <__divsf3_pse+0x26>
    1670:	9f 5f       	subi	r25, 0xFF	; 255
    1672:	5f 4f       	sbci	r21, 0xFF	; 255
    1674:	22 0f       	add	r18, r18
    1676:	33 1f       	adc	r19, r19
    1678:	44 1f       	adc	r20, r20
    167a:	aa 1f       	adc	r26, r26
    167c:	a9 f3       	breq	.-22     	; 0x1668 <__divsf3_pse+0x10>
    167e:	33 d0       	rcall	.+102    	; 0x16e6 <__divsf3_pse+0x8e>
    1680:	0e 2e       	mov	r0, r30
    1682:	3a f0       	brmi	.+14     	; 0x1692 <__divsf3_pse+0x3a>
    1684:	e0 e8       	ldi	r30, 0x80	; 128
    1686:	30 d0       	rcall	.+96     	; 0x16e8 <__divsf3_pse+0x90>
    1688:	91 50       	subi	r25, 0x01	; 1
    168a:	50 40       	sbci	r21, 0x00	; 0
    168c:	e6 95       	lsr	r30
    168e:	00 1c       	adc	r0, r0
    1690:	ca f7       	brpl	.-14     	; 0x1684 <__divsf3_pse+0x2c>
    1692:	29 d0       	rcall	.+82     	; 0x16e6 <__divsf3_pse+0x8e>
    1694:	fe 2f       	mov	r31, r30
    1696:	27 d0       	rcall	.+78     	; 0x16e6 <__divsf3_pse+0x8e>
    1698:	66 0f       	add	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	88 1f       	adc	r24, r24
    169e:	bb 1f       	adc	r27, r27
    16a0:	26 17       	cp	r18, r22
    16a2:	37 07       	cpc	r19, r23
    16a4:	48 07       	cpc	r20, r24
    16a6:	ab 07       	cpc	r26, r27
    16a8:	b0 e8       	ldi	r27, 0x80	; 128
    16aa:	09 f0       	breq	.+2      	; 0x16ae <__divsf3_pse+0x56>
    16ac:	bb 0b       	sbc	r27, r27
    16ae:	80 2d       	mov	r24, r0
    16b0:	bf 01       	movw	r22, r30
    16b2:	ff 27       	eor	r31, r31
    16b4:	93 58       	subi	r25, 0x83	; 131
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	2a f0       	brmi	.+10     	; 0x16c4 <__divsf3_pse+0x6c>
    16ba:	9e 3f       	cpi	r25, 0xFE	; 254
    16bc:	51 05       	cpc	r21, r1
    16be:	68 f0       	brcs	.+26     	; 0x16da <__divsf3_pse+0x82>
    16c0:	85 c0       	rjmp	.+266    	; 0x17cc <__fp_inf>
    16c2:	f4 c0       	rjmp	.+488    	; 0x18ac <__fp_szero>
    16c4:	5f 3f       	cpi	r21, 0xFF	; 255
    16c6:	ec f3       	brlt	.-6      	; 0x16c2 <__divsf3_pse+0x6a>
    16c8:	98 3e       	cpi	r25, 0xE8	; 232
    16ca:	dc f3       	brlt	.-10     	; 0x16c2 <__divsf3_pse+0x6a>
    16cc:	86 95       	lsr	r24
    16ce:	77 95       	ror	r23
    16d0:	67 95       	ror	r22
    16d2:	b7 95       	ror	r27
    16d4:	f7 95       	ror	r31
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__divsf3_pse+0x74>
    16da:	88 0f       	add	r24, r24
    16dc:	91 1d       	adc	r25, r1
    16de:	96 95       	lsr	r25
    16e0:	87 95       	ror	r24
    16e2:	97 f9       	bld	r25, 7
    16e4:	08 95       	ret
    16e6:	e1 e0       	ldi	r30, 0x01	; 1
    16e8:	66 0f       	add	r22, r22
    16ea:	77 1f       	adc	r23, r23
    16ec:	88 1f       	adc	r24, r24
    16ee:	bb 1f       	adc	r27, r27
    16f0:	62 17       	cp	r22, r18
    16f2:	73 07       	cpc	r23, r19
    16f4:	84 07       	cpc	r24, r20
    16f6:	ba 07       	cpc	r27, r26
    16f8:	20 f0       	brcs	.+8      	; 0x1702 <__divsf3_pse+0xaa>
    16fa:	62 1b       	sub	r22, r18
    16fc:	73 0b       	sbc	r23, r19
    16fe:	84 0b       	sbc	r24, r20
    1700:	ba 0b       	sbc	r27, r26
    1702:	ee 1f       	adc	r30, r30
    1704:	88 f7       	brcc	.-30     	; 0x16e8 <__divsf3_pse+0x90>
    1706:	e0 95       	com	r30
    1708:	08 95       	ret

0000170a <__floatunsisf>:
    170a:	e8 94       	clt
    170c:	09 c0       	rjmp	.+18     	; 0x1720 <__floatsisf+0x12>

0000170e <__floatsisf>:
    170e:	97 fb       	bst	r25, 7
    1710:	3e f4       	brtc	.+14     	; 0x1720 <__floatsisf+0x12>
    1712:	90 95       	com	r25
    1714:	80 95       	com	r24
    1716:	70 95       	com	r23
    1718:	61 95       	neg	r22
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	8f 4f       	sbci	r24, 0xFF	; 255
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	99 23       	and	r25, r25
    1722:	a9 f0       	breq	.+42     	; 0x174e <__floatsisf+0x40>
    1724:	f9 2f       	mov	r31, r25
    1726:	96 e9       	ldi	r25, 0x96	; 150
    1728:	bb 27       	eor	r27, r27
    172a:	93 95       	inc	r25
    172c:	f6 95       	lsr	r31
    172e:	87 95       	ror	r24
    1730:	77 95       	ror	r23
    1732:	67 95       	ror	r22
    1734:	b7 95       	ror	r27
    1736:	f1 11       	cpse	r31, r1
    1738:	f8 cf       	rjmp	.-16     	; 0x172a <__floatsisf+0x1c>
    173a:	fa f4       	brpl	.+62     	; 0x177a <__floatsisf+0x6c>
    173c:	bb 0f       	add	r27, r27
    173e:	11 f4       	brne	.+4      	; 0x1744 <__floatsisf+0x36>
    1740:	60 ff       	sbrs	r22, 0
    1742:	1b c0       	rjmp	.+54     	; 0x177a <__floatsisf+0x6c>
    1744:	6f 5f       	subi	r22, 0xFF	; 255
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	8f 4f       	sbci	r24, 0xFF	; 255
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	16 c0       	rjmp	.+44     	; 0x177a <__floatsisf+0x6c>
    174e:	88 23       	and	r24, r24
    1750:	11 f0       	breq	.+4      	; 0x1756 <__floatsisf+0x48>
    1752:	96 e9       	ldi	r25, 0x96	; 150
    1754:	11 c0       	rjmp	.+34     	; 0x1778 <__floatsisf+0x6a>
    1756:	77 23       	and	r23, r23
    1758:	21 f0       	breq	.+8      	; 0x1762 <__floatsisf+0x54>
    175a:	9e e8       	ldi	r25, 0x8E	; 142
    175c:	87 2f       	mov	r24, r23
    175e:	76 2f       	mov	r23, r22
    1760:	05 c0       	rjmp	.+10     	; 0x176c <__floatsisf+0x5e>
    1762:	66 23       	and	r22, r22
    1764:	71 f0       	breq	.+28     	; 0x1782 <__floatsisf+0x74>
    1766:	96 e8       	ldi	r25, 0x86	; 134
    1768:	86 2f       	mov	r24, r22
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	2a f0       	brmi	.+10     	; 0x177a <__floatsisf+0x6c>
    1770:	9a 95       	dec	r25
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	da f7       	brpl	.-10     	; 0x1770 <__floatsisf+0x62>
    177a:	88 0f       	add	r24, r24
    177c:	96 95       	lsr	r25
    177e:	87 95       	ror	r24
    1780:	97 f9       	bld	r25, 7
    1782:	08 95       	ret

00001784 <__fp_cmp>:
    1784:	99 0f       	add	r25, r25
    1786:	00 08       	sbc	r0, r0
    1788:	55 0f       	add	r21, r21
    178a:	aa 0b       	sbc	r26, r26
    178c:	e0 e8       	ldi	r30, 0x80	; 128
    178e:	fe ef       	ldi	r31, 0xFE	; 254
    1790:	16 16       	cp	r1, r22
    1792:	17 06       	cpc	r1, r23
    1794:	e8 07       	cpc	r30, r24
    1796:	f9 07       	cpc	r31, r25
    1798:	c0 f0       	brcs	.+48     	; 0x17ca <__fp_cmp+0x46>
    179a:	12 16       	cp	r1, r18
    179c:	13 06       	cpc	r1, r19
    179e:	e4 07       	cpc	r30, r20
    17a0:	f5 07       	cpc	r31, r21
    17a2:	98 f0       	brcs	.+38     	; 0x17ca <__fp_cmp+0x46>
    17a4:	62 1b       	sub	r22, r18
    17a6:	73 0b       	sbc	r23, r19
    17a8:	84 0b       	sbc	r24, r20
    17aa:	95 0b       	sbc	r25, r21
    17ac:	39 f4       	brne	.+14     	; 0x17bc <__fp_cmp+0x38>
    17ae:	0a 26       	eor	r0, r26
    17b0:	61 f0       	breq	.+24     	; 0x17ca <__fp_cmp+0x46>
    17b2:	23 2b       	or	r18, r19
    17b4:	24 2b       	or	r18, r20
    17b6:	25 2b       	or	r18, r21
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <__fp_cmp+0x3e>
    17ba:	08 95       	ret
    17bc:	0a 26       	eor	r0, r26
    17be:	09 f4       	brne	.+2      	; 0x17c2 <__fp_cmp+0x3e>
    17c0:	a1 40       	sbci	r26, 0x01	; 1
    17c2:	a6 95       	lsr	r26
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	81 1d       	adc	r24, r1
    17c8:	81 1d       	adc	r24, r1
    17ca:	08 95       	ret

000017cc <__fp_inf>:
    17cc:	97 f9       	bld	r25, 7
    17ce:	9f 67       	ori	r25, 0x7F	; 127
    17d0:	80 e8       	ldi	r24, 0x80	; 128
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	08 95       	ret

000017d8 <__fp_nan>:
    17d8:	9f ef       	ldi	r25, 0xFF	; 255
    17da:	80 ec       	ldi	r24, 0xC0	; 192
    17dc:	08 95       	ret

000017de <__fp_powser>:
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	1f 93       	push	r17
    17e4:	0f 93       	push	r16
    17e6:	ff 92       	push	r15
    17e8:	ef 92       	push	r14
    17ea:	df 92       	push	r13
    17ec:	7b 01       	movw	r14, r22
    17ee:	8c 01       	movw	r16, r24
    17f0:	68 94       	set
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <__fp_powser+0x20>
    17f4:	da 2e       	mov	r13, r26
    17f6:	ef 01       	movw	r28, r30
    17f8:	76 d0       	rcall	.+236    	; 0x18e6 <__mulsf3x>
    17fa:	fe 01       	movw	r30, r28
    17fc:	e8 94       	clt
    17fe:	a5 91       	lpm	r26, Z+
    1800:	25 91       	lpm	r18, Z+
    1802:	35 91       	lpm	r19, Z+
    1804:	45 91       	lpm	r20, Z+
    1806:	55 91       	lpm	r21, Z+
    1808:	ae f3       	brts	.-22     	; 0x17f4 <__fp_powser+0x16>
    180a:	ef 01       	movw	r28, r30
    180c:	5f de       	rcall	.-834    	; 0x14cc <__addsf3x>
    180e:	fe 01       	movw	r30, r28
    1810:	97 01       	movw	r18, r14
    1812:	a8 01       	movw	r20, r16
    1814:	da 94       	dec	r13
    1816:	79 f7       	brne	.-34     	; 0x17f6 <__fp_powser+0x18>
    1818:	df 90       	pop	r13
    181a:	ef 90       	pop	r14
    181c:	ff 90       	pop	r15
    181e:	0f 91       	pop	r16
    1820:	1f 91       	pop	r17
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <__fp_pscA>:
    1828:	00 24       	eor	r0, r0
    182a:	0a 94       	dec	r0
    182c:	16 16       	cp	r1, r22
    182e:	17 06       	cpc	r1, r23
    1830:	18 06       	cpc	r1, r24
    1832:	09 06       	cpc	r0, r25
    1834:	08 95       	ret

00001836 <__fp_pscB>:
    1836:	00 24       	eor	r0, r0
    1838:	0a 94       	dec	r0
    183a:	12 16       	cp	r1, r18
    183c:	13 06       	cpc	r1, r19
    183e:	14 06       	cpc	r1, r20
    1840:	05 06       	cpc	r0, r21
    1842:	08 95       	ret

00001844 <__fp_round>:
    1844:	09 2e       	mov	r0, r25
    1846:	03 94       	inc	r0
    1848:	00 0c       	add	r0, r0
    184a:	11 f4       	brne	.+4      	; 0x1850 <__fp_round+0xc>
    184c:	88 23       	and	r24, r24
    184e:	52 f0       	brmi	.+20     	; 0x1864 <__fp_round+0x20>
    1850:	bb 0f       	add	r27, r27
    1852:	40 f4       	brcc	.+16     	; 0x1864 <__fp_round+0x20>
    1854:	bf 2b       	or	r27, r31
    1856:	11 f4       	brne	.+4      	; 0x185c <__fp_round+0x18>
    1858:	60 ff       	sbrs	r22, 0
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <__fp_round+0x20>
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	8f 4f       	sbci	r24, 0xFF	; 255
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	08 95       	ret

00001866 <__fp_split3>:
    1866:	57 fd       	sbrc	r21, 7
    1868:	90 58       	subi	r25, 0x80	; 128
    186a:	44 0f       	add	r20, r20
    186c:	55 1f       	adc	r21, r21
    186e:	59 f0       	breq	.+22     	; 0x1886 <__fp_splitA+0x10>
    1870:	5f 3f       	cpi	r21, 0xFF	; 255
    1872:	71 f0       	breq	.+28     	; 0x1890 <__fp_splitA+0x1a>
    1874:	47 95       	ror	r20

00001876 <__fp_splitA>:
    1876:	88 0f       	add	r24, r24
    1878:	97 fb       	bst	r25, 7
    187a:	99 1f       	adc	r25, r25
    187c:	61 f0       	breq	.+24     	; 0x1896 <__fp_splitA+0x20>
    187e:	9f 3f       	cpi	r25, 0xFF	; 255
    1880:	79 f0       	breq	.+30     	; 0x18a0 <__fp_splitA+0x2a>
    1882:	87 95       	ror	r24
    1884:	08 95       	ret
    1886:	12 16       	cp	r1, r18
    1888:	13 06       	cpc	r1, r19
    188a:	14 06       	cpc	r1, r20
    188c:	55 1f       	adc	r21, r21
    188e:	f2 cf       	rjmp	.-28     	; 0x1874 <__fp_split3+0xe>
    1890:	46 95       	lsr	r20
    1892:	f1 df       	rcall	.-30     	; 0x1876 <__fp_splitA>
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <__fp_splitA+0x30>
    1896:	16 16       	cp	r1, r22
    1898:	17 06       	cpc	r1, r23
    189a:	18 06       	cpc	r1, r24
    189c:	99 1f       	adc	r25, r25
    189e:	f1 cf       	rjmp	.-30     	; 0x1882 <__fp_splitA+0xc>
    18a0:	86 95       	lsr	r24
    18a2:	71 05       	cpc	r23, r1
    18a4:	61 05       	cpc	r22, r1
    18a6:	08 94       	sec
    18a8:	08 95       	ret

000018aa <__fp_zero>:
    18aa:	e8 94       	clt

000018ac <__fp_szero>:
    18ac:	bb 27       	eor	r27, r27
    18ae:	66 27       	eor	r22, r22
    18b0:	77 27       	eor	r23, r23
    18b2:	cb 01       	movw	r24, r22
    18b4:	97 f9       	bld	r25, 7
    18b6:	08 95       	ret

000018b8 <__gesf2>:
    18b8:	65 df       	rcall	.-310    	; 0x1784 <__fp_cmp>
    18ba:	08 f4       	brcc	.+2      	; 0x18be <__gesf2+0x6>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	08 95       	ret

000018c0 <inverse>:
    18c0:	9b 01       	movw	r18, r22
    18c2:	ac 01       	movw	r20, r24
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	80 e8       	ldi	r24, 0x80	; 128
    18ca:	9f e3       	ldi	r25, 0x3F	; 63
    18cc:	a8 c0       	rjmp	.+336    	; 0x1a1e <__divsf3>

000018ce <__mulsf3>:
    18ce:	0b d0       	rcall	.+22     	; 0x18e6 <__mulsf3x>
    18d0:	b9 cf       	rjmp	.-142    	; 0x1844 <__fp_round>
    18d2:	aa df       	rcall	.-172    	; 0x1828 <__fp_pscA>
    18d4:	28 f0       	brcs	.+10     	; 0x18e0 <__mulsf3+0x12>
    18d6:	af df       	rcall	.-162    	; 0x1836 <__fp_pscB>
    18d8:	18 f0       	brcs	.+6      	; 0x18e0 <__mulsf3+0x12>
    18da:	95 23       	and	r25, r21
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <__mulsf3+0x12>
    18de:	76 cf       	rjmp	.-276    	; 0x17cc <__fp_inf>
    18e0:	7b cf       	rjmp	.-266    	; 0x17d8 <__fp_nan>
    18e2:	11 24       	eor	r1, r1
    18e4:	e3 cf       	rjmp	.-58     	; 0x18ac <__fp_szero>

000018e6 <__mulsf3x>:
    18e6:	bf df       	rcall	.-130    	; 0x1866 <__fp_split3>
    18e8:	a0 f3       	brcs	.-24     	; 0x18d2 <__mulsf3+0x4>

000018ea <__mulsf3_pse>:
    18ea:	95 9f       	mul	r25, r21
    18ec:	d1 f3       	breq	.-12     	; 0x18e2 <__mulsf3+0x14>
    18ee:	95 0f       	add	r25, r21
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	55 1f       	adc	r21, r21
    18f4:	62 9f       	mul	r22, r18
    18f6:	f0 01       	movw	r30, r0
    18f8:	72 9f       	mul	r23, r18
    18fa:	bb 27       	eor	r27, r27
    18fc:	f0 0d       	add	r31, r0
    18fe:	b1 1d       	adc	r27, r1
    1900:	63 9f       	mul	r22, r19
    1902:	aa 27       	eor	r26, r26
    1904:	f0 0d       	add	r31, r0
    1906:	b1 1d       	adc	r27, r1
    1908:	aa 1f       	adc	r26, r26
    190a:	64 9f       	mul	r22, r20
    190c:	66 27       	eor	r22, r22
    190e:	b0 0d       	add	r27, r0
    1910:	a1 1d       	adc	r26, r1
    1912:	66 1f       	adc	r22, r22
    1914:	82 9f       	mul	r24, r18
    1916:	22 27       	eor	r18, r18
    1918:	b0 0d       	add	r27, r0
    191a:	a1 1d       	adc	r26, r1
    191c:	62 1f       	adc	r22, r18
    191e:	73 9f       	mul	r23, r19
    1920:	b0 0d       	add	r27, r0
    1922:	a1 1d       	adc	r26, r1
    1924:	62 1f       	adc	r22, r18
    1926:	83 9f       	mul	r24, r19
    1928:	a0 0d       	add	r26, r0
    192a:	61 1d       	adc	r22, r1
    192c:	22 1f       	adc	r18, r18
    192e:	74 9f       	mul	r23, r20
    1930:	33 27       	eor	r19, r19
    1932:	a0 0d       	add	r26, r0
    1934:	61 1d       	adc	r22, r1
    1936:	23 1f       	adc	r18, r19
    1938:	84 9f       	mul	r24, r20
    193a:	60 0d       	add	r22, r0
    193c:	21 1d       	adc	r18, r1
    193e:	82 2f       	mov	r24, r18
    1940:	76 2f       	mov	r23, r22
    1942:	6a 2f       	mov	r22, r26
    1944:	11 24       	eor	r1, r1
    1946:	9f 57       	subi	r25, 0x7F	; 127
    1948:	50 40       	sbci	r21, 0x00	; 0
    194a:	8a f0       	brmi	.+34     	; 0x196e <__mulsf3_pse+0x84>
    194c:	e1 f0       	breq	.+56     	; 0x1986 <__mulsf3_pse+0x9c>
    194e:	88 23       	and	r24, r24
    1950:	4a f0       	brmi	.+18     	; 0x1964 <__mulsf3_pse+0x7a>
    1952:	ee 0f       	add	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	bb 1f       	adc	r27, r27
    1958:	66 1f       	adc	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	91 50       	subi	r25, 0x01	; 1
    1960:	50 40       	sbci	r21, 0x00	; 0
    1962:	a9 f7       	brne	.-22     	; 0x194e <__mulsf3_pse+0x64>
    1964:	9e 3f       	cpi	r25, 0xFE	; 254
    1966:	51 05       	cpc	r21, r1
    1968:	70 f0       	brcs	.+28     	; 0x1986 <__mulsf3_pse+0x9c>
    196a:	30 cf       	rjmp	.-416    	; 0x17cc <__fp_inf>
    196c:	9f cf       	rjmp	.-194    	; 0x18ac <__fp_szero>
    196e:	5f 3f       	cpi	r21, 0xFF	; 255
    1970:	ec f3       	brlt	.-6      	; 0x196c <__mulsf3_pse+0x82>
    1972:	98 3e       	cpi	r25, 0xE8	; 232
    1974:	dc f3       	brlt	.-10     	; 0x196c <__mulsf3_pse+0x82>
    1976:	86 95       	lsr	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	b7 95       	ror	r27
    197e:	f7 95       	ror	r31
    1980:	e7 95       	ror	r30
    1982:	9f 5f       	subi	r25, 0xFF	; 255
    1984:	c1 f7       	brne	.-16     	; 0x1976 <__mulsf3_pse+0x8c>
    1986:	fe 2b       	or	r31, r30
    1988:	88 0f       	add	r24, r24
    198a:	91 1d       	adc	r25, r1
    198c:	96 95       	lsr	r25
    198e:	87 95       	ror	r24
    1990:	97 f9       	bld	r25, 7
    1992:	08 95       	ret
    1994:	11 f4       	brne	.+4      	; 0x199a <__mulsf3_pse+0xb0>
    1996:	0e f4       	brtc	.+2      	; 0x199a <__mulsf3_pse+0xb0>
    1998:	1f cf       	rjmp	.-450    	; 0x17d8 <__fp_nan>
    199a:	43 c0       	rjmp	.+134    	; 0x1a22 <__fp_mpack>

0000199c <sqrt>:
    199c:	6c df       	rcall	.-296    	; 0x1876 <__fp_splitA>
    199e:	d0 f3       	brcs	.-12     	; 0x1994 <__mulsf3_pse+0xaa>
    19a0:	99 23       	and	r25, r25
    19a2:	d9 f3       	breq	.-10     	; 0x199a <__mulsf3_pse+0xb0>
    19a4:	ce f3       	brts	.-14     	; 0x1998 <__mulsf3_pse+0xae>
    19a6:	9f 57       	subi	r25, 0x7F	; 127
    19a8:	55 0b       	sbc	r21, r21
    19aa:	87 ff       	sbrs	r24, 7
    19ac:	48 d0       	rcall	.+144    	; 0x1a3e <__fp_norm2>
    19ae:	00 24       	eor	r0, r0
    19b0:	a0 e6       	ldi	r26, 0x60	; 96
    19b2:	40 ea       	ldi	r20, 0xA0	; 160
    19b4:	90 01       	movw	r18, r0
    19b6:	80 58       	subi	r24, 0x80	; 128
    19b8:	56 95       	lsr	r21
    19ba:	97 95       	ror	r25
    19bc:	28 f4       	brcc	.+10     	; 0x19c8 <sqrt+0x2c>
    19be:	80 5c       	subi	r24, 0xC0	; 192
    19c0:	66 0f       	add	r22, r22
    19c2:	77 1f       	adc	r23, r23
    19c4:	88 1f       	adc	r24, r24
    19c6:	20 f0       	brcs	.+8      	; 0x19d0 <sqrt+0x34>
    19c8:	26 17       	cp	r18, r22
    19ca:	37 07       	cpc	r19, r23
    19cc:	48 07       	cpc	r20, r24
    19ce:	30 f4       	brcc	.+12     	; 0x19dc <sqrt+0x40>
    19d0:	62 1b       	sub	r22, r18
    19d2:	73 0b       	sbc	r23, r19
    19d4:	84 0b       	sbc	r24, r20
    19d6:	20 29       	or	r18, r0
    19d8:	31 29       	or	r19, r1
    19da:	4a 2b       	or	r20, r26
    19dc:	a6 95       	lsr	r26
    19de:	17 94       	ror	r1
    19e0:	07 94       	ror	r0
    19e2:	20 25       	eor	r18, r0
    19e4:	31 25       	eor	r19, r1
    19e6:	4a 27       	eor	r20, r26
    19e8:	58 f7       	brcc	.-42     	; 0x19c0 <sqrt+0x24>
    19ea:	66 0f       	add	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	20 f0       	brcs	.+8      	; 0x19fa <sqrt+0x5e>
    19f2:	26 17       	cp	r18, r22
    19f4:	37 07       	cpc	r19, r23
    19f6:	48 07       	cpc	r20, r24
    19f8:	30 f4       	brcc	.+12     	; 0x1a06 <sqrt+0x6a>
    19fa:	62 0b       	sbc	r22, r18
    19fc:	73 0b       	sbc	r23, r19
    19fe:	84 0b       	sbc	r24, r20
    1a00:	20 0d       	add	r18, r0
    1a02:	31 1d       	adc	r19, r1
    1a04:	41 1d       	adc	r20, r1
    1a06:	a0 95       	com	r26
    1a08:	81 f7       	brne	.-32     	; 0x19ea <sqrt+0x4e>
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	84 2f       	mov	r24, r20
    1a0e:	91 58       	subi	r25, 0x81	; 129
    1a10:	88 0f       	add	r24, r24
    1a12:	96 95       	lsr	r25
    1a14:	87 95       	ror	r24
    1a16:	08 95       	ret

00001a18 <square>:
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	58 cf       	rjmp	.-336    	; 0x18ce <__mulsf3>

00001a1e <__divsf3>:
    1a1e:	1a de       	rcall	.-972    	; 0x1654 <__divsf3x>
    1a20:	11 cf       	rjmp	.-478    	; 0x1844 <__fp_round>

00001a22 <__fp_mpack>:
    1a22:	9f 3f       	cpi	r25, 0xFF	; 255
    1a24:	31 f0       	breq	.+12     	; 0x1a32 <__fp_mpack_finite+0xc>

00001a26 <__fp_mpack_finite>:
    1a26:	91 50       	subi	r25, 0x01	; 1
    1a28:	20 f4       	brcc	.+8      	; 0x1a32 <__fp_mpack_finite+0xc>
    1a2a:	87 95       	ror	r24
    1a2c:	77 95       	ror	r23
    1a2e:	67 95       	ror	r22
    1a30:	b7 95       	ror	r27
    1a32:	88 0f       	add	r24, r24
    1a34:	91 1d       	adc	r25, r1
    1a36:	96 95       	lsr	r25
    1a38:	87 95       	ror	r24
    1a3a:	97 f9       	bld	r25, 7
    1a3c:	08 95       	ret

00001a3e <__fp_norm2>:
    1a3e:	91 50       	subi	r25, 0x01	; 1
    1a40:	50 40       	sbci	r21, 0x00	; 0
    1a42:	66 0f       	add	r22, r22
    1a44:	77 1f       	adc	r23, r23
    1a46:	88 1f       	adc	r24, r24
    1a48:	d2 f7       	brpl	.-12     	; 0x1a3e <__fp_norm2>
    1a4a:	08 95       	ret

00001a4c <dtostrf>:
    1a4c:	ef 92       	push	r14
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	e8 01       	movw	r28, r16
    1a58:	47 fd       	sbrc	r20, 7
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <dtostrf+0x14>
    1a5c:	34 e0       	ldi	r19, 0x04	; 4
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <dtostrf+0x16>
    1a60:	34 e1       	ldi	r19, 0x14	; 20
    1a62:	04 2e       	mov	r0, r20
    1a64:	00 0c       	add	r0, r0
    1a66:	55 0b       	sbc	r21, r21
    1a68:	57 ff       	sbrs	r21, 7
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <dtostrf+0x26>
    1a6c:	51 95       	neg	r21
    1a6e:	41 95       	neg	r20
    1a70:	51 09       	sbc	r21, r1
    1a72:	e3 2e       	mov	r14, r19
    1a74:	02 2f       	mov	r16, r18
    1a76:	24 2f       	mov	r18, r20
    1a78:	ae 01       	movw	r20, r28
    1a7a:	07 d0       	rcall	.+14     	; 0x1a8a <dtoa_prf>
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ef 90       	pop	r14
    1a88:	08 95       	ret

00001a8a <dtoa_prf>:
    1a8a:	8f 92       	push	r8
    1a8c:	9f 92       	push	r9
    1a8e:	af 92       	push	r10
    1a90:	bf 92       	push	r11
    1a92:	cf 92       	push	r12
    1a94:	df 92       	push	r13
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	29 97       	sbiw	r28, 0x09	; 9
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	6a 01       	movw	r12, r20
    1ab4:	12 2f       	mov	r17, r18
    1ab6:	b0 2e       	mov	r11, r16
    1ab8:	2b e3       	ldi	r18, 0x3B	; 59
    1aba:	20 17       	cp	r18, r16
    1abc:	20 f0       	brcs	.+8      	; 0x1ac6 <dtoa_prf+0x3c>
    1abe:	ff 24       	eor	r15, r15
    1ac0:	f3 94       	inc	r15
    1ac2:	f0 0e       	add	r15, r16
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <dtoa_prf+0x40>
    1ac6:	2c e3       	ldi	r18, 0x3C	; 60
    1ac8:	f2 2e       	mov	r15, r18
    1aca:	0f 2d       	mov	r16, r15
    1acc:	27 e0       	ldi	r18, 0x07	; 7
    1ace:	ae 01       	movw	r20, r28
    1ad0:	4f 5f       	subi	r20, 0xFF	; 255
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad4:	50 d1       	rcall	.+672    	; 0x1d76 <__ftoa_engine>
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	49 81       	ldd	r20, Y+1	; 0x01
    1ada:	84 2f       	mov	r24, r20
    1adc:	89 70       	andi	r24, 0x09	; 9
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	31 f0       	breq	.+12     	; 0x1aee <dtoa_prf+0x64>
    1ae2:	e1 fc       	sbrc	r14, 1
    1ae4:	06 c0       	rjmp	.+12     	; 0x1af2 <dtoa_prf+0x68>
    1ae6:	e0 fe       	sbrs	r14, 0
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <dtoa_prf+0x6c>
    1aea:	90 e2       	ldi	r25, 0x20	; 32
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <dtoa_prf+0x6e>
    1aee:	9d e2       	ldi	r25, 0x2D	; 45
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <dtoa_prf+0x6e>
    1af2:	9b e2       	ldi	r25, 0x2B	; 43
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <dtoa_prf+0x6e>
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	5e 2d       	mov	r21, r14
    1afa:	50 71       	andi	r21, 0x10	; 16
    1afc:	43 ff       	sbrs	r20, 3
    1afe:	3c c0       	rjmp	.+120    	; 0x1b78 <dtoa_prf+0xee>
    1b00:	91 11       	cpse	r25, r1
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <dtoa_prf+0x7e>
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <dtoa_prf+0x80>
    1b08:	84 e0       	ldi	r24, 0x04	; 4
    1b0a:	81 17       	cp	r24, r17
    1b0c:	18 f4       	brcc	.+6      	; 0x1b14 <dtoa_prf+0x8a>
    1b0e:	21 2f       	mov	r18, r17
    1b10:	28 1b       	sub	r18, r24
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <dtoa_prf+0x8c>
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	51 11       	cpse	r21, r1
    1b18:	0b c0       	rjmp	.+22     	; 0x1b30 <dtoa_prf+0xa6>
    1b1a:	f6 01       	movw	r30, r12
    1b1c:	82 2f       	mov	r24, r18
    1b1e:	30 e2       	ldi	r19, 0x20	; 32
    1b20:	88 23       	and	r24, r24
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <dtoa_prf+0xa0>
    1b24:	31 93       	st	Z+, r19
    1b26:	81 50       	subi	r24, 0x01	; 1
    1b28:	fb cf       	rjmp	.-10     	; 0x1b20 <dtoa_prf+0x96>
    1b2a:	c2 0e       	add	r12, r18
    1b2c:	d1 1c       	adc	r13, r1
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	99 23       	and	r25, r25
    1b32:	29 f0       	breq	.+10     	; 0x1b3e <dtoa_prf+0xb4>
    1b34:	d6 01       	movw	r26, r12
    1b36:	9c 93       	st	X, r25
    1b38:	f6 01       	movw	r30, r12
    1b3a:	31 96       	adiw	r30, 0x01	; 1
    1b3c:	6f 01       	movw	r12, r30
    1b3e:	c6 01       	movw	r24, r12
    1b40:	03 96       	adiw	r24, 0x03	; 3
    1b42:	e2 fe       	sbrs	r14, 2
    1b44:	0a c0       	rjmp	.+20     	; 0x1b5a <dtoa_prf+0xd0>
    1b46:	3e e4       	ldi	r19, 0x4E	; 78
    1b48:	d6 01       	movw	r26, r12
    1b4a:	3c 93       	st	X, r19
    1b4c:	41 e4       	ldi	r20, 0x41	; 65
    1b4e:	11 96       	adiw	r26, 0x01	; 1
    1b50:	4c 93       	st	X, r20
    1b52:	11 97       	sbiw	r26, 0x01	; 1
    1b54:	12 96       	adiw	r26, 0x02	; 2
    1b56:	3c 93       	st	X, r19
    1b58:	06 c0       	rjmp	.+12     	; 0x1b66 <dtoa_prf+0xdc>
    1b5a:	3e e6       	ldi	r19, 0x6E	; 110
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	30 83       	st	Z, r19
    1b60:	41 e6       	ldi	r20, 0x61	; 97
    1b62:	41 83       	std	Z+1, r20	; 0x01
    1b64:	32 83       	std	Z+2, r19	; 0x02
    1b66:	fc 01       	movw	r30, r24
    1b68:	32 2f       	mov	r19, r18
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	33 23       	and	r19, r19
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <dtoa_prf+0xe8>
    1b70:	42 c0       	rjmp	.+132    	; 0x1bf6 <dtoa_prf+0x16c>
    1b72:	41 93       	st	Z+, r20
    1b74:	31 50       	subi	r19, 0x01	; 1
    1b76:	fa cf       	rjmp	.-12     	; 0x1b6c <dtoa_prf+0xe2>
    1b78:	42 ff       	sbrs	r20, 2
    1b7a:	44 c0       	rjmp	.+136    	; 0x1c04 <dtoa_prf+0x17a>
    1b7c:	91 11       	cpse	r25, r1
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <dtoa_prf+0xfa>
    1b80:	83 e0       	ldi	r24, 0x03	; 3
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <dtoa_prf+0xfc>
    1b84:	84 e0       	ldi	r24, 0x04	; 4
    1b86:	81 17       	cp	r24, r17
    1b88:	18 f4       	brcc	.+6      	; 0x1b90 <dtoa_prf+0x106>
    1b8a:	21 2f       	mov	r18, r17
    1b8c:	28 1b       	sub	r18, r24
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <dtoa_prf+0x108>
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	51 11       	cpse	r21, r1
    1b94:	0b c0       	rjmp	.+22     	; 0x1bac <dtoa_prf+0x122>
    1b96:	f6 01       	movw	r30, r12
    1b98:	82 2f       	mov	r24, r18
    1b9a:	30 e2       	ldi	r19, 0x20	; 32
    1b9c:	88 23       	and	r24, r24
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <dtoa_prf+0x11c>
    1ba0:	31 93       	st	Z+, r19
    1ba2:	81 50       	subi	r24, 0x01	; 1
    1ba4:	fb cf       	rjmp	.-10     	; 0x1b9c <dtoa_prf+0x112>
    1ba6:	c2 0e       	add	r12, r18
    1ba8:	d1 1c       	adc	r13, r1
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	99 23       	and	r25, r25
    1bae:	29 f0       	breq	.+10     	; 0x1bba <dtoa_prf+0x130>
    1bb0:	d6 01       	movw	r26, r12
    1bb2:	9c 93       	st	X, r25
    1bb4:	f6 01       	movw	r30, r12
    1bb6:	31 96       	adiw	r30, 0x01	; 1
    1bb8:	6f 01       	movw	r12, r30
    1bba:	c6 01       	movw	r24, r12
    1bbc:	03 96       	adiw	r24, 0x03	; 3
    1bbe:	e2 fe       	sbrs	r14, 2
    1bc0:	0b c0       	rjmp	.+22     	; 0x1bd8 <dtoa_prf+0x14e>
    1bc2:	39 e4       	ldi	r19, 0x49	; 73
    1bc4:	d6 01       	movw	r26, r12
    1bc6:	3c 93       	st	X, r19
    1bc8:	3e e4       	ldi	r19, 0x4E	; 78
    1bca:	11 96       	adiw	r26, 0x01	; 1
    1bcc:	3c 93       	st	X, r19
    1bce:	11 97       	sbiw	r26, 0x01	; 1
    1bd0:	36 e4       	ldi	r19, 0x46	; 70
    1bd2:	12 96       	adiw	r26, 0x02	; 2
    1bd4:	3c 93       	st	X, r19
    1bd6:	07 c0       	rjmp	.+14     	; 0x1be6 <dtoa_prf+0x15c>
    1bd8:	39 e6       	ldi	r19, 0x69	; 105
    1bda:	f6 01       	movw	r30, r12
    1bdc:	30 83       	st	Z, r19
    1bde:	3e e6       	ldi	r19, 0x6E	; 110
    1be0:	31 83       	std	Z+1, r19	; 0x01
    1be2:	36 e6       	ldi	r19, 0x66	; 102
    1be4:	32 83       	std	Z+2, r19	; 0x02
    1be6:	fc 01       	movw	r30, r24
    1be8:	32 2f       	mov	r19, r18
    1bea:	40 e2       	ldi	r20, 0x20	; 32
    1bec:	33 23       	and	r19, r19
    1bee:	19 f0       	breq	.+6      	; 0x1bf6 <dtoa_prf+0x16c>
    1bf0:	41 93       	st	Z+, r20
    1bf2:	31 50       	subi	r19, 0x01	; 1
    1bf4:	fb cf       	rjmp	.-10     	; 0x1bec <dtoa_prf+0x162>
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	e2 0f       	add	r30, r18
    1bfa:	f1 1d       	adc	r31, r1
    1bfc:	10 82       	st	Z, r1
    1bfe:	8e ef       	ldi	r24, 0xFE	; 254
    1c00:	9f ef       	ldi	r25, 0xFF	; 255
    1c02:	a6 c0       	rjmp	.+332    	; 0x1d50 <dtoa_prf+0x2c6>
    1c04:	21 e0       	ldi	r18, 0x01	; 1
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	91 11       	cpse	r25, r1
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <dtoa_prf+0x186>
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	16 16       	cp	r1, r22
    1c12:	17 06       	cpc	r1, r23
    1c14:	1c f4       	brge	.+6      	; 0x1c1c <dtoa_prf+0x192>
    1c16:	fb 01       	movw	r30, r22
    1c18:	31 96       	adiw	r30, 0x01	; 1
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <dtoa_prf+0x196>
    1c1c:	e1 e0       	ldi	r30, 0x01	; 1
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	2e 0f       	add	r18, r30
    1c22:	3f 1f       	adc	r19, r31
    1c24:	bb 20       	and	r11, r11
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <dtoa_prf+0x1a6>
    1c28:	eb 2d       	mov	r30, r11
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	31 96       	adiw	r30, 0x01	; 1
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <dtoa_prf+0x1aa>
    1c30:	e0 e0       	ldi	r30, 0x00	; 0
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	2e 0f       	add	r18, r30
    1c36:	3f 1f       	adc	r19, r31
    1c38:	e1 2f       	mov	r30, r17
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	2e 17       	cp	r18, r30
    1c3e:	3f 07       	cpc	r19, r31
    1c40:	1c f4       	brge	.+6      	; 0x1c48 <dtoa_prf+0x1be>
    1c42:	12 1b       	sub	r17, r18
    1c44:	21 2f       	mov	r18, r17
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <dtoa_prf+0x1c0>
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	8e 2d       	mov	r24, r14
    1c4c:	88 71       	andi	r24, 0x18	; 24
    1c4e:	59 f4       	brne	.+22     	; 0x1c66 <dtoa_prf+0x1dc>
    1c50:	f6 01       	movw	r30, r12
    1c52:	82 2f       	mov	r24, r18
    1c54:	30 e2       	ldi	r19, 0x20	; 32
    1c56:	88 23       	and	r24, r24
    1c58:	19 f0       	breq	.+6      	; 0x1c60 <dtoa_prf+0x1d6>
    1c5a:	31 93       	st	Z+, r19
    1c5c:	81 50       	subi	r24, 0x01	; 1
    1c5e:	fb cf       	rjmp	.-10     	; 0x1c56 <dtoa_prf+0x1cc>
    1c60:	c2 0e       	add	r12, r18
    1c62:	d1 1c       	adc	r13, r1
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	99 23       	and	r25, r25
    1c68:	29 f0       	breq	.+10     	; 0x1c74 <dtoa_prf+0x1ea>
    1c6a:	d6 01       	movw	r26, r12
    1c6c:	9c 93       	st	X, r25
    1c6e:	f6 01       	movw	r30, r12
    1c70:	31 96       	adiw	r30, 0x01	; 1
    1c72:	6f 01       	movw	r12, r30
    1c74:	51 11       	cpse	r21, r1
    1c76:	0b c0       	rjmp	.+22     	; 0x1c8e <dtoa_prf+0x204>
    1c78:	f6 01       	movw	r30, r12
    1c7a:	82 2f       	mov	r24, r18
    1c7c:	90 e3       	ldi	r25, 0x30	; 48
    1c7e:	88 23       	and	r24, r24
    1c80:	19 f0       	breq	.+6      	; 0x1c88 <dtoa_prf+0x1fe>
    1c82:	91 93       	st	Z+, r25
    1c84:	81 50       	subi	r24, 0x01	; 1
    1c86:	fb cf       	rjmp	.-10     	; 0x1c7e <dtoa_prf+0x1f4>
    1c88:	c2 0e       	add	r12, r18
    1c8a:	d1 1c       	adc	r13, r1
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	0f 2d       	mov	r16, r15
    1c90:	06 0f       	add	r16, r22
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	34 2f       	mov	r19, r20
    1c96:	30 71       	andi	r19, 0x10	; 16
    1c98:	44 ff       	sbrs	r20, 4
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <dtoa_prf+0x218>
    1c9c:	91 33       	cpi	r25, 0x31	; 49
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <dtoa_prf+0x218>
    1ca0:	01 50       	subi	r16, 0x01	; 1
    1ca2:	10 16       	cp	r1, r16
    1ca4:	24 f4       	brge	.+8      	; 0x1cae <dtoa_prf+0x224>
    1ca6:	09 30       	cpi	r16, 0x09	; 9
    1ca8:	18 f0       	brcs	.+6      	; 0x1cb0 <dtoa_prf+0x226>
    1caa:	08 e0       	ldi	r16, 0x08	; 8
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <dtoa_prf+0x226>
    1cae:	01 e0       	ldi	r16, 0x01	; 1
    1cb0:	ab 01       	movw	r20, r22
    1cb2:	77 ff       	sbrs	r23, 7
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <dtoa_prf+0x230>
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	fb 01       	movw	r30, r22
    1cbc:	e4 1b       	sub	r30, r20
    1cbe:	f5 0b       	sbc	r31, r21
    1cc0:	a1 e0       	ldi	r26, 0x01	; 1
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	ac 0f       	add	r26, r28
    1cc6:	bd 1f       	adc	r27, r29
    1cc8:	ea 0f       	add	r30, r26
    1cca:	fb 1f       	adc	r31, r27
    1ccc:	8e e2       	ldi	r24, 0x2E	; 46
    1cce:	a8 2e       	mov	r10, r24
    1cd0:	4b 01       	movw	r8, r22
    1cd2:	80 1a       	sub	r8, r16
    1cd4:	91 08       	sbc	r9, r1
    1cd6:	0b 2d       	mov	r16, r11
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
    1cda:	11 95       	neg	r17
    1cdc:	01 95       	neg	r16
    1cde:	11 09       	sbc	r17, r1
    1ce0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ce2:	bf ef       	ldi	r27, 0xFF	; 255
    1ce4:	5b 07       	cpc	r21, r27
    1ce6:	21 f4       	brne	.+8      	; 0x1cf0 <dtoa_prf+0x266>
    1ce8:	d6 01       	movw	r26, r12
    1cea:	ac 92       	st	X, r10
    1cec:	11 96       	adiw	r26, 0x01	; 1
    1cee:	6d 01       	movw	r12, r26
    1cf0:	64 17       	cp	r22, r20
    1cf2:	75 07       	cpc	r23, r21
    1cf4:	2c f0       	brlt	.+10     	; 0x1d00 <dtoa_prf+0x276>
    1cf6:	84 16       	cp	r8, r20
    1cf8:	95 06       	cpc	r9, r21
    1cfa:	14 f4       	brge	.+4      	; 0x1d00 <dtoa_prf+0x276>
    1cfc:	81 81       	ldd	r24, Z+1	; 0x01
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <dtoa_prf+0x278>
    1d00:	80 e3       	ldi	r24, 0x30	; 48
    1d02:	41 50       	subi	r20, 0x01	; 1
    1d04:	51 09       	sbc	r21, r1
    1d06:	31 96       	adiw	r30, 0x01	; 1
    1d08:	d6 01       	movw	r26, r12
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	7d 01       	movw	r14, r26
    1d0e:	40 17       	cp	r20, r16
    1d10:	51 07       	cpc	r21, r17
    1d12:	24 f0       	brlt	.+8      	; 0x1d1c <dtoa_prf+0x292>
    1d14:	d6 01       	movw	r26, r12
    1d16:	8c 93       	st	X, r24
    1d18:	67 01       	movw	r12, r14
    1d1a:	e2 cf       	rjmp	.-60     	; 0x1ce0 <dtoa_prf+0x256>
    1d1c:	64 17       	cp	r22, r20
    1d1e:	75 07       	cpc	r23, r21
    1d20:	39 f4       	brne	.+14     	; 0x1d30 <dtoa_prf+0x2a6>
    1d22:	96 33       	cpi	r25, 0x36	; 54
    1d24:	20 f4       	brcc	.+8      	; 0x1d2e <dtoa_prf+0x2a4>
    1d26:	95 33       	cpi	r25, 0x35	; 53
    1d28:	19 f4       	brne	.+6      	; 0x1d30 <dtoa_prf+0x2a6>
    1d2a:	31 11       	cpse	r19, r1
    1d2c:	01 c0       	rjmp	.+2      	; 0x1d30 <dtoa_prf+0x2a6>
    1d2e:	81 e3       	ldi	r24, 0x31	; 49
    1d30:	f6 01       	movw	r30, r12
    1d32:	80 83       	st	Z, r24
    1d34:	f7 01       	movw	r30, r14
    1d36:	82 2f       	mov	r24, r18
    1d38:	90 e2       	ldi	r25, 0x20	; 32
    1d3a:	88 23       	and	r24, r24
    1d3c:	19 f0       	breq	.+6      	; 0x1d44 <dtoa_prf+0x2ba>
    1d3e:	91 93       	st	Z+, r25
    1d40:	81 50       	subi	r24, 0x01	; 1
    1d42:	fb cf       	rjmp	.-10     	; 0x1d3a <dtoa_prf+0x2b0>
    1d44:	f7 01       	movw	r30, r14
    1d46:	e2 0f       	add	r30, r18
    1d48:	f1 1d       	adc	r31, r1
    1d4a:	10 82       	st	Z, r1
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	29 96       	adiw	r28, 0x09	; 9
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	bf 90       	pop	r11
    1d6e:	af 90       	pop	r10
    1d70:	9f 90       	pop	r9
    1d72:	8f 90       	pop	r8
    1d74:	08 95       	ret

00001d76 <__ftoa_engine>:
    1d76:	28 30       	cpi	r18, 0x08	; 8
    1d78:	08 f0       	brcs	.+2      	; 0x1d7c <__ftoa_engine+0x6>
    1d7a:	27 e0       	ldi	r18, 0x07	; 7
    1d7c:	33 27       	eor	r19, r19
    1d7e:	da 01       	movw	r26, r20
    1d80:	99 0f       	add	r25, r25
    1d82:	31 1d       	adc	r19, r1
    1d84:	87 fd       	sbrc	r24, 7
    1d86:	91 60       	ori	r25, 0x01	; 1
    1d88:	00 96       	adiw	r24, 0x00	; 0
    1d8a:	61 05       	cpc	r22, r1
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	39 f4       	brne	.+14     	; 0x1d9e <__ftoa_engine+0x28>
    1d90:	32 60       	ori	r19, 0x02	; 2
    1d92:	2e 5f       	subi	r18, 0xFE	; 254
    1d94:	3d 93       	st	X+, r19
    1d96:	30 e3       	ldi	r19, 0x30	; 48
    1d98:	2a 95       	dec	r18
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <__ftoa_engine+0x1e>
    1d9c:	08 95       	ret
    1d9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1da0:	30 f0       	brcs	.+12     	; 0x1dae <__ftoa_engine+0x38>
    1da2:	80 38       	cpi	r24, 0x80	; 128
    1da4:	71 05       	cpc	r23, r1
    1da6:	61 05       	cpc	r22, r1
    1da8:	09 f0       	breq	.+2      	; 0x1dac <__ftoa_engine+0x36>
    1daa:	3c 5f       	subi	r19, 0xFC	; 252
    1dac:	3c 5f       	subi	r19, 0xFC	; 252
    1dae:	3d 93       	st	X+, r19
    1db0:	91 30       	cpi	r25, 0x01	; 1
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <__ftoa_engine+0x40>
    1db4:	80 68       	ori	r24, 0x80	; 128
    1db6:	91 1d       	adc	r25, r1
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	1f 93       	push	r17
    1dbe:	0f 93       	push	r16
    1dc0:	ff 92       	push	r15
    1dc2:	ef 92       	push	r14
    1dc4:	19 2f       	mov	r17, r25
    1dc6:	98 7f       	andi	r25, 0xF8	; 248
    1dc8:	96 95       	lsr	r25
    1dca:	e9 2f       	mov	r30, r25
    1dcc:	96 95       	lsr	r25
    1dce:	96 95       	lsr	r25
    1dd0:	e9 0f       	add	r30, r25
    1dd2:	ff 27       	eor	r31, r31
    1dd4:	e4 59       	subi	r30, 0x94	; 148
    1dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd8:	99 27       	eor	r25, r25
    1dda:	33 27       	eor	r19, r19
    1ddc:	ee 24       	eor	r14, r14
    1dde:	ff 24       	eor	r15, r15
    1de0:	a7 01       	movw	r20, r14
    1de2:	e7 01       	movw	r28, r14
    1de4:	05 90       	lpm	r0, Z+
    1de6:	08 94       	sec
    1de8:	07 94       	ror	r0
    1dea:	28 f4       	brcc	.+10     	; 0x1df6 <__ftoa_engine+0x80>
    1dec:	36 0f       	add	r19, r22
    1dee:	e7 1e       	adc	r14, r23
    1df0:	f8 1e       	adc	r15, r24
    1df2:	49 1f       	adc	r20, r25
    1df4:	51 1d       	adc	r21, r1
    1df6:	66 0f       	add	r22, r22
    1df8:	77 1f       	adc	r23, r23
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	06 94       	lsr	r0
    1e00:	a1 f7       	brne	.-24     	; 0x1dea <__ftoa_engine+0x74>
    1e02:	05 90       	lpm	r0, Z+
    1e04:	07 94       	ror	r0
    1e06:	28 f4       	brcc	.+10     	; 0x1e12 <__ftoa_engine+0x9c>
    1e08:	e7 0e       	add	r14, r23
    1e0a:	f8 1e       	adc	r15, r24
    1e0c:	49 1f       	adc	r20, r25
    1e0e:	56 1f       	adc	r21, r22
    1e10:	c1 1d       	adc	r28, r1
    1e12:	77 0f       	add	r23, r23
    1e14:	88 1f       	adc	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	66 1f       	adc	r22, r22
    1e1a:	06 94       	lsr	r0
    1e1c:	a1 f7       	brne	.-24     	; 0x1e06 <__ftoa_engine+0x90>
    1e1e:	05 90       	lpm	r0, Z+
    1e20:	07 94       	ror	r0
    1e22:	28 f4       	brcc	.+10     	; 0x1e2e <__ftoa_engine+0xb8>
    1e24:	f8 0e       	add	r15, r24
    1e26:	49 1f       	adc	r20, r25
    1e28:	56 1f       	adc	r21, r22
    1e2a:	c7 1f       	adc	r28, r23
    1e2c:	d1 1d       	adc	r29, r1
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	66 1f       	adc	r22, r22
    1e34:	77 1f       	adc	r23, r23
    1e36:	06 94       	lsr	r0
    1e38:	a1 f7       	brne	.-24     	; 0x1e22 <__ftoa_engine+0xac>
    1e3a:	05 90       	lpm	r0, Z+
    1e3c:	07 94       	ror	r0
    1e3e:	20 f4       	brcc	.+8      	; 0x1e48 <__ftoa_engine+0xd2>
    1e40:	49 0f       	add	r20, r25
    1e42:	56 1f       	adc	r21, r22
    1e44:	c7 1f       	adc	r28, r23
    1e46:	d8 1f       	adc	r29, r24
    1e48:	99 0f       	add	r25, r25
    1e4a:	66 1f       	adc	r22, r22
    1e4c:	77 1f       	adc	r23, r23
    1e4e:	88 1f       	adc	r24, r24
    1e50:	06 94       	lsr	r0
    1e52:	a9 f7       	brne	.-22     	; 0x1e3e <__ftoa_engine+0xc8>
    1e54:	84 91       	lpm	r24, Z
    1e56:	10 95       	com	r17
    1e58:	17 70       	andi	r17, 0x07	; 7
    1e5a:	41 f0       	breq	.+16     	; 0x1e6c <__ftoa_engine+0xf6>
    1e5c:	d6 95       	lsr	r29
    1e5e:	c7 95       	ror	r28
    1e60:	57 95       	ror	r21
    1e62:	47 95       	ror	r20
    1e64:	f7 94       	ror	r15
    1e66:	e7 94       	ror	r14
    1e68:	1a 95       	dec	r17
    1e6a:	c1 f7       	brne	.-16     	; 0x1e5c <__ftoa_engine+0xe6>
    1e6c:	e2 e1       	ldi	r30, 0x12	; 18
    1e6e:	f1 e0       	ldi	r31, 0x01	; 1
    1e70:	68 94       	set
    1e72:	15 90       	lpm	r1, Z+
    1e74:	15 91       	lpm	r17, Z+
    1e76:	35 91       	lpm	r19, Z+
    1e78:	65 91       	lpm	r22, Z+
    1e7a:	95 91       	lpm	r25, Z+
    1e7c:	05 90       	lpm	r0, Z+
    1e7e:	7f e2       	ldi	r23, 0x2F	; 47
    1e80:	73 95       	inc	r23
    1e82:	e1 18       	sub	r14, r1
    1e84:	f1 0a       	sbc	r15, r17
    1e86:	43 0b       	sbc	r20, r19
    1e88:	56 0b       	sbc	r21, r22
    1e8a:	c9 0b       	sbc	r28, r25
    1e8c:	d0 09       	sbc	r29, r0
    1e8e:	c0 f7       	brcc	.-16     	; 0x1e80 <__ftoa_engine+0x10a>
    1e90:	e1 0c       	add	r14, r1
    1e92:	f1 1e       	adc	r15, r17
    1e94:	43 1f       	adc	r20, r19
    1e96:	56 1f       	adc	r21, r22
    1e98:	c9 1f       	adc	r28, r25
    1e9a:	d0 1d       	adc	r29, r0
    1e9c:	7e f4       	brtc	.+30     	; 0x1ebc <__ftoa_engine+0x146>
    1e9e:	70 33       	cpi	r23, 0x30	; 48
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <__ftoa_engine+0x130>
    1ea2:	8a 95       	dec	r24
    1ea4:	e6 cf       	rjmp	.-52     	; 0x1e72 <__ftoa_engine+0xfc>
    1ea6:	e8 94       	clt
    1ea8:	01 50       	subi	r16, 0x01	; 1
    1eaa:	30 f0       	brcs	.+12     	; 0x1eb8 <__ftoa_engine+0x142>
    1eac:	08 0f       	add	r16, r24
    1eae:	0a f4       	brpl	.+2      	; 0x1eb2 <__ftoa_engine+0x13c>
    1eb0:	00 27       	eor	r16, r16
    1eb2:	02 17       	cp	r16, r18
    1eb4:	08 f4       	brcc	.+2      	; 0x1eb8 <__ftoa_engine+0x142>
    1eb6:	20 2f       	mov	r18, r16
    1eb8:	23 95       	inc	r18
    1eba:	02 2f       	mov	r16, r18
    1ebc:	7a 33       	cpi	r23, 0x3A	; 58
    1ebe:	28 f0       	brcs	.+10     	; 0x1eca <__ftoa_engine+0x154>
    1ec0:	79 e3       	ldi	r23, 0x39	; 57
    1ec2:	7d 93       	st	X+, r23
    1ec4:	2a 95       	dec	r18
    1ec6:	e9 f7       	brne	.-6      	; 0x1ec2 <__ftoa_engine+0x14c>
    1ec8:	10 c0       	rjmp	.+32     	; 0x1eea <__ftoa_engine+0x174>
    1eca:	7d 93       	st	X+, r23
    1ecc:	2a 95       	dec	r18
    1ece:	89 f6       	brne	.-94     	; 0x1e72 <__ftoa_engine+0xfc>
    1ed0:	06 94       	lsr	r0
    1ed2:	97 95       	ror	r25
    1ed4:	67 95       	ror	r22
    1ed6:	37 95       	ror	r19
    1ed8:	17 95       	ror	r17
    1eda:	17 94       	ror	r1
    1edc:	e1 18       	sub	r14, r1
    1ede:	f1 0a       	sbc	r15, r17
    1ee0:	43 0b       	sbc	r20, r19
    1ee2:	56 0b       	sbc	r21, r22
    1ee4:	c9 0b       	sbc	r28, r25
    1ee6:	d0 09       	sbc	r29, r0
    1ee8:	98 f0       	brcs	.+38     	; 0x1f10 <__ftoa_engine+0x19a>
    1eea:	23 95       	inc	r18
    1eec:	7e 91       	ld	r23, -X
    1eee:	73 95       	inc	r23
    1ef0:	7a 33       	cpi	r23, 0x3A	; 58
    1ef2:	08 f0       	brcs	.+2      	; 0x1ef6 <__ftoa_engine+0x180>
    1ef4:	70 e3       	ldi	r23, 0x30	; 48
    1ef6:	7c 93       	st	X, r23
    1ef8:	20 13       	cpse	r18, r16
    1efa:	b8 f7       	brcc	.-18     	; 0x1eea <__ftoa_engine+0x174>
    1efc:	7e 91       	ld	r23, -X
    1efe:	70 61       	ori	r23, 0x10	; 16
    1f00:	7d 93       	st	X+, r23
    1f02:	30 f0       	brcs	.+12     	; 0x1f10 <__ftoa_engine+0x19a>
    1f04:	83 95       	inc	r24
    1f06:	71 e3       	ldi	r23, 0x31	; 49
    1f08:	7d 93       	st	X+, r23
    1f0a:	70 e3       	ldi	r23, 0x30	; 48
    1f0c:	2a 95       	dec	r18
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <__ftoa_engine+0x192>
    1f10:	11 24       	eor	r1, r1
    1f12:	ef 90       	pop	r14
    1f14:	ff 90       	pop	r15
    1f16:	0f 91       	pop	r16
    1f18:	1f 91       	pop	r17
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	99 27       	eor	r25, r25
    1f20:	87 fd       	sbrc	r24, 7
    1f22:	90 95       	com	r25
    1f24:	08 95       	ret

00001f26 <_exit>:
    1f26:	f8 94       	cli

00001f28 <__stop_program>:
    1f28:	ff cf       	rjmp	.-2      	; 0x1f28 <__stop_program>
