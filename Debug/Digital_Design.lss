
Digital_Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000902  00000996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a4  00800208  00800208  0000099e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024aa  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a0  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001277  00000000  00000000  0000415a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  000053d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a7  00000000  00000000  00005924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000129a  00000000  00000000  000062cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00007565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c2       	rjmp	.+1036   	; 0x422 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c1       	rjmp	.+1004   	; 0x422 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
  42:	00 00       	nop
  44:	ee c1       	rjmp	.+988    	; 0x422 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c1       	rjmp	.+984    	; 0x422 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c2       	rjmp	.+1292   	; 0x562 <__vector_21>
  56:	00 00       	nop
  58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e0 c1       	rjmp	.+960    	; 0x422 <__bad_interrupt>
  62:	00 00       	nop
  64:	de c1       	rjmp	.+956    	; 0x422 <__bad_interrupt>
  66:	00 00       	nop
  68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c1       	rjmp	.+948    	; 0x422 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
  72:	00 00       	nop
  74:	b4 c2       	rjmp	.+1384   	; 0x5de <__vector_29>
  76:	00 00       	nop
  78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d0 c1       	rjmp	.+928    	; 0x422 <__bad_interrupt>
  82:	00 00       	nop
  84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c8 c1       	rjmp	.+912    	; 0x422 <__bad_interrupt>
  92:	00 00       	nop
  94:	c6 c1       	rjmp	.+908    	; 0x422 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c1       	rjmp	.+888    	; 0x422 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	aa c1       	rjmp	.+852    	; 0x422 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a4 c1       	rjmp	.+840    	; 0x422 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
  ec:	00 00       	nop
  ee:	5f 00       	.word	0x005f	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	07 00       	.word	0x0007	; ????
  f8:	07 00       	.word	0x0007	; ????
  fa:	00 00       	nop
  fc:	00 14       	cp	r0, r0
  fe:	7f 14       	cp	r7, r15
 100:	7f 14       	cp	r7, r15
 102:	00 00       	nop
 104:	00 24       	eor	r0, r0
 106:	2a 7f       	andi	r18, 0xFA	; 250
 108:	2a 12       	cpse	r2, r26
 10a:	00 00       	nop
 10c:	00 23       	and	r16, r16
 10e:	13 08       	sbc	r1, r3
 110:	64 62       	ori	r22, 0x24	; 36
 112:	00 00       	nop
 114:	00 36       	cpi	r16, 0x60	; 96
 116:	49 55       	subi	r20, 0x59	; 89
 118:	22 50       	subi	r18, 0x02	; 2
 11a:	00 00       	nop
 11c:	00 00       	nop
 11e:	05 03       	mulsu	r16, r21
 120:	00 00       	nop
 122:	00 00       	nop
 124:	00 1c       	adc	r0, r0
 126:	22 41       	sbci	r18, 0x12	; 18
 128:	00 00       	nop
 12a:	00 00       	nop
 12c:	00 41       	sbci	r16, 0x10	; 16
 12e:	22 1c       	adc	r2, r2
 130:	00 00       	nop
 132:	00 00       	nop
 134:	00 08       	sbc	r0, r0
 136:	2a 1c       	adc	r2, r10
 138:	2a 08       	sbc	r2, r10
 13a:	00 00       	nop
 13c:	00 08       	sbc	r0, r0
 13e:	08 3e       	cpi	r16, 0xE8	; 232
 140:	08 08       	sbc	r0, r8
 142:	00 00       	nop
 144:	00 a0       	ldd	r0, Z+32	; 0x20
 146:	60 00       	.word	0x0060	; ????
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	00 08       	sbc	r0, r0
 14e:	08 08       	sbc	r0, r8
 150:	08 08       	sbc	r0, r8
 152:	00 00       	nop
 154:	00 60       	ori	r16, 0x00	; 0
 156:	60 00       	.word	0x0060	; ????
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	00 20       	and	r0, r0
 15e:	10 08       	sbc	r1, r0
 160:	04 02       	muls	r16, r20
 162:	00 00       	nop
 164:	00 3e       	cpi	r16, 0xE0	; 224
 166:	51 49       	sbci	r21, 0x91	; 145
 168:	45 3e       	cpi	r20, 0xE5	; 229
 16a:	00 00       	nop
 16c:	00 00       	nop
 16e:	42 7f       	andi	r20, 0xF2	; 242
 170:	40 00       	.word	0x0040	; ????
 172:	00 00       	nop
 174:	00 62       	ori	r16, 0x20	; 32
 176:	51 49       	sbci	r21, 0x91	; 145
 178:	49 46       	sbci	r20, 0x69	; 105
 17a:	00 00       	nop
 17c:	00 22       	and	r0, r16
 17e:	41 49       	sbci	r20, 0x91	; 145
 180:	49 36       	cpi	r20, 0x69	; 105
 182:	00 00       	nop
 184:	00 18       	sub	r0, r0
 186:	14 12       	cpse	r1, r20
 188:	7f 10       	cpse	r7, r15
 18a:	00 00       	nop
 18c:	00 27       	eor	r16, r16
 18e:	45 45       	sbci	r20, 0x55	; 85
 190:	45 39       	cpi	r20, 0x95	; 149
 192:	00 00       	nop
 194:	00 3c       	cpi	r16, 0xC0	; 192
 196:	4a 49       	sbci	r20, 0x9A	; 154
 198:	49 30       	cpi	r20, 0x09	; 9
 19a:	00 00       	nop
 19c:	00 01       	movw	r0, r0
 19e:	71 09       	sbc	r23, r1
 1a0:	05 03       	mulsu	r16, r21
 1a2:	00 00       	nop
 1a4:	00 36       	cpi	r16, 0x60	; 96
 1a6:	49 49       	sbci	r20, 0x99	; 153
 1a8:	49 36       	cpi	r20, 0x69	; 105
 1aa:	00 00       	nop
 1ac:	00 06       	cpc	r0, r16
 1ae:	49 49       	sbci	r20, 0x99	; 153
 1b0:	29 1e       	adc	r2, r25
 1b2:	00 00       	nop
 1b4:	00 00       	nop
 1b6:	36 36       	cpi	r19, 0x66	; 102
 1b8:	00 00       	nop
 1ba:	00 00       	nop
 1bc:	00 00       	nop
 1be:	ac 6c       	ori	r26, 0xCC	; 204
 1c0:	00 00       	nop
 1c2:	00 00       	nop
 1c4:	00 08       	sbc	r0, r0
 1c6:	14 22       	and	r1, r20
 1c8:	41 00       	.word	0x0041	; ????
 1ca:	00 00       	nop
 1cc:	00 14       	cp	r0, r0
 1ce:	14 14       	cp	r1, r4
 1d0:	14 14       	cp	r1, r4
 1d2:	00 00       	nop
 1d4:	00 41       	sbci	r16, 0x10	; 16
 1d6:	22 14       	cp	r2, r2
 1d8:	08 00       	.word	0x0008	; ????
 1da:	00 00       	nop
 1dc:	00 02       	muls	r16, r16
 1de:	01 51       	subi	r16, 0x11	; 17
 1e0:	09 06       	cpc	r0, r25
 1e2:	00 00       	nop
 1e4:	00 32       	cpi	r16, 0x20	; 32
 1e6:	49 79       	andi	r20, 0x99	; 153
 1e8:	41 3e       	cpi	r20, 0xE1	; 225
 1ea:	00 00       	nop
 1ec:	00 7e       	andi	r16, 0xE0	; 224
 1ee:	09 09       	sbc	r16, r9
 1f0:	09 7e       	andi	r16, 0xE9	; 233
 1f2:	00 00       	nop
 1f4:	00 7f       	andi	r16, 0xF0	; 240
 1f6:	49 49       	sbci	r20, 0x99	; 153
 1f8:	49 36       	cpi	r20, 0x69	; 105
 1fa:	00 00       	nop
 1fc:	00 3e       	cpi	r16, 0xE0	; 224
 1fe:	41 41       	sbci	r20, 0x11	; 17
 200:	41 22       	and	r4, r17
 202:	00 00       	nop
 204:	00 7f       	andi	r16, 0xF0	; 240
 206:	41 41       	sbci	r20, 0x11	; 17
 208:	22 1c       	adc	r2, r2
 20a:	00 00       	nop
 20c:	00 7f       	andi	r16, 0xF0	; 240
 20e:	49 49       	sbci	r20, 0x99	; 153
 210:	49 41       	sbci	r20, 0x19	; 25
 212:	00 00       	nop
 214:	00 7f       	andi	r16, 0xF0	; 240
 216:	09 09       	sbc	r16, r9
 218:	09 01       	movw	r0, r18
 21a:	00 00       	nop
 21c:	00 3e       	cpi	r16, 0xE0	; 224
 21e:	41 41       	sbci	r20, 0x11	; 17
 220:	51 72       	andi	r21, 0x21	; 33
 222:	00 00       	nop
 224:	00 7f       	andi	r16, 0xF0	; 240
 226:	08 08       	sbc	r0, r8
 228:	08 7f       	andi	r16, 0xF8	; 248
 22a:	00 00       	nop
 22c:	00 41       	sbci	r16, 0x10	; 16
 22e:	7f 41       	sbci	r23, 0x1F	; 31
 230:	00 00       	nop
 232:	00 00       	nop
 234:	00 20       	and	r0, r0
 236:	40 41       	sbci	r20, 0x10	; 16
 238:	3f 01       	movw	r6, r30
 23a:	00 00       	nop
 23c:	00 7f       	andi	r16, 0xF0	; 240
 23e:	08 14       	cp	r0, r8
 240:	22 41       	sbci	r18, 0x12	; 18
 242:	00 00       	nop
 244:	00 7f       	andi	r16, 0xF0	; 240
 246:	40 40       	sbci	r20, 0x00	; 0
 248:	40 40       	sbci	r20, 0x00	; 0
 24a:	00 00       	nop
 24c:	00 7f       	andi	r16, 0xF0	; 240
 24e:	02 0c       	add	r0, r2
 250:	02 7f       	andi	r16, 0xF2	; 242
 252:	00 00       	nop
 254:	00 7f       	andi	r16, 0xF0	; 240
 256:	04 08       	sbc	r0, r4
 258:	10 7f       	andi	r17, 0xF0	; 240
 25a:	00 00       	nop
 25c:	00 3e       	cpi	r16, 0xE0	; 224
 25e:	41 41       	sbci	r20, 0x11	; 17
 260:	41 3e       	cpi	r20, 0xE1	; 225
 262:	00 00       	nop
 264:	00 7f       	andi	r16, 0xF0	; 240
 266:	09 09       	sbc	r16, r9
 268:	09 06       	cpc	r0, r25
 26a:	00 00       	nop
 26c:	00 3e       	cpi	r16, 0xE0	; 224
 26e:	41 51       	subi	r20, 0x11	; 17
 270:	21 5e       	subi	r18, 0xE1	; 225
 272:	00 00       	nop
 274:	00 7f       	andi	r16, 0xF0	; 240
 276:	09 19       	sub	r16, r9
 278:	29 46       	sbci	r18, 0x69	; 105
 27a:	00 00       	nop
 27c:	00 26       	eor	r0, r16
 27e:	49 49       	sbci	r20, 0x99	; 153
 280:	49 32       	cpi	r20, 0x29	; 41
 282:	00 00       	nop
 284:	00 01       	movw	r0, r0
 286:	01 7f       	andi	r16, 0xF1	; 241
 288:	01 01       	movw	r0, r2
 28a:	00 00       	nop
 28c:	00 3f       	cpi	r16, 0xF0	; 240
 28e:	40 40       	sbci	r20, 0x00	; 0
 290:	40 3f       	cpi	r20, 0xF0	; 240
 292:	00 00       	nop
 294:	00 1f       	adc	r16, r16
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	20 1f       	adc	r18, r16
 29a:	00 00       	nop
 29c:	00 3f       	cpi	r16, 0xF0	; 240
 29e:	40 38       	cpi	r20, 0x80	; 128
 2a0:	40 3f       	cpi	r20, 0xF0	; 240
 2a2:	00 00       	nop
 2a4:	00 63       	ori	r16, 0x30	; 48
 2a6:	14 08       	sbc	r1, r4
 2a8:	14 63       	ori	r17, 0x34	; 52
 2aa:	00 00       	nop
 2ac:	00 03       	mulsu	r16, r16
 2ae:	04 78       	andi	r16, 0x84	; 132
 2b0:	04 03       	mulsu	r16, r20
 2b2:	00 00       	nop
 2b4:	00 61       	ori	r16, 0x10	; 16
 2b6:	51 49       	sbci	r21, 0x91	; 145
 2b8:	45 43       	sbci	r20, 0x35	; 53
 2ba:	00 00       	nop
 2bc:	00 7f       	andi	r16, 0xF0	; 240
 2be:	41 41       	sbci	r20, 0x11	; 17
 2c0:	00 00       	nop
 2c2:	00 00       	nop
 2c4:	00 02       	muls	r16, r16
 2c6:	04 08       	sbc	r0, r4
 2c8:	10 20       	and	r1, r0
 2ca:	00 00       	nop
 2cc:	00 41       	sbci	r16, 0x10	; 16
 2ce:	41 7f       	andi	r20, 0xF1	; 241
 2d0:	00 00       	nop
 2d2:	00 00       	nop
 2d4:	00 04       	cpc	r0, r0
 2d6:	02 01       	movw	r0, r4
 2d8:	02 04       	cpc	r0, r2
 2da:	00 00       	nop
 2dc:	00 80       	ld	r0, Z
 2de:	80 80       	ld	r8, Z
 2e0:	80 80       	ld	r8, Z
 2e2:	00 00       	nop
 2e4:	00 01       	movw	r0, r0
 2e6:	02 04       	cpc	r0, r2
 2e8:	00 00       	nop
 2ea:	00 00       	nop
 2ec:	00 20       	and	r0, r0
 2ee:	54 54       	subi	r21, 0x44	; 68
 2f0:	54 78       	andi	r21, 0x84	; 132
 2f2:	00 00       	nop
 2f4:	00 7f       	andi	r16, 0xF0	; 240
 2f6:	48 44       	sbci	r20, 0x48	; 72
 2f8:	44 38       	cpi	r20, 0x84	; 132
 2fa:	00 00       	nop
 2fc:	00 38       	cpi	r16, 0x80	; 128
 2fe:	44 44       	sbci	r20, 0x44	; 68
 300:	28 00       	.word	0x0028	; ????
 302:	00 00       	nop
 304:	00 38       	cpi	r16, 0x80	; 128
 306:	44 44       	sbci	r20, 0x44	; 68
 308:	48 7f       	andi	r20, 0xF8	; 248
 30a:	00 00       	nop
 30c:	00 38       	cpi	r16, 0x80	; 128
 30e:	54 54       	subi	r21, 0x44	; 68
 310:	54 18       	sub	r5, r4
 312:	00 00       	nop
 314:	00 08       	sbc	r0, r0
 316:	7e 09       	sbc	r23, r14
 318:	02 00       	.word	0x0002	; ????
 31a:	00 00       	nop
 31c:	00 18       	sub	r0, r0
 31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
 320:	a4 7c       	andi	r26, 0xC4	; 196
 322:	00 00       	nop
 324:	00 7f       	andi	r16, 0xF0	; 240
 326:	08 04       	cpc	r0, r8
 328:	04 78       	andi	r16, 0x84	; 132
 32a:	00 00       	nop
 32c:	00 00       	nop
 32e:	7d 00       	.word	0x007d	; ????
 330:	00 00       	nop
 332:	00 00       	nop
 334:	00 80       	ld	r0, Z
 336:	84 7d       	andi	r24, 0xD4	; 212
 338:	00 00       	nop
 33a:	00 00       	nop
 33c:	00 7f       	andi	r16, 0xF0	; 240
 33e:	10 28       	or	r1, r0
 340:	44 00       	.word	0x0044	; ????
 342:	00 00       	nop
 344:	00 41       	sbci	r16, 0x10	; 16
 346:	7f 40       	sbci	r23, 0x0F	; 15
 348:	00 00       	nop
 34a:	00 00       	nop
 34c:	00 7c       	andi	r16, 0xC0	; 192
 34e:	04 18       	sub	r0, r4
 350:	04 78       	andi	r16, 0x84	; 132
 352:	00 00       	nop
 354:	00 7c       	andi	r16, 0xC0	; 192
 356:	08 04       	cpc	r0, r8
 358:	7c 00       	.word	0x007c	; ????
 35a:	00 00       	nop
 35c:	00 38       	cpi	r16, 0x80	; 128
 35e:	44 44       	sbci	r20, 0x44	; 68
 360:	38 00       	.word	0x0038	; ????
 362:	00 00       	nop
 364:	00 fc       	sbrc	r0, 0
 366:	24 24       	eor	r2, r4
 368:	18 00       	.word	0x0018	; ????
 36a:	00 00       	nop
 36c:	00 18       	sub	r0, r0
 36e:	24 24       	eor	r2, r4
 370:	fc 00       	.word	0x00fc	; ????
 372:	00 00       	nop
 374:	00 00       	nop
 376:	7c 08       	sbc	r7, r12
 378:	04 00       	.word	0x0004	; ????
 37a:	00 00       	nop
 37c:	00 48       	sbci	r16, 0x80	; 128
 37e:	54 54       	subi	r21, 0x44	; 68
 380:	24 00       	.word	0x0024	; ????
 382:	00 00       	nop
 384:	00 04       	cpc	r0, r0
 386:	7f 44       	sbci	r23, 0x4F	; 79
 388:	00 00       	nop
 38a:	00 00       	nop
 38c:	00 3c       	cpi	r16, 0xC0	; 192
 38e:	40 40       	sbci	r20, 0x00	; 0
 390:	7c 00       	.word	0x007c	; ????
 392:	00 00       	nop
 394:	00 1c       	adc	r0, r0
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	20 1c       	adc	r2, r0
 39a:	00 00       	nop
 39c:	00 3c       	cpi	r16, 0xC0	; 192
 39e:	40 30       	cpi	r20, 0x00	; 0
 3a0:	40 3c       	cpi	r20, 0xC0	; 192
 3a2:	00 00       	nop
 3a4:	00 44       	sbci	r16, 0x40	; 64
 3a6:	28 10       	cpse	r2, r8
 3a8:	28 44       	sbci	r18, 0x48	; 72
 3aa:	00 00       	nop
 3ac:	00 1c       	adc	r0, r0
 3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
 3b0:	7c 00       	.word	0x007c	; ????
 3b2:	00 00       	nop
 3b4:	00 44       	sbci	r16, 0x40	; 64
 3b6:	64 54       	subi	r22, 0x44	; 68
 3b8:	4c 44       	sbci	r20, 0x4C	; 76
 3ba:	00 00       	nop
 3bc:	00 08       	sbc	r0, r0
 3be:	36 41       	sbci	r19, 0x16	; 22
 3c0:	00 00       	nop
 3c2:	00 00       	nop
 3c4:	00 00       	nop
 3c6:	7f 00       	.word	0x007f	; ????
 3c8:	00 00       	nop
 3ca:	00 00       	nop
 3cc:	00 41       	sbci	r16, 0x10	; 16
 3ce:	36 08       	sbc	r3, r6
 3d0:	00 00       	nop
 3d2:	00 00       	nop
 3d4:	00 02       	muls	r16, r16
 3d6:	01 01       	movw	r0, r2
 3d8:	02 01       	movw	r0, r4
 3da:	00 00       	nop
 3dc:	00 02       	muls	r16, r16
 3de:	05 05       	cpc	r16, r5
 3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
 3e4:	11 24       	eor	r1, r1
 3e6:	1f be       	out	0x3f, r1	; 63
 3e8:	cf ef       	ldi	r28, 0xFF	; 255
 3ea:	d1 e2       	ldi	r29, 0x21	; 33
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	00 e0       	ldi	r16, 0x00	; 0
 3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
 3f4:	12 e0       	ldi	r17, 0x02	; 2
 3f6:	a0 e0       	ldi	r26, 0x00	; 0
 3f8:	b2 e0       	ldi	r27, 0x02	; 2
 3fa:	e2 e0       	ldi	r30, 0x02	; 2
 3fc:	f9 e0       	ldi	r31, 0x09	; 9
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	0b bf       	out	0x3b, r16	; 59
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	07 90       	elpm	r0, Z+
 406:	0d 92       	st	X+, r0
 408:	a8 30       	cpi	r26, 0x08	; 8
 40a:	b1 07       	cpc	r27, r17
 40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
 40e:	22 e0       	ldi	r18, 0x02	; 2
 410:	a8 e0       	ldi	r26, 0x08	; 8
 412:	b2 e0       	ldi	r27, 0x02	; 2
 414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
 416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
 418:	ac 3a       	cpi	r26, 0xAC	; 172
 41a:	b2 07       	cpc	r27, r18
 41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
 41e:	9f d0       	rcall	.+318    	; 0x55e <main>
 420:	6e c2       	rjmp	.+1244   	; 0x8fe <_exit>

00000422 <__bad_interrupt>:
 422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <init_adc>:
}
*/

//Init ADC 8kHz from timer 0 (with interrupt if entered)
void init_adc(char interrupt){
	ADCSRA |= (1<<ADPS2);						//1MHz input clock to ADC (div factor 16). NB: Only for resolutions less than 10bit
 424:	ea e7       	ldi	r30, 0x7A	; 122
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	90 81       	ld	r25, Z
 42a:	94 60       	ori	r25, 0x04	; 4
 42c:	90 83       	st	Z, r25
	ADMUX  |= (1<<REFS0);						//3,3 V reference with cap at VREF pin.
 42e:	ac e7       	ldi	r26, 0x7C	; 124
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	9c 91       	ld	r25, X
 434:	90 64       	ori	r25, 0x40	; 64
 436:	9c 93       	st	X, r25
	ADMUX  |= (1<<ADLAR);						//Left adjustment for 8bit resolution
 438:	9c 91       	ld	r25, X
 43a:	90 62       	ori	r25, 0x20	; 32
 43c:	9c 93       	st	X, r25
	DIDR0  |= (1<<ADC0D);						//disabling unused inputs to save power
 43e:	ae e7       	ldi	r26, 0x7E	; 126
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	9c 91       	ld	r25, X
 444:	91 60       	ori	r25, 0x01	; 1
 446:	9c 93       	st	X, r25
	ADCSRB |= (1<<ADTS1) | (1<<ADTS0);			//Auto Trigger source: (Timer/Counter0 Compare Match A)
 448:	ab e7       	ldi	r26, 0x7B	; 123
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	9c 91       	ld	r25, X
 44e:	93 60       	ori	r25, 0x03	; 3
 450:	9c 93       	st	X, r25
	ADCSRA |= (1<<ADATE);						//Enable auto trigger mode
 452:	90 81       	ld	r25, Z
 454:	90 62       	ori	r25, 0x20	; 32
 456:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADEN);						//Enable ADC
 458:	90 81       	ld	r25, Z
 45a:	90 68       	ori	r25, 0x80	; 128
 45c:	90 83       	st	Z, r25
	if(interrupt) ADCSRA |= (1<<ADIE);			//Enable interrupt
 45e:	88 23       	and	r24, r24
 460:	19 f0       	breq	.+6      	; 0x468 <init_adc+0x44>
 462:	80 81       	ld	r24, Z
 464:	88 60       	ori	r24, 0x08	; 8
 466:	80 83       	st	Z, r24
 468:	08 95       	ret

0000046a <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
 46a:	81 b1       	in	r24, 0x01	; 1
 46c:	81 60       	ori	r24, 0x01	; 1
 46e:	81 b9       	out	0x01, r24	; 1
 470:	82 b1       	in	r24, 0x02	; 2
 472:	81 60       	ori	r24, 0x01	; 1
 474:	82 b9       	out	0x02, r24	; 2
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	83 ed       	ldi	r24, 0xD3	; 211
 47a:	90 e3       	ldi	r25, 0x30	; 48
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <I2C_Init+0x12>
 484:	00 c0       	rjmp	.+0      	; 0x486 <I2C_Init+0x1c>
 486:	00 00       	nop
 488:	82 e1       	ldi	r24, 0x12	; 18
 48a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 48e:	e9 eb       	ldi	r30, 0xB9	; 185
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	8c 7f       	andi	r24, 0xFC	; 252
 496:	80 83       	st	Z, r24
 498:	85 e0       	ldi	r24, 0x05	; 5
 49a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 49e:	08 95       	ret

000004a0 <I2C_Start>:
 4a0:	94 ea       	ldi	r25, 0xA4	; 164
 4a2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4a6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4aa:	99 23       	and	r25, r25
 4ac:	e4 f7       	brge	.-8      	; 0x4a6 <I2C_Start+0x6>
 4ae:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 4b2:	98 7f       	andi	r25, 0xF8	; 248
 4b4:	98 30       	cpi	r25, 0x08	; 8
 4b6:	91 f4       	brne	.+36     	; 0x4dc <I2C_Start+0x3c>
 4b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 4bc:	84 e8       	ldi	r24, 0x84	; 132
 4be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4c6:	88 23       	and	r24, r24
 4c8:	e4 f7       	brge	.-8      	; 0x4c2 <I2C_Start+0x22>
 4ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 4ce:	88 7f       	andi	r24, 0xF8	; 248
 4d0:	88 31       	cpi	r24, 0x18	; 24
 4d2:	31 f0       	breq	.+12     	; 0x4e0 <I2C_Start+0x40>
 4d4:	80 32       	cpi	r24, 0x20	; 32
 4d6:	31 f4       	brne	.+12     	; 0x4e4 <I2C_Start+0x44>
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	08 95       	ret
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	08 95       	ret
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	08 95       	ret

000004e8 <I2C_Write>:
 4e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 4ec:	84 e8       	ldi	r24, 0x84	; 132
 4ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 4f6:	88 23       	and	r24, r24
 4f8:	e4 f7       	brge	.-8      	; 0x4f2 <I2C_Write+0xa>
 4fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 4fe:	88 7f       	andi	r24, 0xF8	; 248
 500:	88 32       	cpi	r24, 0x28	; 40
 502:	21 f0       	breq	.+8      	; 0x50c <I2C_Write+0x24>
 504:	80 33       	cpi	r24, 0x30	; 48
 506:	21 f4       	brne	.+8      	; 0x510 <I2C_Write+0x28>
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	08 95       	ret
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	08 95       	ret

00000514 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
 514:	84 e9       	ldi	r24, 0x94	; 148
 516:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
 51a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 51e:	84 fd       	sbrc	r24, 4
 520:	fc cf       	rjmp	.-8      	; 0x51a <I2C_Stop+0x6>
 522:	08 95       	ret

00000524 <setup>:
				PhaseTrig[i]=-1;
				trig_count = 0;
				break;
		 }
	 }
 }
 524:	78 94       	sei
 526:	84 b1       	in	r24, 0x04	; 4
 528:	80 64       	ori	r24, 0x40	; 64
 52a:	84 b9       	out	0x04, r24	; 4
 52c:	84 b1       	in	r24, 0x04	; 4
 52e:	80 62       	ori	r24, 0x20	; 32
 530:	84 b9       	out	0x04, r24	; 4
 532:	85 b1       	in	r24, 0x05	; 5
 534:	8f 7d       	andi	r24, 0xDF	; 223
 536:	85 b9       	out	0x05, r24	; 5
 538:	85 b1       	in	r24, 0x05	; 5
 53a:	8f 7b       	andi	r24, 0xBF	; 191
 53c:	85 b9       	out	0x05, r24	; 5
 53e:	88 e7       	ldi	r24, 0x78	; 120
 540:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <_i2c_address>
 544:	92 df       	rcall	.-220    	; 0x46a <I2C_Init>
 546:	f4 d0       	rcall	.+488    	; 0x730 <InitializeDisplay>
 548:	87 d1       	rcall	.+782    	; 0x858 <print_fonts>
 54a:	44 d1       	rcall	.+648    	; 0x7d4 <clear_display>
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	65 e0       	ldi	r22, 0x05	; 5
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	92 e0       	ldi	r25, 0x02	; 2
 558:	51 d1       	rcall	.+674    	; 0x7fc <sendStrXY>
 55a:	bf c1       	rjmp	.+894    	; 0x8da <init_timer0>
 55c:	08 95       	ret

0000055e <main>:
 55e:	e2 df       	rcall	.-60     	; 0x524 <setup>
 560:	ff cf       	rjmp	.-2      	; 0x560 <main+0x2>

00000562 <__vector_21>:


//Service Routines

//Service routine for Timer1 Compare B
ISR(TIMER0_COMPA_vect){
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	0b b6       	in	r0, 0x3b	; 59
 56e:	0f 92       	push	r0
 570:	2f 93       	push	r18
 572:	3f 93       	push	r19
 574:	4f 93       	push	r20
 576:	5f 93       	push	r21
 578:	6f 93       	push	r22
 57a:	7f 93       	push	r23
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
 580:	af 93       	push	r26
 582:	bf 93       	push	r27
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
//	TOGGLEBIT(PORTB,6);
 	if(timercount!=3){
 588:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <timercount>
 58c:	83 30       	cpi	r24, 0x03	; 3
 58e:	21 f0       	breq	.+8      	; 0x598 <__vector_21+0x36>
 		timercount++;		
 590:	8f 5f       	subi	r24, 0xFF	; 255
 592:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <timercount>
 596:	10 c0       	rjmp	.+32     	; 0x5b8 <__vector_21+0x56>
 	}
 	else{
 		timercount = 0;
 598:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <timercount>
 		TOGGLEBIT(PORTB,6);	
 59c:	95 b1       	in	r25, 0x05	; 5
 59e:	80 e4       	ldi	r24, 0x40	; 64
 5a0:	89 27       	eor	r24, r25
 5a2:	85 b9       	out	0x05, r24	; 5
		if(CHKBIT(PORTB,6) == 0 && ADC_start_flag == 0){
 5a4:	2e 99       	sbic	0x05, 6	; 5
 5a6:	08 c0       	rjmp	.+16     	; 0x5b8 <__vector_21+0x56>
 5a8:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <ADC_start_flag>
 5ac:	81 11       	cpse	r24, r1
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__vector_21+0x56>
			ADC_start_flag = 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <ADC_start_flag>
			init_adc(1);
 5b6:	36 df       	rcall	.-404    	; 0x424 <init_adc>
			}
		}
}
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	bf 91       	pop	r27
 5be:	af 91       	pop	r26
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	7f 91       	pop	r23
 5c6:	6f 91       	pop	r22
 5c8:	5f 91       	pop	r21
 5ca:	4f 91       	pop	r20
 5cc:	3f 91       	pop	r19
 5ce:	2f 91       	pop	r18
 5d0:	0f 90       	pop	r0
 5d2:	0b be       	out	0x3b, r0	; 59
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__vector_29>:



//Service routine for ADC sample ready
ISR(ADC_vect){
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	0b b6       	in	r0, 0x3b	; 59
 5ea:	0f 92       	push	r0
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	ADC_value = ADCH;
 608:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <ADC_value+0x1>
 612:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <ADC_value>
	//formatADCSample(ADC_value,ADC_buffer);
	//sendStrXY(ADC_buffer,6,0);
	if(buffercounter<=NUM_SAMPLES-1){
 616:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <buffercounter>
 61a:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <buffercounter+0x1>
 61e:	20 34       	cpi	r18, 0x40	; 64
 620:	31 05       	cpc	r19, r1
 622:	8c f5       	brge	.+98     	; 0x686 <__vector_29+0xa8>
		Amplitude[active_write] = Amplitude[active_write]+ADC_value*AmpTrig[buffercounter];
 624:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <active_write>
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	df 01       	movw	r26, r30
 630:	a3 57       	subi	r26, 0x73	; 115
 632:	bd 4f       	sbci	r27, 0xFD	; 253
 634:	6d 91       	ld	r22, X+
 636:	7c 91       	ld	r23, X
 638:	11 97       	sbiw	r26, 0x01	; 1
 63a:	e9 01       	movw	r28, r18
 63c:	c8 5b       	subi	r28, 0xB8	; 184
 63e:	dd 4f       	sbci	r29, 0xFD	; 253
 640:	c8 81       	ld	r28, Y
 642:	c8 9f       	mul	r28, r24
 644:	a0 01       	movw	r20, r0
 646:	c9 9f       	mul	r28, r25
 648:	50 0d       	add	r21, r0
 64a:	11 24       	eor	r1, r1
 64c:	46 0f       	add	r20, r22
 64e:	57 1f       	adc	r21, r23
 650:	4d 93       	st	X+, r20
 652:	5c 93       	st	X, r21
		Phase[active_write] = Phase[active_write]+ADC_value*PhaseTrig[buffercounter];
 654:	e7 57       	subi	r30, 0x77	; 119
 656:	fd 4f       	sbci	r31, 0xFD	; 253
 658:	60 81       	ld	r22, Z
 65a:	71 81       	ldd	r23, Z+1	; 0x01
 65c:	d9 01       	movw	r26, r18
 65e:	a8 5f       	subi	r26, 0xF8	; 248
 660:	bd 4f       	sbci	r27, 0xFD	; 253
 662:	ac 91       	ld	r26, X
 664:	a8 9f       	mul	r26, r24
 666:	a0 01       	movw	r20, r0
 668:	a9 9f       	mul	r26, r25
 66a:	50 0d       	add	r21, r0
 66c:	11 24       	eor	r1, r1
 66e:	cb 01       	movw	r24, r22
 670:	84 0f       	add	r24, r20
 672:	95 1f       	adc	r25, r21
 674:	91 83       	std	Z+1, r25	; 0x01
 676:	80 83       	st	Z, r24
		buffercounter++;
 678:	c9 01       	movw	r24, r18
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <buffercounter+0x1>
 680:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <buffercounter>
 684:	34 c0       	rjmp	.+104    	; 0x6ee <__vector_29+0x110>
	}
	else{
		if(active_write == 0){
 686:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <active_write>
 68a:	81 11       	cpse	r24, r1
 68c:	15 c0       	rjmp	.+42     	; 0x6b8 <__vector_29+0xda>
			Amplitude[active_read] = 0;
 68e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	fc 01       	movw	r30, r24
 69a:	e3 57       	subi	r30, 0x73	; 115
 69c:	fd 4f       	sbci	r31, 0xFD	; 253
 69e:	11 82       	std	Z+1, r1	; 0x01
 6a0:	10 82       	st	Z, r1
			Phase[active_read] =0;
 6a2:	fc 01       	movw	r30, r24
 6a4:	e7 57       	subi	r30, 0x77	; 119
 6a6:	fd 4f       	sbci	r31, 0xFD	; 253
 6a8:	11 82       	std	Z+1, r1	; 0x01
 6aa:	10 82       	st	Z, r1
			active_write = 1;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <active_write>
			active_read = 0;
 6b2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 6b6:	14 c0       	rjmp	.+40     	; 0x6e0 <__vector_29+0x102>
			}
		else{
			Amplitude[active_read] = 0;
 6b8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	fc 01       	movw	r30, r24
 6c4:	e3 57       	subi	r30, 0x73	; 115
 6c6:	fd 4f       	sbci	r31, 0xFD	; 253
 6c8:	11 82       	std	Z+1, r1	; 0x01
 6ca:	10 82       	st	Z, r1
			Phase[active_read] = 0;
 6cc:	fc 01       	movw	r30, r24
 6ce:	e7 57       	subi	r30, 0x77	; 119
 6d0:	fd 4f       	sbci	r31, 0xFD	; 253
 6d2:	11 82       	std	Z+1, r1	; 0x01
 6d4:	10 82       	st	Z, r1
			active_write = 0;
 6d6:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <active_write>
			active_read = 1;
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		}
		
		DFT_ready = 1;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <DFT_ready>
		buffercounter = 0;
 6e6:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <buffercounter+0x1>
 6ea:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <buffercounter>
	}
}
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	bf 91       	pop	r27
 6f8:	af 91       	pop	r26
 6fa:	9f 91       	pop	r25
 6fc:	8f 91       	pop	r24
 6fe:	7f 91       	pop	r23
 700:	6f 91       	pop	r22
 702:	5f 91       	pop	r21
 704:	4f 91       	pop	r20
 706:	3f 91       	pop	r19
 708:	2f 91       	pop	r18
 70a:	0f 90       	pop	r0
 70c:	0b be       	out	0x3b, r0	; 59
 70e:	0f 90       	pop	r0
 710:	0f be       	out	0x3f, r0	; 63
 712:	0f 90       	pop	r0
 714:	1f 90       	pop	r1
 716:	18 95       	reti

00000718 <ssd1306_command>:

	ssd1306_command(0xb0 + y);
	ssd1306_command(((x & 0xf0) >> 4) | 0x10); // | 0x10


}
 718:	cf 93       	push	r28
 71a:	c8 2f       	mov	r28, r24
 71c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_i2c_address>
 720:	bf de       	rcall	.-642    	; 0x4a0 <I2C_Start>
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	e1 de       	rcall	.-574    	; 0x4e8 <I2C_Write>
 726:	8c 2f       	mov	r24, r28
 728:	df de       	rcall	.-578    	; 0x4e8 <I2C_Write>
 72a:	f4 de       	rcall	.-536    	; 0x514 <I2C_Stop>
 72c:	cf 91       	pop	r28
 72e:	08 95       	ret

00000730 <InitializeDisplay>:
 730:	8e ea       	ldi	r24, 0xAE	; 174
 732:	f2 df       	rcall	.-28     	; 0x718 <ssd1306_command>
 734:	85 ed       	ldi	r24, 0xD5	; 213
 736:	f0 df       	rcall	.-32     	; 0x718 <ssd1306_command>
 738:	80 e8       	ldi	r24, 0x80	; 128
 73a:	ee df       	rcall	.-36     	; 0x718 <ssd1306_command>
 73c:	88 ea       	ldi	r24, 0xA8	; 168
 73e:	ec df       	rcall	.-40     	; 0x718 <ssd1306_command>
 740:	8f e3       	ldi	r24, 0x3F	; 63
 742:	ea df       	rcall	.-44     	; 0x718 <ssd1306_command>
 744:	83 ed       	ldi	r24, 0xD3	; 211
 746:	e8 df       	rcall	.-48     	; 0x718 <ssd1306_command>
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	e6 df       	rcall	.-52     	; 0x718 <ssd1306_command>
 74c:	80 e4       	ldi	r24, 0x40	; 64
 74e:	e4 df       	rcall	.-56     	; 0x718 <ssd1306_command>
 750:	8d e8       	ldi	r24, 0x8D	; 141
 752:	e2 df       	rcall	.-60     	; 0x718 <ssd1306_command>
 754:	84 e1       	ldi	r24, 0x14	; 20
 756:	e0 df       	rcall	.-64     	; 0x718 <ssd1306_command>
 758:	80 e2       	ldi	r24, 0x20	; 32
 75a:	de df       	rcall	.-68     	; 0x718 <ssd1306_command>
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	dc df       	rcall	.-72     	; 0x718 <ssd1306_command>
 760:	81 ea       	ldi	r24, 0xA1	; 161
 762:	da df       	rcall	.-76     	; 0x718 <ssd1306_command>
 764:	88 ec       	ldi	r24, 0xC8	; 200
 766:	d8 df       	rcall	.-80     	; 0x718 <ssd1306_command>
 768:	8a ed       	ldi	r24, 0xDA	; 218
 76a:	d6 df       	rcall	.-84     	; 0x718 <ssd1306_command>
 76c:	82 e1       	ldi	r24, 0x12	; 18
 76e:	d4 df       	rcall	.-88     	; 0x718 <ssd1306_command>
 770:	81 e8       	ldi	r24, 0x81	; 129
 772:	d2 df       	rcall	.-92     	; 0x718 <ssd1306_command>
 774:	8f ec       	ldi	r24, 0xCF	; 207
 776:	d0 df       	rcall	.-96     	; 0x718 <ssd1306_command>
 778:	89 ed       	ldi	r24, 0xD9	; 217
 77a:	ce df       	rcall	.-100    	; 0x718 <ssd1306_command>
 77c:	81 ef       	ldi	r24, 0xF1	; 241
 77e:	cc df       	rcall	.-104    	; 0x718 <ssd1306_command>
 780:	8b ed       	ldi	r24, 0xDB	; 219
 782:	ca df       	rcall	.-108    	; 0x718 <ssd1306_command>
 784:	80 e4       	ldi	r24, 0x40	; 64
 786:	c8 df       	rcall	.-112    	; 0x718 <ssd1306_command>
 788:	84 ea       	ldi	r24, 0xA4	; 164
 78a:	c6 df       	rcall	.-116    	; 0x718 <ssd1306_command>
 78c:	86 ea       	ldi	r24, 0xA6	; 166
 78e:	c4 df       	rcall	.-120    	; 0x718 <ssd1306_command>
 790:	8f ea       	ldi	r24, 0xAF	; 175
 792:	c2 cf       	rjmp	.-124    	; 0x718 <ssd1306_command>
 794:	08 95       	ret

00000796 <SendChar>:
 796:	cf 93       	push	r28
 798:	c8 2f       	mov	r28, r24
 79a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_i2c_address>
 79e:	80 de       	rcall	.-768    	; 0x4a0 <I2C_Start>
 7a0:	80 e4       	ldi	r24, 0x40	; 64
 7a2:	a2 de       	rcall	.-700    	; 0x4e8 <I2C_Write>
 7a4:	8c 2f       	mov	r24, r28
 7a6:	a0 de       	rcall	.-704    	; 0x4e8 <I2C_Write>
 7a8:	b5 de       	rcall	.-662    	; 0x514 <I2C_Stop>
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

000007ae <setXY>:
 7ae:	cf 93       	push	r28
 7b0:	c6 2f       	mov	r28, r22
 7b2:	80 55       	subi	r24, 0x50	; 80
 7b4:	b1 df       	rcall	.-158    	; 0x718 <ssd1306_command>
 7b6:	8c 2f       	mov	r24, r28
 7b8:	88 0f       	add	r24, r24
 7ba:	88 0f       	add	r24, r24
 7bc:	88 0f       	add	r24, r24
 7be:	88 70       	andi	r24, 0x08	; 8
 7c0:	ab df       	rcall	.-170    	; 0x718 <ssd1306_command>
 7c2:	8c 2f       	mov	r24, r28
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	96 95       	lsr	r25
 7c8:	87 95       	ror	r24
 7ca:	8f 70       	andi	r24, 0x0F	; 15
 7cc:	80 5f       	subi	r24, 0xF0	; 240
 7ce:	a4 df       	rcall	.-184    	; 0x718 <ssd1306_command>
 7d0:	cf 91       	pop	r28
 7d2:	08 95       	ret

000007d4 <clear_display>:
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	d0 e0       	ldi	r29, 0x00	; 0
 7da:	0b c0       	rjmp	.+22     	; 0x7f2 <clear_display+0x1e>
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	8d 2f       	mov	r24, r29
 7e0:	e6 df       	rcall	.-52     	; 0x7ae <setXY>
 7e2:	c0 e0       	ldi	r28, 0x00	; 0
 7e4:	03 c0       	rjmp	.+6      	; 0x7ec <clear_display+0x18>
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	d6 df       	rcall	.-84     	; 0x796 <SendChar>
 7ea:	cf 5f       	subi	r28, 0xFF	; 255
 7ec:	cc 23       	and	r28, r28
 7ee:	dc f7       	brge	.-10     	; 0x7e6 <clear_display+0x12>
 7f0:	df 5f       	subi	r29, 0xFF	; 255
 7f2:	d8 30       	cpi	r29, 0x08	; 8
 7f4:	98 f3       	brcs	.-26     	; 0x7dc <clear_display+0x8>
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <sendStrXY>:
 7fc:	0f 93       	push	r16
 7fe:	1f 93       	push	r17
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	ec 01       	movw	r28, r24
 806:	86 2f       	mov	r24, r22
 808:	06 2f       	mov	r16, r22
 80a:	64 2f       	mov	r22, r20
 80c:	d0 df       	rcall	.-96     	; 0x7ae <setXY>
 80e:	1c c0       	rjmp	.+56     	; 0x848 <sendStrXY+0x4c>
 810:	8a 30       	cpi	r24, 0x0A	; 10
 812:	29 f4       	brne	.+10     	; 0x81e <sendStrXY+0x22>
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	80 0f       	add	r24, r16
 81a:	c9 df       	rcall	.-110    	; 0x7ae <setXY>
 81c:	21 96       	adiw	r28, 0x01	; 1
 81e:	10 e0       	ldi	r17, 0x00	; 0
 820:	10 c0       	rjmp	.+32     	; 0x842 <sendStrXY+0x46>
 822:	e8 81       	ld	r30, Y
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	b0 97       	sbiw	r30, 0x20	; 32
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	ee 0f       	add	r30, r30
 82e:	ff 1f       	adc	r31, r31
 830:	ee 0f       	add	r30, r30
 832:	ff 1f       	adc	r31, r31
 834:	ec 51       	subi	r30, 0x1C	; 28
 836:	ff 4f       	sbci	r31, 0xFF	; 255
 838:	e1 0f       	add	r30, r17
 83a:	f1 1d       	adc	r31, r1
 83c:	84 91       	lpm	r24, Z
 83e:	ab df       	rcall	.-170    	; 0x796 <SendChar>
 840:	1f 5f       	subi	r17, 0xFF	; 255
 842:	18 30       	cpi	r17, 0x08	; 8
 844:	70 f3       	brcs	.-36     	; 0x822 <sendStrXY+0x26>
 846:	21 96       	adiw	r28, 0x01	; 1
 848:	88 81       	ld	r24, Y
 84a:	81 11       	cpse	r24, r1
 84c:	e1 cf       	rjmp	.-62     	; 0x810 <sendStrXY+0x14>
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <print_fonts>:
void print_fonts(){
 858:	df 92       	push	r13
 85a:	ef 92       	push	r14
 85c:	ff 92       	push	r15
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
	clear_display();
 866:	b6 df       	rcall	.-148    	; 0x7d4 <clear_display>

	uint8_t data=32;
	for(int k=0;k<6;k++){
 868:	e1 2c       	mov	r14, r1
 86a:	f1 2c       	mov	r15, r1

}
void print_fonts(){
	clear_display();

	uint8_t data=32;
 86c:	68 94       	set
 86e:	dd 24       	eor	r13, r13
 870:	d5 f8       	bld	r13, 5
	for(int k=0;k<6;k++){
 872:	27 c0       	rjmp	.+78     	; 0x8c2 <print_fonts+0x6a>
		setXY(k,0);
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	8e 2d       	mov	r24, r14
 878:	9a df       	rcall	.-204    	; 0x7ae <setXY>

		for (int j=0;j<16;j++)
 87a:	00 e0       	ldi	r16, 0x00	; 0
 87c:	10 e0       	ldi	r17, 0x00	; 0
 87e:	19 c0       	rjmp	.+50     	; 0x8b2 <print_fonts+0x5a>
		{

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
 880:	f8 01       	movw	r30, r16
 882:	ed 0d       	add	r30, r13
 884:	f1 1d       	adc	r31, r1
 886:	b0 97       	sbiw	r30, 0x20	; 32
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	ee 0f       	add	r30, r30
 892:	ff 1f       	adc	r31, r31
 894:	ec 51       	subi	r30, 0x1C	; 28
 896:	ff 4f       	sbci	r31, 0xFF	; 255
 898:	ec 0f       	add	r30, r28
 89a:	fd 1f       	adc	r31, r29
 89c:	84 91       	lpm	r24, Z
 89e:	7b df       	rcall	.-266    	; 0x796 <SendChar>
		setXY(k,0);

		for (int j=0;j<16;j++)
		{

			for(int i=0;i<8;i++){
 8a0:	21 96       	adiw	r28, 0x01	; 1
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <print_fonts+0x50>
 8a4:	c0 e0       	ldi	r28, 0x00	; 0
 8a6:	d0 e0       	ldi	r29, 0x00	; 0
 8a8:	c8 30       	cpi	r28, 0x08	; 8
 8aa:	d1 05       	cpc	r29, r1
 8ac:	4c f3       	brlt	.-46     	; 0x880 <print_fonts+0x28>

	uint8_t data=32;
	for(int k=0;k<6;k++){
		setXY(k,0);

		for (int j=0;j<16;j++)
 8ae:	0f 5f       	subi	r16, 0xFF	; 255
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	00 31       	cpi	r16, 0x10	; 16
 8b4:	11 05       	cpc	r17, r1
 8b6:	b4 f3       	brlt	.-20     	; 0x8a4 <print_fonts+0x4c>

			for(int i=0;i<8;i++){
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
 8b8:	80 e1       	ldi	r24, 0x10	; 16
 8ba:	d8 0e       	add	r13, r24
}
void print_fonts(){
	clear_display();

	uint8_t data=32;
	for(int k=0;k<6;k++){
 8bc:	8f ef       	ldi	r24, 0xFF	; 255
 8be:	e8 1a       	sub	r14, r24
 8c0:	f8 0a       	sbc	r15, r24
 8c2:	86 e0       	ldi	r24, 0x06	; 6
 8c4:	e8 16       	cp	r14, r24
 8c6:	f1 04       	cpc	r15, r1
 8c8:	ac f2       	brlt	.-86     	; 0x874 <print_fonts+0x1c>
			SendChar(pgm_read_byte(myFont[(data+j)-0x20]+i));
			}
		}
		data=data+16;
	}
	}
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	1f 91       	pop	r17
 8d0:	0f 91       	pop	r16
 8d2:	ff 90       	pop	r15
 8d4:	ef 90       	pop	r14
 8d6:	df 90       	pop	r13
 8d8:	08 95       	ret

000008da <init_timer0>:
	TIMSK1 |= (1<<OCIE1B);				//Interrupt when TCNT1 = OCR3B
}
	
//Initialize hardware timer 0
void init_timer0(){
	DDRB |= (1<<DDB7);					// Set OC0A as output
 8da:	84 b1       	in	r24, 0x04	; 4
 8dc:	80 68       	ori	r24, 0x80	; 128
 8de:	84 b9       	out	0x04, r24	; 4
	TCCR0A |= (1<<COM0A0) | (1<<WGM01); //Toggle OC0A CTC-mode
 8e0:	84 b5       	in	r24, 0x24	; 36
 8e2:	82 64       	ori	r24, 0x42	; 66
 8e4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);				//Prescaler 8
 8e6:	85 b5       	in	r24, 0x25	; 37
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;							//Count from 0
 8ec:	16 bc       	out	0x26, r1	; 38
	OCR0A = 124;						//Compare value
 8ee:	8c e7       	ldi	r24, 0x7C	; 124
 8f0:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);				//Interrupt when TCNT1 = OCR0A
 8f2:	ee e6       	ldi	r30, 0x6E	; 110
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	80 83       	st	Z, r24
 8fc:	08 95       	ret

000008fe <_exit>:
 8fe:	f8 94       	cli

00000900 <__stop_program>:
 900:	ff cf       	rjmp	.-2      	; 0x900 <__stop_program>
